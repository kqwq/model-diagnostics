/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={769:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,'/*\n! tailwindcss v3.0.23 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput:-ms-input-placeholder, textarea:-ms-input-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/*\nEnsure the default browser behavior of the `hidden` attribute.\n*/\n\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\r\n.tab {\n  display: inline-block;\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.tab:not(.active) {\n  font-weight: 600;\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\r\n.tab:not(.active):hover {\n  --tw-text-opacity: 1;\n  color: rgb(30 64 175 / var(--tw-text-opacity));\n}\r\n.tab.active {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n  border-left-width: 1px;\n  border-top-width: 1px;\n  border-right-width: 1px;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  font-weight: 600;\n  --tw-text-opacity: 1;\n  color: rgb(29 78 216 / var(--tw-text-opacity));\n}\r\n#chunk-container {\n  display: grid;\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\r\n@media (min-width: 768px) {\n\n  #chunk-container {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\r\n.chunk {\n  padding: 1rem;\n}\r\n@media (min-width: 768px) {\n\n  .chunk {\n    padding: 1.5rem;\n  }\n}\r\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\r\n.mt-8 {\n  margin-top: 2rem;\n}\r\n.mt-4 {\n  margin-top: 1rem;\n}\r\n.mt-2 {\n  margin-top: 0.5rem;\n}\r\n.mr-auto {\n  margin-right: auto;\n}\r\n.-mb-px {\n  margin-bottom: -1px;\n}\r\n.mr-1 {\n  margin-right: 0.25rem;\n}\r\n.mt-0 {\n  margin-top: 0px;\n}\r\n.mt-10 {\n  margin-top: 2.5rem;\n}\r\n.ml-4 {\n  margin-left: 1rem;\n}\r\n.mt-3 {\n  margin-top: 0.75rem;\n}\r\n.mt-6 {\n  margin-top: 1.5rem;\n}\r\n.block {\n  display: block;\n}\r\n.flex {\n  display: flex;\n}\r\n.grid {\n  display: grid;\n}\r\n.w-full {\n  width: 100%;\n}\r\n.items-center {\n  align-items: center;\n}\r\n.justify-items-center {\n  justify-items: center;\n}\r\n.space-x-6 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(1.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\r\n.space-x-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1rem * var(--tw-space-x-reverse));\n  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\n}\r\n.overflow-hidden {\n  overflow: hidden;\n}\r\n.overflow-x-auto {\n  overflow-x: auto;\n}\r\n.rounded-lg {\n  border-radius: 0.5rem;\n}\r\n.rounded-full {\n  border-radius: 9999px;\n}\r\n.border-2 {\n  border-width: 2px;\n}\r\n.border-b {\n  border-bottom-width: 1px;\n}\r\n.border-violet-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(167 139 250 / var(--tw-border-opacity));\n}\r\n.bg-slate-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 250 252 / var(--tw-bg-opacity));\n}\r\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\r\n.bg-blue-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n}\r\n.bg-violet-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(139 92 246 / var(--tw-bg-opacity));\n}\r\n.bg-gradient-to-tr {\n  background-image: linear-gradient(to top right, var(--tw-gradient-stops));\n}\r\n.from-blue-100 {\n  --tw-gradient-from: #dbeafe;\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgb(219 234 254 / 0));\n}\r\n.to-purple-200 {\n  --tw-gradient-to: #e9d5ff;\n}\r\n.p-2 {\n  padding: 0.5rem;\n}\r\n.p-5 {\n  padding: 1.25rem;\n}\r\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.text-center {\n  text-align: center;\n}\r\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\r\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\r\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\r\n.font-bold {\n  font-weight: 700;\n}\r\n.font-light {\n  font-weight: 300;\n}\r\n.font-semibold {\n  font-weight: 600;\n}\r\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\r\n.text-slate-500 {\n  --tw-text-opacity: 1;\n  color: rgb(100 116 139 / var(--tw-text-opacity));\n}\r\n.text-blue-700 {\n  --tw-text-opacity: 1;\n  color: rgb(29 78 216 / var(--tw-text-opacity));\n}\r\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\r\n\r\n#download-files-container button {\r\n  margin: 0.5rem 1rem;\r\n}\r\n#outro a {\r\n  color: #00f;\r\n  font-weight: bold;\r\n}\r\n#outro a:hover {\r\n  text-decoration: underline;\r\n}\r\nh2 {\r\n  display: none\r\n}\r\n.file\\:mr-4::-webkit-file-upload-button {\n  margin-right: 1rem;\n}\r\n.file\\:mr-4::file-selector-button {\n  margin-right: 1rem;\n}\r\n.file\\:rounded-full::-webkit-file-upload-button {\n  border-radius: 9999px;\n}\r\n.file\\:rounded-full::file-selector-button {\n  border-radius: 9999px;\n}\r\n.file\\:border-0::-webkit-file-upload-button {\n  border-width: 0px;\n}\r\n.file\\:border-0::file-selector-button {\n  border-width: 0px;\n}\r\n.file\\:bg-violet-50::-webkit-file-upload-button {\n  --tw-bg-opacity: 1;\n  background-color: rgb(245 243 255 / var(--tw-bg-opacity));\n}\r\n.file\\:bg-violet-50::file-selector-button {\n  --tw-bg-opacity: 1;\n  background-color: rgb(245 243 255 / var(--tw-bg-opacity));\n}\r\n.file\\:py-2::-webkit-file-upload-button {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.file\\:py-2::file-selector-button {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.file\\:px-4::-webkit-file-upload-button {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.file\\:px-4::file-selector-button {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.file\\:text-sm::-webkit-file-upload-button {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.file\\:text-sm::file-selector-button {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.file\\:font-semibold::-webkit-file-upload-button {\n  font-weight: 600;\n}\r\n.file\\:font-semibold::file-selector-button {\n  font-weight: 600;\n}\r\n.file\\:text-violet-700::-webkit-file-upload-button {\n  --tw-text-opacity: 1;\n  color: rgb(109 40 217 / var(--tw-text-opacity));\n}\r\n.file\\:text-violet-700::file-selector-button {\n  --tw-text-opacity: 1;\n  color: rgb(109 40 217 / var(--tw-text-opacity));\n}\r\n.hover\\:bg-blue-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(29 78 216 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-violet-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(109 40 217 / var(--tw-bg-opacity));\n}\r\n.hover\\:text-blue-600:hover {\n  --tw-text-opacity: 1;\n  color: rgb(37 99 235 / var(--tw-text-opacity));\n}\r\n.hover\\:file\\:bg-violet-100::-webkit-file-upload-button:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(237 233 254 / var(--tw-bg-opacity));\n}\r\n.hover\\:file\\:bg-violet-100::file-selector-button:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(237 233 254 / var(--tw-bg-opacity));\n}\r\n@media (min-width: 640px) {\n\n  .sm\\:w-40 {\n    width: 10rem;\n  }\n\n  .sm\\:w-20 {\n    width: 5rem;\n  }\n}\r\n@media (min-width: 768px) {\n\n  .md\\:w-2\\/3 {\n    width: 66.666667%;\n  }\n}',"",{version:3,sources:["webpack://./src/main.css","webpack://./src/%3Cinput%20css%20Re_yO7%3E","<no source>"],names:[],mappings:"AAAA;;CAAc,CAAd;;;CAAc;;AAAd;;;ECQE,sBAAsB,EAAE,MAAM;EAC9B,eAAe,EAAE,MAAM;EACvB,mBAAmB,EAAE,MAAM;EAC3B,qBAAwD,EAAE,MAAM;ADXpD;;AAAd;;ECgBE,gBAAgB;ADhBJ;;AAAd;;;;;CAAc;;AAAd;EC2BE,gBAAgB,EAAE,MAAM;EACxB,8BAA8B,EAAE,MAAM;EACtC,gBAAgB,EAAE,MAAM;EACxB,cAAW;KAAX,WAAW,EAAE,MAAM;EACnB,4NAAsP,EAAE,MAAM;AD/BlP;;AAAd;;;CAAc;;AAAd;ECwCE,SAAS,EAAE,MAAM;EACjB,oBAAoB,EAAE,MAAM;ADzChB;;AAAd;;;;CAAc;;AAAd;ECmDE,SAAS,EAAE,MAAM;EACjB,cAAc,EAAE,MAAM;EACtB,qBAAqB,EAAE,MAAM;ADrDjB;;AAAd;;CAAc;;AAAd;EC6DE,yCAAiC;UAAjC,iCAAiC;AD7DrB;;AAAd;;CAAc;;AAAd;;;;;;EC0EE,kBAAkB;EAClB,oBAAoB;AD3ER;;AAAd;;CAAc;;AAAd;ECmFE,cAAc;EACd,wBAAwB;ADpFZ;;AAAd;;CAAc;;AAAd;;EC6FE,mBAAmB;AD7FP;;AAAd;;;CAAc;;AAAd;;;;ECyGE,+GAAyI,EAAE,MAAM;EACjJ,cAAc,EAAE,MAAM;AD1GV;;AAAd;;CAAc;;AAAd;ECkHE,cAAc;ADlHF;;AAAd;;CAAc;;AAAd;;EC2HE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AD9HZ;;AAAd;ECkIE,eAAe;ADlIH;;AAAd;ECsIE,WAAW;ADtIC;;AAAd;;;;CAAc;;AAAd;ECgJE,cAAc,EAAE,MAAM;EACtB,qBAAqB,EAAE,MAAM;EAC7B,yBAAyB,EAAE,MAAM;ADlJrB;;AAAd;;;;CAAc;;AAAd;;;;;ECgKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,oBAAoB,EAAE,MAAM;EAC5B,cAAc,EAAE,MAAM;EACtB,SAAS,EAAE,MAAM;EACjB,UAAU,EAAE,MAAM;ADrKN;;AAAd;;CAAc;;AAAd;;EC8KE,oBAAoB;AD9KR;;AAAd;;;CAAc;;AAAd;;;;EC0LE,0BAA0B,EAAE,MAAM;EAClC,6BAA6B,EAAE,MAAM;EACrC,sBAAsB,EAAE,MAAM;AD5LlB;;AAAd;;CAAc;;AAAd;ECoME,aAAa;ADpMD;;AAAd;;CAAc;;AAAd;EC4ME,gBAAgB;AD5MJ;;AAAd;;CAAc;;AAAd;ECoNE,wBAAwB;ADpNZ;;AAAd;;CAAc;;AAAd;;EC6NE,YAAY;AD7NA;;AAAd;;;CAAc;;AAAd;ECsOE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;ADvOhB;;AAAd;;CAAc;;AAAd;EC+OE,wBAAwB;AD/OZ;;AAAd;;;CAAc;;AAAd;ECwPE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;ADzPT;;AAAd;;CAAc;;AAAd;ECiQE,kBAAkB;ADjQN;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;ECqRE,SAAS;ADrRG;;AAAd;ECyRE,SAAS;EACT,UAAU;AD1RE;;AAAd;EC8RE,UAAU;AD9RE;;AAAd;;;ECoSE,gBAAgB;EAChB,SAAS;EACT,UAAU;ADtSE;;AAAd;;CAAc;;AAAd;EC8SE,gBAAgB;AD9SJ;;AAAd;;;CAAc;;AAAd;ECwTE,UAAU,EAAE,MAAM;EAClB,cAAwC,EAAE,MAAM;ADzTpC;;AAAd;ECwTE,UAAU,EAAE,MAAM;EAClB,cAAwC,EAAE,MAAM;ADzTpC;;AAAd;;ECwTE,UAAU,EAAE,MAAM;EAClB,cAAwC,EAAE,MAAM;ADzTpC;;AAAd;;CAAc;;AAAd;;ECkUE,eAAe;ADlUH;;AAAd;;CAAc;AAAd;ECyUE,eAAe;ADzUH;;AAAd;;;;CAAc;;AAAd;;;;;;;;EC0VE,cAAc,EAAE,MAAM;EACtB,sBAAsB,EAAE,MAAM;AD3VlB;;AAAd;;CAAc;;AAAd;;ECoWE,eAAe;EACf,YAAY;ADrWA;;AAAd;;CAAc;;AAAd;EC6WE,aAAa;AD7WD;;AEAd;EAAA,oBAAA;EAAA,oBAAA;EAAA,eAAA;EAAA,eAAA;EAAA,eAAA;EAAA,gBAAA;EAAA,gBAAA;EAAA,cAAA;EAAA,cAAA;EAAA,mBAAA;EAAA,uCAAA;EAAA,gBAAA;EAAA,qBAAA;EAAA,uBAAA;EAAA,wBAAA;EAAA,yBAAA;EAAA,mBAAA;EAAA,4BAAA;EAAA,6BAAA;EAAA,uCAAA;EAAA,mCAAA;EAAA,4BAAA;EAAA,uBAAA;EAAA,+BAAA;EAAA,aAAA;EAAA,mBAAA;EAAA,iBAAA;EAAA,kBAAA;EAAA,mBAAA;EAAA,eAAA;EAAA,iBAAA;EAAA,cAAA;EAAA,oBAAA;EAAA,sBAAA;EAAA,4BAAA;EAAA,0BAAA;EAAA,2BAAA;EAAA,4BAAA;EAAA,wBAAA;EAAA,yBAAA;EAAA,0BAAA;EAAA;CAAA;AAAA;EAAA,sBAAA;EAAA,mBAAA;EAAA,0DAAA;EAAA,oBAAA;EAAA,uBAAA;EAAA,mBAAA;EAAA;CAAA;AAAA;EAAA,iBAAA;EAAA,qBAAA;EAAA;CAAA;AAAA;EAAA,qBAAA;EAAA;CAAA;AAAA;EAAA,gCAAA;EAAA,iCAAA;EAAA,uBAAA;EAAA,sBAAA;EAAA,wBAAA;EAAA,oBAAA;EAAA,uBAAA;EAAA,mBAAA;EAAA,oBAAA;EAAA,iBAAA;EAAA,qBAAA;EAAA;CAAA;AAAA;EAAA,cAAA;EAAA;CAAA;AAAA;;EAAA;IAAA;GAAA;CAAA;AAAA;EAAA;CAAA;AAAA;;EAAA;IAAA;GAAA;CAAA;AFEA;EEFA,mBAAA;EAAA,WAAA;EAAA,YAAA;EAAA,WAAA;EAAA,aAAA;EAAA,iBAAA;EAAA,uBAAA;EAAA,oBAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA,wBAAA;EAAA,uDAAA;EAAA;AFEmB;AAAnB;EEFA,wBAAA;EAAA,qDAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA,uBAAA;EAAA;AFEmB;AAAnB;EEFA,mBAAA;EAAA;AFEmB;AAAnB;EEFA,mBAAA;EAAA;AFEmB;AAAnB;EEFA,mBAAA;EAAA;AFEmB;AAAnB;EEFA,mBAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA,4BAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA,oBAAA;EAAA;AFEmB;AAAnB;EEFA,mBAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA,oBAAA;EAAA;AFEmB;AAAnB;EEFA,oBAAA;EAAA;AFEmB;AAAnB;EEFA,oBAAA;EAAA;AFEmB;AAAnB;EEFA,kBAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA;AFEmB;AAAnB;EEFA,qBAAA;EAAA;AFEmB;AAAnB;EEFA,qBAAA;EAAA;AFEmB;AAAnB;EEFA,qBAAA;EAAA;AFEmB;AAAnB;EEFA,qBAAA;EAAA;AFEmB;AAAnB;EEFA;AFEmB;;AAEnB;EACE,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,iBAAiB;AACnB;AACA;EACE,0BAA0B;AAC5B;AACA;EACE;AACF;AAhBA;EEAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,oBAAA;EAAA;CAAA;AFAA;EEAA,oBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,oBAAA;EAAA;CAAA;AFAA;EEAA,oBAAA;EAAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA;CAAA;AFAA;EEAA,qBAAA;EAAA;CAAA;AFAA;EEAA,qBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,qBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;EEAA,mBAAA;EAAA;CAAA;AFAA;;EEAA;IAAA;GAAA;;EAAA;IAAA;GAAA;CAAA;AFAA;;EEAA;IAAA;GAAA;CAAA",sourcesContent:["@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n#download-files-container button {\r\n  margin: 0.5rem 1rem;\r\n}\r\n#outro a {\r\n  color: #00f;\r\n  font-weight: bold;\r\n}\r\n#outro a:hover {\r\n  text-decoration: underline;\r\n}\r\nh2 {\r\n  display: none\r\n}\r\n\r\n@layer components {\r\n  .tab {\r\n    @apply py-2 px-4 bg-white inline-block \r\n  }\r\n  .tab:not(.active) {\r\n    @apply text-blue-500 hover:text-blue-800 font-semibold \r\n  }\r\n  .tab.active {\r\n    @apply border-l border-t border-r rounded-t py-2 px-4 text-blue-700 font-semibold\r\n  }\r\n  #chunk-container {\r\n    @apply grid grid-cols-1 md:grid-cols-2\r\n  }\r\n  .chunk {\r\n    @apply p-4 md:p-6 \r\n  }\r\n\r\n}","/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: theme('borderColor.DEFAULT', currentColor); /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  tab-size: 4; /* 3 */\n  font-family: theme('fontFamily.sans', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"); /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: theme('fontFamily.mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace); /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: theme('colors.gray.400', #9ca3af); /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/*\nEnsure the default browser behavior of the `hidden` attribute.\n*/\n\n[hidden] {\n  display: none;\n}\n",null],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);i&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},643:t=>{t.exports=[{x:20.524,y1:.48127,y2:.52361,lny1:-.731326836,sqrty1:.693736261,lny2:-.647008147,"sqrt(y2)":.72360901},{x:20.8341,y1:.42952,y2:.42186,lny1:-.845086973,sqrty1:.655377754,lny2:-.863081774,"sqrt(y2)":.649507506},{x:21.2171,y1:.49901,y2:.51135,lny1:-.695129143,sqrty1:.706406399,lny2:-.670700992,"sqrt(y2)":.715087407},{x:21.4278,y1:.55319,y2:.56553,lny1:-.592053756,sqrty1:.743767437,lny2:-.569991934,"sqrt(y2)":.752017287},{x:21.4908,y1:.50087,y2:.51321,lny1:-.691408693,sqrty1:.707721697,lny2:-.667070161,"sqrt(y2)":.716386767},{x:22.5,y1:.46333,y2:.49567,lny1:-.769315736,sqrty1:.68068348,lny2:-.701844896,"sqrt(y2)":.704038351},{x:23.2714,y1:.62228,y2:.63462,lny1:-.474365127,sqrty1:.78884726,lny2:-.454728884,"sqrt(y2)":.796630404},{x:23.5986,y1:.82274,y2:.83508,lny1:-.195115046,sqrty1:.907050164,lny2:-.18022775,"sqrt(y2)":.913827117},{x:23.8754,y1:.8935,y2:.90584,lny1:-.112608944,sqrty1:.945251289,lny2:-.098892589,"sqrt(y2)":.951756271},{x:24.4839,y1:.88193,y2:.89427,lny1:-.125642591,sqrty1:.939111282,lny2:-.111747536,"sqrt(y2)":.945658501},{x:25.8852,y1:1.13826,y2:1.1506,lny1:.129500781,sqrty1:1.066892684,lny2:.140283545,"sqrt(y2)":1.072660244},{x:26.802,y1:1.17061,y2:1.18295,lny1:.15752498,sqrty1:1.081947318,lny2:.168011319,"sqrt(y2)":1.087635049},{x:28.0594,y1:1.50172,y2:1.51406,lny1:.406611118,sqrty1:1.225446857,lny2:.414794784,"sqrt(y2)":1.230471454},{x:28.0608,y1:1.46931,y2:1.48165,lny1:.384792903,sqrty1:1.212150981,lny2:.393156332,"sqrt(y2)":1.217230463},{x:28.5179,y1:1.34014,y2:1.43248,lny1:.292774086,sqrty1:1.157644159,lny2:.359407208,"sqrt(y2)":1.196862565},{x:28.6821,y1:1.60299,y2:1.61533,lny1:.471870635,sqrty1:1.266092414,lny2:.47953927,"sqrt(y2)":1.270956333},{x:28.8839,y1:1.47529,y2:1.48763,lny1:.388854581,sqrty1:1.214615165,lny2:.39718425,"sqrt(y2)":1.219684385},{x:29.0874,y1:1.58102,y2:1.59336,lny1:.458070208,sqrty1:1.257386178,lny2:.465844994,"sqrt(y2)":1.262283645},{x:29.2126,y1:1.70732,y2:1.73966,lny1:.53492489,sqrty1:1.306644558,lny2:.553689692,"sqrt(y2)":1.318961713},{x:29.4137,y1:1.5471,y2:1.55944,lny1:.436382211,sqrty1:1.243824746,lny2:.444326782,"sqrt(y2)":1.2487754},{x:29.6491,y1:1.67378,y2:1.68612,lny1:.515084542,sqrty1:1.293746498,lny2:.522430031,"sqrt(y2)":1.298506835},{x:30.3547,y1:1.64986,y2:1.6622,lny1:.500690436,sqrty1:1.284468762,lny2:.508142026,"sqrt(y2)":1.289263356},{x:31.0469,y1:1.7208,y2:1.83314,lny1:.542789299,sqrty1:1.311792667,lny2:.606030343,"sqrt(y2)":1.353935006},{x:31.2342,y1:1.96054,y2:1.87288,lny1:.673219946,sqrty1:1.400192844,lny2:.627477353,"sqrt(y2)":1.36853206},{x:31.7603,y1:1.89,y2:1.90234,lny1:.636576829,sqrty1:1.374772708,lny2:.643084707,"sqrt(y2)":1.379253421},{x:32.1149,y1:1.83903,y2:1.95137,lny1:.609238259,sqrty1:1.356108403,lny2:.66853169,"sqrt(y2)":1.396914457},{x:32.5658,y1:2.22192,y2:2.20426,lny1:.798371687,sqrty1:1.490610613,lny2:.790391852,"sqrt(y2)":1.484675049},{x:32.7939,y1:2.03159,y2:2.04393,lny1:.708818738,sqrty1:1.425338556,lny2:.714874425,"sqrt(y2)":1.429660799},{x:32.9055,y1:2.1104,y2:2.12274,lny1:.746877503,sqrty1:1.452721584,lny2:.752707707,"sqrt(y2)":1.456962594},{x:33.4207,y1:2.13308,y2:2.14542,lny1:.757566945,sqrty1:1.460506761,lny2:.763335337,"sqrt(y2)":1.46472523},{x:34.3227,y1:2.22147,y2:2.23381,lny1:.798169139,sqrty1:1.490459661,lny2:.803708648,"sqrt(y2)":1.49459359},{x:34.4289,y1:2.36154,y2:2.37388,lny1:.859313949,sqrty1:1.536730295,lny2:.864525747,"sqrt(y2)":1.540740082},{x:34.5063,y1:2.3218,y2:2.33414,lny1:.842342747,sqrty1:1.523745386,lny2:.847643515,"sqrt(y2)":1.527789252},{x:34.5442,y1:2.27433,y2:2.28667,lny1:.821685504,sqrty1:1.508088194,lny2:.827096611,"sqrt(y2)":1.512173932},{x:34.5962,y1:2.41829,y2:2.43063,lny1:.883060679,sqrty1:1.555085207,lny2:.888150483,"sqrt(y2)":1.559047786},{x:34.5967,y1:2.24267,y2:2.25501,lny1:.80766712,sqrty1:1.497554673,lny2:.813154408,"sqrt(y2)":1.501669071},{x:35.1584,y1:2.45399,y2:2.46633,lny1:.897715271,sqrty1:1.566521624,lny2:.902731216,"sqrt(y2)":1.570455348},{x:35.5118,y1:2.52507,y2:2.53741,lny1:.926268785,sqrty1:1.589046884,lny2:.931143876,"sqrt(y2)":1.592924983},{x:35.596,y1:2.61923,y2:2.48157,lny1:.962880381,sqrty1:1.618403534,lny2:.908891424,"sqrt(y2)":1.575299971},{x:35.6313,y1:2.41122,y2:2.42356,lny1:.880132843,sqrty1:1.552810355,lny2:.885237534,"sqrt(y2)":1.556778725},{x:35.6864,y1:2.51702,y2:2.52936,lny1:.923075662,sqrty1:1.586511897,lny2:.927966306,"sqrt(y2)":1.590396177},{x:35.7901,y1:2.60383,y2:2.61617,lny1:.956983438,sqrty1:1.613638745,lny2:.961711416,"sqrt(y2)":1.617457882},{x:36.2277,y1:2.58704,y2:2.59938,lny1:.950514365,sqrty1:1.608427804,lny2:.955272955,"sqrt(y2)":1.612259284},{x:36.3897,y1:2.43938,y2:2.59172,lny1:.891743909,sqrty1:1.561851465,lny2:.952321748,"sqrt(y2)":1.609881983},{x:36.5535,y1:2.67665,y2:2.68899,lny1:.984566013,sqrty1:1.636047065,lny2:.989165658,"sqrt(y2)":1.639814014},{x:37.1088,y1:2.824,y2:2.83634,lny1:1.03815432,sqrty1:1.680476123,lny2:1.042514489,"sqrt(y2)":1.684143699},{x:37.6168,y1:2.79316,y2:2.8055,lny1:1.027173571,sqrty1:1.671274962,lny2:1.031581776,"sqrt(y2)":1.674962686},{x:38.6535,y1:2.85543,y2:2.88777,lny1:1.049222445,sqrty1:1.689801764,lny2:1.060484578,"sqrt(y2)":1.699343991},{x:38.927,y1:3.05913,y2:2.99247,lny1:1.118130562,sqrty1:1.749036878,lny2:1.096099133,"sqrt(y2)":1.729875718},{x:39.4211,y1:2.94316,y2:2.9755,lny1:1.079483834,sqrty1:1.715564047,lny2:1.090412092,"sqrt(y2)":1.724963768}]},382:t=>{t.exports=[{x:10,y1:8.48556,y2:23.0661,y3:23.0661,y4:170.437},{x:10,y1:6.54768,y2:17.7984,y3:17.7984,y4:131.514},{x:10,y1:5.91496,y2:16.0785,y3:16.0785,y4:118.805},{x:10,y1:6.95869,y2:18.9157,y3:18.9157,y4:139.769},{x:12.5,y1:7.08552,y2:20.3431,y3:18.0935,y4:149.146},{x:12.5,y1:5.36906,y2:15.415,y3:13.7104,y4:113.016},{x:12.5,y1:8.56141,y2:24.5805,y3:21.8623,y4:180.213},{x:15,y1:4.36179,y2:13.0219,y3:10.4634,y4:93.259},{x:15,y1:7.61494,y2:22.734,y3:18.2673,y4:162.815},{x:15,y1:5.35957,y2:16.0007,y3:12.8569,y4:114.593},{x:15,y1:7.24102,y2:21.6177,y3:17.3703,y4:154.82},{x:17.5,y1:6.68823,y2:20.4409,y3:15.0722,y4:140.784},{x:17.5,y1:5.49109,y2:16.7821,y3:12.3744,y4:115.585},{x:17.5,y1:5.02025,y2:15.3431,y3:11.3133,y4:105.674},{x:20,y1:5.88721,y2:18.1339,y3:12.4632,y4:118.248},{x:20,y1:4.79804,y2:14.779,y3:10.1574,y4:96.371},{x:20,y1:6.21761,y2:19.1516,y3:13.1627,y4:124.884},{x:20,y1:5.01048,y2:15.4334,y3:10.6072,y4:100.638},{x:22.5,y1:6.11632,y2:18.693,y3:12.1638,y4:113.617},{x:22.5,y1:3.85872,y2:11.7932,y3:7.674,y4:71.68},{x:22.5,y1:4.0483,y2:12.3726,y3:8.051,y4:75.202},{x:25,y1:3.78081,y2:11.2874,y3:7.0635,y4:62.956},{x:25,y1:4.75,y2:14.1809,y3:8.8742,y4:79.095},{x:25,y1:3.8053,y2:11.3605,y3:7.1092,y4:63.364},{x:25,y1:4.60228,y2:13.7399,y3:8.5982,y4:76.635},{x:27.5,y1:5.50101,y2:15.7938,y3:9.6546,y4:79.583},{x:27.5,y1:3.40757,y2:9.7834,y3:5.9805,y4:49.298},{x:27.5,y1:4.25487,y2:12.2161,y3:7.4675,y4:61.556},{x:30,y1:4.43,y2:12.042,y3:7.3038,y4:53.968},{x:30,y1:3.84008,y2:10.4384,y3:6.3312,y4:46.782},{x:30,y1:5.35004,y2:14.5429,y3:8.8207,y4:65.177},{x:30,y1:4.13762,y2:11.2472,y3:6.8218,y4:50.407},{x:32.5,y1:4.47874,y2:11.3479,y3:6.9368,y4:44.532},{x:32.5,y1:6.68709,y2:16.9432,y3:10.3572,y4:66.49},{x:32.5,y1:4.2686,y2:10.8154,y3:6.6113,y4:42.443},{x:35,y1:2.4077,y2:5.5981,y3:3.5032,y4:18.938},{x:35,y1:4.20408,y2:9.7748,y3:6.1169,y4:33.068},{x:35,y1:5.46921,y2:12.7163,y3:7.9577,y4:43.019},{x:35,y1:5.16679,y2:12.0131,y3:7.5176,y4:40.64},{x:37.5,y1:3.28498,y2:6.9002,y3:4.49,y4:19.811},{x:37.5,y1:5.88766,y2:12.3672,y3:8.0475,y4:35.507},{x:37.5,y1:3.63573,y2:7.6369,y3:4.9695,y4:21.926},{x:40,y1:4.30961,y2:8.0514,y3:5.5336,y4:19.314},{x:40,y1:3.40571,y2:6.3627,y3:4.373,y4:15.263},{x:40,y1:2.96341,y2:5.5364,y3:3.8051,y4:13.281},{x:40,y1:4.12679,y2:7.7099,y3:5.2989,y4:18.495},{x:42.5,y1:3.57329,y2:5.8455,y3:4.3102,y4:11.535},{x:42.5,y1:3.711,y2:6.0708,y3:4.4763,y4:11.979},{x:42.5,y1:2.94387,y2:4.8159,y3:3.551,y4:9.503},{x:45,y1:2.96109,y2:4.1758,y3:3.3554,y4:6.673},{x:45,y1:2.05695,y2:2.9008,y3:2.3308,y4:4.635},{x:45,y1:3.70538,y2:5.2254,y3:4.1987,y4:8.35},{x:45,y1:4.25211,y2:5.9964,y3:4.8183,y4:9.582},{x:47.5,y1:3.45254,y2:4.1321,y3:3.6752,y4:5.264},{x:47.5,y1:3.56113,y2:4.2621,y3:3.7908,y4:5.43},{x:47.5,y1:2.82369,y2:3.3795,y3:3.0058,y4:4.306},{x:50,y1:3.11827,y2:3.1183,y3:3.1183,y4:3.118},{x:50,y1:2.21736,y2:2.2174,y3:2.2174,y4:2.217},{x:50,y1:2.21867,y2:2.2187,y3:2.2187,y4:2.219},{x:50,y1:2.27904,y2:2.279,y3:2.279,y4:2.279}]},188:t=>{t.exports=[{x:10.1282,y1:5.3909,y2:14.7008,y3:14.6072,y4:108.623},{x:10.2039,y1:6.2777,y2:17.1508,y3:16.9777,y4:126.722},{x:10.6759,y1:10.1722,y2:28.106,y3:27.1876,y4:207.558},{x:11.3968,y1:7.9344,y2:22.2799,y3:20.8277,y4:164.226},{x:11.9863,y1:8.4607,y2:24.0506,y3:21.8845,y4:176.837},{x:12.5949,y1:6.2889,y2:18.0878,y3:16.0212,y4:132.531},{x:13.8492,y1:6.041,y2:17.7481,y3:14.9146,y4:128.735},{x:14.2763,y1:6.2037,y2:18.342,y3:15.1535,y4:132.467},{x:14.3492,y1:6.792,y2:20.1022,y3:16.5604,y4:145.065},{x:14.8539,y1:6.8929,y2:20.5401,y3:16.5956,y4:147.368},{x:16.868,y1:6.1687,y2:18.7694,y3:14.1228,y4:130.748},{x:17.2777,y1:7.9385,y2:24.2268,y3:17.9894,y4:167.545},{x:18.7251,y1:4.9152,y2:15.1093,y3:10.7425,y4:101.509},{x:19.6603,y1:6.2474,y2:19.2406,y3:13.3386,y4:126.516},{x:23.3309,y1:6.6145,y2:20.0936,y3:12.8841,y4:118.897},{x:24.1781,y1:3.5655,y2:10.7453,y3:6.7994,y4:61.756},{x:24.4415,y1:4.8285,y2:14.5106,y3:9.1477,y4:82.614},{x:24.8859,y1:5.6692,y2:16.9491,y3:10.6218,y4:94.938},{x:25.1212,y1:5.6906,y2:16.963,y3:10.5993,y4:94.181},{x:26.1012,y1:3.4716,y2:10.207,y3:6.3096,y4:54.544},{x:26.8409,y1:3.3702,y2:9.791,y3:6.0131,y4:50.752},{x:27.9584,y1:5.5325,y2:15.7441,y3:9.5992,y4:77.737},{x:28.5876,y1:4.3671,y2:12.2669,y3:7.4588,y4:58.852},{x:28.7918,y1:4.551,y2:12.7271,y3:7.7335,y4:60.48},{x:29.6233,y1:5.8145,y2:15.9522,y3:9.6772,y4:72.839},{x:29.7342,y1:6.2137,y2:17.0017,y3:10.3129,y4:77.209},{x:30.2142,y1:3.5666,y2:9.6427,y3:5.8489,y4:42.753},{x:30.2891,y1:3.4461,y2:9.299,y3:5.6407,y4:41.073},{x:31.1417,y1:4.2928,y2:11.3222,y3:6.8785,y4:47.849},{x:31.2799,y1:4.6262,y2:12.1544,y3:7.3871,y4:50.991},{x:31.387,y1:4.0638,y2:10.6446,y3:6.4718,y4:44.402},{x:32.0951,y1:5.4576,y2:14.0012,y3:8.5389,y4:56.199},{x:32.0981,y1:4.5515,y2:11.6756,y3:7.1207,y4:46.857},{x:33.5676,y1:3.0292,y2:7.4128,y3:4.5682,y4:27.355},{x:33.9372,y1:6.2378,y2:15.0718,y3:9.3204,y4:54.412},{x:34.6374,y1:3.2805,y2:7.7305,y3:4.8165,y4:26.747},{x:34.6945,y1:4.255,y2:10.006,y3:6.2385,y4:34.498},{x:35.0456,y1:3.7578,y2:8.7222,y3:5.4614,y4:29.423},{x:35.2003,y1:4.5043,y2:10.394,y3:6.521,y4:34.723},{x:37.4869,y1:3.8242,y2:8.0375,y3:5.2288,y4:23.097},{x:39.0488,y1:4.3613,y2:8.5352,y3:5.7348,y4:21.964},{x:39.543,y1:4.5557,y2:8.7056,y3:5.9169,y4:21.606},{x:40.431,y1:4.6503,y2:8.5007,y3:5.9071,y4:19.739},{x:40.5578,y1:2.9206,y2:5.3042,y3:3.6981,y4:12.198},{x:40.7709,y1:3.3111,y2:5.9476,y3:4.1703,y4:13.456},{x:40.9024,y1:3.7105,y2:6.6196,y3:4.6581,y4:14.825},{x:41.1412,y1:4.6448,y2:8.1831,y3:5.7963,y4:17.991},{x:41.1526,y1:2.4152,y2:4.2524,y3:3.0131,y4:9.341},{x:42.2755,y1:3.7996,y2:6.2943,y3:4.609,y4:12.648},{x:42.7457,y1:2.8121,y2:4.5369,y3:3.3713,y4:8.775},{x:43.0807,y1:3.0807,y2:4.8757,y3:3.6625,y4:9.174},{x:43.2431,y1:2.5475,y2:3.994,y3:3.0163,y4:7.414},{x:43.6475,y1:2.4909,y2:3.8139,y3:2.9197,y4:6.845},{x:44.2871,y1:3.4322,y2:5.0574,y3:3.9591,y4:8.596},{x:44.4099,y1:2.7726,y2:4.0551,y3:3.1885,y4:6.82},{x:45.9523,y1:3.9353,y2:5.223,y3:4.3543,y4:7.67},{x:46.7419,y1:2.2062,y2:2.7798,y3:2.3934,y4:3.8},{x:48.2406,y1:2.7651,y2:3.143,y3:2.8895,y4:3.733},{x:48.6713,y1:2.5214,y2:2.7795,y3:2.6066,y4:3.167},{x:49.7354,y1:3.6705,y2:3.7438,y3:3.6949,y4:3.844}]},799:t=>{t.exports=[{x:1,y:5.22265},{x:1,y:5.48562},{x:1,y:5.37321},{x:1.5,y:6.65481},{x:2,y:7.16702},{x:2,y:7.26833},{x:2,y:6.69738},{x:2.5,y:7.64877},{x:3,y:7.00579},{x:3,y:7.68767},{x:3,y:6.94088},{x:3.5,y:7.52407},{x:4,y:7.1548},{x:4,y:7.14452},{x:4,y:7.08558},{x:4.5,y:6.28816},{x:5,y:6.80946},{x:5,y:6.32118},{x:5,y:5.97071},{x:5.5,y:5.71448},{x:6,y:4.7657},{x:6,y:5.45725},{x:6,y:5.47463},{x:6.5,y:5.1482},{x:7,y:4.81838},{x:7,y:5.35841},{x:7,y:4.93349},{x:7.5,y:5.27581},{x:8,y:5.72473},{x:8,y:6.025},{x:8,y:5.86467},{x:8.5,y:5.96704},{x:9,y:7.48493},{x:9,y:7.49659},{x:9,y:7.74979}]},162:function(t){var e;t.exports=(e=function(t,e){var n=Array.prototype.concat,i=Array.prototype.slice,r=Object.prototype.toString;function o(e,n){var i=e>n?e:n;return t.pow(10,17-~~(t.log(i>0?i:-i)*t.LOG10E))}var s=Array.isArray||function(t){return"[object Array]"===r.call(t)};function a(t){return"[object Function]"===r.call(t)}function l(t){return"number"==typeof t&&t-t==0}function c(){return new c._init(arguments)}function h(){return 0}function u(){return 1}function d(t,e){return t===e?1:0}c.fn=c.prototype,c._init=function(t){if(s(t[0]))if(s(t[0][0])){a(t[1])&&(t[0]=c.map(t[0],t[1]));for(var e=0;e<t[0].length;e++)this[e]=t[0][e];this.length=t[0].length}else this[0]=a(t[1])?c.map(t[0],t[1]):t[0],this.length=1;else if(l(t[0]))this[0]=c.seq.apply(null,t),this.length=1;else{if(t[0]instanceof c)return c(t[0].toArray());this[0]=[],this.length=1}return this},c._init.prototype=c.prototype,c._init.constructor=c,c.utils={calcRdx:o,isArray:s,isFunction:a,isNumber:l,toVector:function(t){return n.apply([],t)}},c._random_fn=t.random,c.setRandom=function(t){if("function"!=typeof t)throw new TypeError("fn is not a function");c._random_fn=t},c.extend=function(t){var e,n;if(1===arguments.length){for(n in t)c[n]=t[n];return this}for(e=1;e<arguments.length;e++)for(n in arguments[e])t[n]=arguments[e][n];return t},c.rows=function(t){return t.length||1},c.cols=function(t){return t[0].length||1},c.dimensions=function(t){return{rows:c.rows(t),cols:c.cols(t)}},c.row=function(t,e){return s(e)?e.map((function(e){return c.row(t,e)})):t[e]},c.rowa=function(t,e){return c.row(t,e)},c.col=function(t,e){if(s(e)){var n=c.arange(t.length).map((function(){return new Array(e.length)}));return e.forEach((function(e,i){c.arange(t.length).forEach((function(r){n[r][i]=t[r][e]}))})),n}for(var i=new Array(t.length),r=0;r<t.length;r++)i[r]=[t[r][e]];return i},c.cola=function(t,e){return c.col(t,e).map((function(t){return t[0]}))},c.diag=function(t){for(var e=c.rows(t),n=new Array(e),i=0;i<e;i++)n[i]=[t[i][i]];return n},c.antidiag=function(t){for(var e=c.rows(t)-1,n=new Array(e),i=0;e>=0;e--,i++)n[i]=[t[i][e]];return n},c.transpose=function(t){var e,n,i,r,o,a=[];for(s(t[0])||(t=[t]),n=t.length,i=t[0].length,o=0;o<i;o++){for(e=new Array(n),r=0;r<n;r++)e[r]=t[r][o];a.push(e)}return 1===a.length?a[0]:a},c.map=function(t,e,n){var i,r,o,a,l;for(s(t[0])||(t=[t]),r=t.length,o=t[0].length,a=n?t:new Array(r),i=0;i<r;i++)for(a[i]||(a[i]=new Array(o)),l=0;l<o;l++)a[i][l]=e(t[i][l],i,l);return 1===a.length?a[0]:a},c.cumreduce=function(t,e,n){var i,r,o,a,l;for(s(t[0])||(t=[t]),r=t.length,o=t[0].length,a=n?t:new Array(r),i=0;i<r;i++)for(a[i]||(a[i]=new Array(o)),o>0&&(a[i][0]=t[i][0]),l=1;l<o;l++)a[i][l]=e(a[i][l-1],t[i][l]);return 1===a.length?a[0]:a},c.alter=function(t,e){return c.map(t,e,!0)},c.create=function(t,e,n){var i,r,o=new Array(t);for(a(e)&&(n=e,e=t),i=0;i<t;i++)for(o[i]=new Array(e),r=0;r<e;r++)o[i][r]=n(i,r);return o},c.zeros=function(t,e){return l(e)||(e=t),c.create(t,e,h)},c.ones=function(t,e){return l(e)||(e=t),c.create(t,e,u)},c.rand=function(t,e){return l(e)||(e=t),c.create(t,e,c._random_fn)},c.identity=function(t,e){return l(e)||(e=t),c.create(t,e,d)},c.symmetric=function(t){var e,n,i=t.length;if(t.length!==t[0].length)return!1;for(e=0;e<i;e++)for(n=0;n<i;n++)if(t[n][e]!==t[e][n])return!1;return!0},c.clear=function(t){return c.alter(t,h)},c.seq=function(t,e,n,i){a(i)||(i=!1);var r,s=[],l=o(t,e),c=(e*l-t*l)/((n-1)*l),h=t;for(r=0;h<=e&&r<n;h=(t*l+c*l*++r)/l)s.push(i?i(h,r):h);return s},c.arange=function(t,n,i){var r,o=[];if(i=i||1,n===e&&(n=t,t=0),t===n||0===i)return[];if(t<n&&i<0)return[];if(t>n&&i>0)return[];if(i>0)for(r=t;r<n;r+=i)o.push(r);else for(r=t;r>n;r+=i)o.push(r);return o},c.slice=function(){function t(t,n,i,r){var o,s=[],a=t.length;if(n===e&&i===e&&r===e)return c.copy(t);if(r=r||1,(n=(n=n||0)>=0?n:a+n)===(i=(i=i||t.length)>=0?i:a+i)||0===r)return[];if(n<i&&r<0)return[];if(n>i&&r>0)return[];if(r>0)for(o=n;o<i;o+=r)s.push(t[o]);else for(o=n;o>i;o+=r)s.push(t[o]);return s}return function(e,n){var i,r;return l((n=n||{}).row)?l(n.col)?e[n.row][n.col]:t(c.rowa(e,n.row),(i=n.col||{}).start,i.end,i.step):l(n.col)?t(c.cola(e,n.col),(r=n.row||{}).start,r.end,r.step):(r=n.row||{},i=n.col||{},t(e,r.start,r.end,r.step).map((function(e){return t(e,i.start,i.end,i.step)})))}}(),c.sliceAssign=function(n,i,r){var o,s;if(l(i.row)){if(l(i.col))return n[i.row][i.col]=r;i.col=i.col||{},i.col.start=i.col.start||0,i.col.end=i.col.end||n[0].length,i.col.step=i.col.step||1,o=c.arange(i.col.start,t.min(n.length,i.col.end),i.col.step);var a=i.row;return o.forEach((function(t,e){n[a][t]=r[e]})),n}if(l(i.col)){i.row=i.row||{},i.row.start=i.row.start||0,i.row.end=i.row.end||n.length,i.row.step=i.row.step||1,s=c.arange(i.row.start,t.min(n[0].length,i.row.end),i.row.step);var h=i.col;return s.forEach((function(t,e){n[t][h]=r[e]})),n}return r[0].length===e&&(r=[r]),i.row.start=i.row.start||0,i.row.end=i.row.end||n.length,i.row.step=i.row.step||1,i.col.start=i.col.start||0,i.col.end=i.col.end||n[0].length,i.col.step=i.col.step||1,s=c.arange(i.row.start,t.min(n.length,i.row.end),i.row.step),o=c.arange(i.col.start,t.min(n[0].length,i.col.end),i.col.step),s.forEach((function(t,e){o.forEach((function(i,o){n[t][i]=r[e][o]}))})),n},c.diagonal=function(t){var e=c.zeros(t.length,t.length);return t.forEach((function(t,n){e[n][n]=t})),e},c.copy=function(t){return t.map((function(t){return l(t)?t:t.map((function(t){return t}))}))};var f=c.prototype;return f.length=0,f.push=Array.prototype.push,f.sort=Array.prototype.sort,f.splice=Array.prototype.splice,f.slice=Array.prototype.slice,f.toArray=function(){return this.length>1?i.call(this):i.call(this)[0]},f.map=function(t,e){return c(c.map(this,t,e))},f.cumreduce=function(t,e){return c(c.cumreduce(this,t,e))},f.alter=function(t){return c.alter(this,t),this},function(t){for(var e=0;e<t.length;e++)!function(t){f[t]=function(e){var n,i=this;return e?(setTimeout((function(){e.call(i,f[t].call(i))})),this):(n=c[t](this),s(n)?c(n):n)}}(t[e])}("transpose clear symmetric rows cols dimensions diag antidiag".split(" ")),function(t){for(var e=0;e<t.length;e++)!function(t){f[t]=function(e,n){var i=this;return n?(setTimeout((function(){n.call(i,f[t].call(i,e))})),this):c(c[t](this,e))}}(t[e])}("row col".split(" ")),function(t){for(var e=0;e<t.length;e++)!function(t){f[t]=function(){return c(c[t].apply(null,arguments))}}(t[e])}("create zeros ones rand identity".split(" ")),c}(Math),function(t,e){var n=t.utils.isFunction;function i(t,e){return t-e}function r(t,n,i){return e.max(n,e.min(t,i))}t.sum=function(t){for(var e=0,n=t.length;--n>=0;)e+=t[n];return e},t.sumsqrd=function(t){for(var e=0,n=t.length;--n>=0;)e+=t[n]*t[n];return e},t.sumsqerr=function(e){for(var n,i=t.mean(e),r=0,o=e.length;--o>=0;)r+=(n=e[o]-i)*n;return r},t.sumrow=function(t){for(var e=0,n=t.length;--n>=0;)e+=t[n];return e},t.product=function(t){for(var e=1,n=t.length;--n>=0;)e*=t[n];return e},t.min=function(t){for(var e=t[0],n=0;++n<t.length;)t[n]<e&&(e=t[n]);return e},t.max=function(t){for(var e=t[0],n=0;++n<t.length;)t[n]>e&&(e=t[n]);return e},t.unique=function(t){for(var e={},n=[],i=0;i<t.length;i++)e[t[i]]||(e[t[i]]=!0,n.push(t[i]));return n},t.mean=function(e){return t.sum(e)/e.length},t.meansqerr=function(e){return t.sumsqerr(e)/e.length},t.geomean=function(n){return e.pow(t.product(n),1/n.length)},t.median=function(t){var e=t.length,n=t.slice().sort(i);return 1&e?n[e/2|0]:(n[e/2-1]+n[e/2])/2},t.cumsum=function(e){return t.cumreduce(e,(function(t,e){return t+e}))},t.cumprod=function(e){return t.cumreduce(e,(function(t,e){return t*e}))},t.diff=function(t){var e,n=[],i=t.length;for(e=1;e<i;e++)n.push(t[e]-t[e-1]);return n},t.rank=function(t){var e,n=[],r={};for(e=0;e<t.length;e++)r[l=t[e]]?r[l]++:(r[l]=1,n.push(l));var o=n.sort(i),s={},a=1;for(e=0;e<o.length;e++){var l,c=r[l=o[e]],h=(a+(a+c-1))/2;s[l]=h,a+=c}return t.map((function(t){return s[t]}))},t.mode=function(t){var e,n=t.length,r=t.slice().sort(i),o=1,s=0,a=0,l=[];for(e=0;e<n;e++)r[e]===r[e+1]?o++:(o>s?(l=[r[e]],s=o,a=0):o===s&&(l.push(r[e]),a++),o=1);return 0===a?l[0]:l},t.range=function(e){return t.max(e)-t.min(e)},t.variance=function(e,n){return t.sumsqerr(e)/(e.length-(n?1:0))},t.pooledvariance=function(e){return e.reduce((function(e,n){return e+t.sumsqerr(n)}),0)/(e.reduce((function(t,e){return t+e.length}),0)-e.length)},t.deviation=function(e){for(var n=t.mean(e),i=e.length,r=new Array(i),o=0;o<i;o++)r[o]=e[o]-n;return r},t.stdev=function(n,i){return e.sqrt(t.variance(n,i))},t.pooledstdev=function(n){return e.sqrt(t.pooledvariance(n))},t.meandev=function(n){for(var i=t.mean(n),r=[],o=n.length-1;o>=0;o--)r.push(e.abs(n[o]-i));return t.mean(r)},t.meddev=function(n){for(var i=t.median(n),r=[],o=n.length-1;o>=0;o--)r.push(e.abs(n[o]-i));return t.median(r)},t.coeffvar=function(e){return t.stdev(e)/t.mean(e)},t.quartiles=function(t){var n=t.length,r=t.slice().sort(i);return[r[e.round(n/4)-1],r[e.round(n/2)-1],r[e.round(3*n/4)-1]]},t.quantiles=function(t,n,o,s){var a,l,c,h,u,d=t.slice().sort(i),f=[n.length],g=t.length;for(void 0===o&&(o=3/8),void 0===s&&(s=3/8),a=0;a<n.length;a++)c=g*(l=n[a])+(o+l*(1-o-s)),h=e.floor(r(c,1,g-1)),u=r(c-h,0,1),f[a]=(1-u)*d[h-1]+u*d[h];return f},t.percentile=function(t,e,n){var r=t.slice().sort(i),o=e*(r.length+(n?1:-1))+(n?0:1),s=parseInt(o),a=o-s;return s+1<r.length?r[s-1]+a*(r[s]-r[s-1]):r[s-1]},t.percentileOfScore=function(t,e,n){var i,r,o=0,s=t.length,a=!1;for("strict"===n&&(a=!0),r=0;r<s;r++)i=t[r],(a&&i<e||!a&&i<=e)&&o++;return o/s},t.histogram=function(n,i){i=i||4;var r,o=t.min(n),s=(t.max(n)-o)/i,a=n.length,l=[];for(r=0;r<i;r++)l[r]=0;for(r=0;r<a;r++)l[e.min(e.floor((n[r]-o)/s),i-1)]+=1;return l},t.covariance=function(e,n){var i,r=t.mean(e),o=t.mean(n),s=e.length,a=new Array(s);for(i=0;i<s;i++)a[i]=(e[i]-r)*(n[i]-o);return t.sum(a)/(s-1)},t.corrcoeff=function(e,n){return t.covariance(e,n)/t.stdev(e,1)/t.stdev(n,1)},t.spearmancoeff=function(e,n){return e=t.rank(e),n=t.rank(n),t.corrcoeff(e,n)},t.stanMoment=function(n,i){for(var r=t.mean(n),o=t.stdev(n),s=n.length,a=0,l=0;l<s;l++)a+=e.pow((n[l]-r)/o,i);return a/n.length},t.skewness=function(e){return t.stanMoment(e,3)},t.kurtosis=function(e){return t.stanMoment(e,4)-3};var o=t.prototype;!function(e){for(var i=0;i<e.length;i++)!function(e){o[e]=function(i,r){var s=[],a=0,l=this;if(n(i)&&(r=i,i=!1),r)return setTimeout((function(){r.call(l,o[e].call(l,i))})),this;if(this.length>1){for(l=!0===i?this:this.transpose();a<l.length;a++)s[a]=t[e](l[a]);return s}return t[e](this[0],i)}}(e[i])}("cumsum cumprod".split(" ")),function(e){for(var i=0;i<e.length;i++)!function(e){o[e]=function(i,r){var s=[],a=0,l=this;if(n(i)&&(r=i,i=!1),r)return setTimeout((function(){r.call(l,o[e].call(l,i))})),this;if(this.length>1){for("sumrow"!==e&&(l=!0===i?this:this.transpose());a<l.length;a++)s[a]=t[e](l[a]);return!0===i?t[e](t.utils.toVector(s)):s}return t[e](this[0],i)}}(e[i])}("sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr geomean median diff rank mode range variance deviation stdev meandev meddev coeffvar quartiles histogram skewness kurtosis".split(" ")),function(e){for(var i=0;i<e.length;i++)!function(e){o[e]=function(){var i,r=[],s=0,a=this,l=Array.prototype.slice.call(arguments);if(n(l[l.length-1])){i=l[l.length-1];var c=l.slice(0,l.length-1);return setTimeout((function(){i.call(a,o[e].apply(a,c))})),this}i=void 0;var h=function(n){return t[e].apply(a,[n].concat(l))};if(this.length>1){for(a=a.transpose();s<a.length;s++)r[s]=h(a[s]);return r}return h(this[0])}}(e[i])}("quantiles percentileOfScore".split(" "))}(e,Math),function(t,e){t.gammaln=function(t){var n,i,r,o=0,s=[76.18009172947146,-86.50532032941678,24.01409824083091,-1.231739572450155,.001208650973866179,-5395239384953e-18],a=1.000000000190015;for(r=(i=n=t)+5.5,r-=(n+.5)*e.log(r);o<6;o++)a+=s[o]/++i;return e.log(2.5066282746310007*a/n)-r},t.loggam=function(t){var n,i,r,o,s,a,l,c=[.08333333333333333,-.002777777777777778,.0007936507936507937,-.0005952380952380952,.0008417508417508418,-.001917526917526918,.00641025641025641,-.02955065359477124,.1796443723688307,-1.3924322169059];if(n=t,l=0,1==t||2==t)return 0;for(t<=7&&(n=t+(l=e.floor(7-t))),i=1/(n*n),r=2*e.PI,s=c[9],a=8;a>=0;a--)s*=i,s+=c[a];if(o=s/n+.5*e.log(r)+(n-.5)*e.log(n)-n,t<=7)for(a=1;a<=l;a++)o-=e.log(n-1),n-=1;return o},t.gammafn=function(t){var n,i,r,o,s=[-1.716185138865495,24.76565080557592,-379.80425647094563,629.3311553128184,866.9662027904133,-31451.272968848367,-36144.413418691176,66456.14382024054],a=[-30.8402300119739,315.35062697960416,-1015.1563674902192,-3107.771671572311,22538.11842098015,4755.846277527881,-134659.9598649693,-115132.2596755535],l=!1,c=0,h=0,u=0,d=t;if(t>171.6243769536076)return 1/0;if(d<=0){if(!(o=d%1+36e-17))return 1/0;l=(1&d?-1:1)*e.PI/e.sin(e.PI*o),d=1-d}for(r=d,i=d<1?d++:(d-=c=(0|d)-1)-1,n=0;n<8;++n)u=(u+s[n])*i,h=h*i+a[n];if(o=u/h+1,r<d)o/=r;else if(r>d)for(n=0;n<c;++n)o*=d,d++;return l&&(o=l/o),o},t.gammap=function(e,n){return t.lowRegGamma(e,n)*t.gammafn(e)},t.lowRegGamma=function(n,i){var r,o=t.gammaln(n),s=n,a=1/n,l=a,c=i+1-n,h=1/1e-30,u=1/c,d=u,f=1,g=-~(8.5*e.log(n>=1?n:1/n)+.4*n+17);if(i<0||n<=0)return NaN;if(i<n+1){for(;f<=g;f++)a+=l*=i/++s;return a*e.exp(-i+n*e.log(i)-o)}for(;f<=g;f++)d*=(u=1/(u=(r=-f*(f-n))*u+(c+=2)))*(h=c+r/h);return 1-d*e.exp(-i+n*e.log(i)-o)},t.factorialln=function(e){return e<0?NaN:t.gammaln(e+1)},t.factorial=function(e){return e<0?NaN:t.gammafn(e+1)},t.combination=function(n,i){return n>170||i>170?e.exp(t.combinationln(n,i)):t.factorial(n)/t.factorial(i)/t.factorial(n-i)},t.combinationln=function(e,n){return t.factorialln(e)-t.factorialln(n)-t.factorialln(e-n)},t.permutation=function(e,n){return t.factorial(e)/t.factorial(e-n)},t.betafn=function(n,i){if(!(n<=0||i<=0))return n+i>170?e.exp(t.betaln(n,i)):t.gammafn(n)*t.gammafn(i)/t.gammafn(n+i)},t.betaln=function(e,n){return t.gammaln(e)+t.gammaln(n)-t.gammaln(e+n)},t.betacf=function(t,n,i){var r,o,s,a,l=1e-30,c=1,h=n+i,u=n+1,d=n-1,f=1,g=1-h*t/u;for(e.abs(g)<l&&(g=l),a=g=1/g;c<=100&&(g=1+(o=c*(i-c)*t/((d+(r=2*c))*(n+r)))*g,e.abs(g)<l&&(g=l),f=1+o/f,e.abs(f)<l&&(f=l),a*=(g=1/g)*f,g=1+(o=-(n+c)*(h+c)*t/((n+r)*(u+r)))*g,e.abs(g)<l&&(g=l),f=1+o/f,e.abs(f)<l&&(f=l),a*=s=(g=1/g)*f,!(e.abs(s-1)<3e-7));c++);return a},t.gammapinv=function(n,i){var r,o,s,a,l,c,h=0,u=i-1,d=t.gammaln(i);if(n>=1)return e.max(100,i+100*e.sqrt(i));if(n<=0)return 0;for(i>1?(l=e.log(u),c=e.exp(u*(l-1)-d),a=n<.5?n:1-n,r=(2.30753+.27061*(o=e.sqrt(-2*e.log(a))))/(1+o*(.99229+.04481*o))-o,n<.5&&(r=-r),r=e.max(.001,i*e.pow(1-1/(9*i)-r/(3*e.sqrt(i)),3))):r=n<(o=1-i*(.253+.12*i))?e.pow(n/o,1/i):1-e.log(1-(n-o)/(1-o));h<12;h++){if(r<=0)return 0;if((r-=o=(s=(t.lowRegGamma(i,r)-n)/(o=i>1?c*e.exp(-(r-u)+u*(e.log(r)-l)):e.exp(-r+u*e.log(r)-d)))/(1-.5*e.min(1,s*((i-1)/r-1))))<=0&&(r=.5*(r+o)),e.abs(o)<1e-8*r)break}return r},t.erf=function(t){var n,i,r,o,s=[-1.3026537197817094,.6419697923564902,.019476473204185836,-.00956151478680863,-.000946595344482036,.000366839497852761,42523324806907e-18,-20278578112534e-18,-1624290004647e-18,130365583558e-17,1.5626441722e-8,-8.5238095915e-8,6.529054439e-9,5.059343495e-9,-9.91364156e-10,-2.27365122e-10,96467911e-18,2394038e-18,-6886027e-18,894487e-18,313092e-18,-112708e-18,381e-18,7106e-18,-1523e-18,-94e-18,121e-18,-28e-18],a=s.length-1,l=!1,c=0,h=0;for(t<0&&(t=-t,l=!0),i=4*(n=2/(2+t))-2;a>0;a--)r=c,c=i*c-h+s[a],h=r;return o=n*e.exp(-t*t+.5*(s[0]+i*c)-h),l?o-1:1-o},t.erfc=function(e){return 1-t.erf(e)},t.erfcinv=function(n){var i,r,o,s,a=0;if(n>=2)return-100;if(n<=0)return 100;for(s=n<1?n:2-n,i=-.70711*((2.30753+.27061*(o=e.sqrt(-2*e.log(s/2))))/(1+o*(.99229+.04481*o))-o);a<2;a++)i+=(r=t.erfc(i)-s)/(1.1283791670955126*e.exp(-i*i)-i*r);return n<1?i:-i},t.ibetainv=function(n,i,r){var o,s,a,l,c,h,u,d,f,g,p=i-1,m=r-1,A=0;if(n<=0)return 0;if(n>=1)return 1;for(i>=1&&r>=1?(a=n<.5?n:1-n,h=(2.30753+.27061*(l=e.sqrt(-2*e.log(a))))/(1+l*(.99229+.04481*l))-l,n<.5&&(h=-h),u=(h*h-3)/6,d=2/(1/(2*i-1)+1/(2*r-1)),f=h*e.sqrt(u+d)/d-(1/(2*r-1)-1/(2*i-1))*(u+5/6-2/(3*d)),h=i/(i+r*e.exp(2*f))):(o=e.log(i/(i+r)),s=e.log(r/(i+r)),h=n<(l=e.exp(i*o)/i)/(f=l+(c=e.exp(r*s)/r))?e.pow(i*f*n,1/i):1-e.pow(r*f*(1-n),1/r)),g=-t.gammaln(i)-t.gammaln(r)+t.gammaln(i+r);A<10;A++){if(0===h||1===h)return h;if((h-=l=(c=(t.ibeta(h,i,r)-n)/(l=e.exp(p*e.log(h)+m*e.log(1-h)+g)))/(1-.5*e.min(1,c*(p/h-m/(1-h)))))<=0&&(h=.5*(h+l)),h>=1&&(h=.5*(h+l+1)),e.abs(l)<1e-8*h&&A>0)break}return h},t.ibeta=function(n,i,r){var o=0===n||1===n?0:e.exp(t.gammaln(i+r)-t.gammaln(i)-t.gammaln(r)+i*e.log(n)+r*e.log(1-n));return!(n<0||n>1)&&(n<(i+1)/(i+r+2)?o*t.betacf(n,i,r)/i:1-o*t.betacf(1-n,r,i)/r)},t.randn=function(n,i){var r,o,s,a,l;if(i||(i=n),n)return t.create(n,i,(function(){return t.randn()}));do{r=t._random_fn(),o=1.7156*(t._random_fn()-.5),l=(s=r-.449871)*s+(a=e.abs(o)+.386595)*(.196*a-.25472*s)}while(l>.27597&&(l>.27846||o*o>-4*e.log(r)*r*r));return o/r},t.randg=function(n,i,r){var o,s,a,l,c,h,u=n;if(r||(r=i),n||(n=1),i)return(h=t.zeros(i,r)).alter((function(){return t.randg(n)})),h;n<1&&(n+=1),o=n-1/3,s=1/e.sqrt(9*o);do{do{l=1+s*(c=t.randn())}while(l<=0);l*=l*l,a=t._random_fn()}while(a>1-.331*e.pow(c,4)&&e.log(a)>.5*c*c+o*(1-l+e.log(l)));if(n==u)return o*l;do{a=t._random_fn()}while(0===a);return e.pow(a,1/u)*o*l},function(e){for(var n=0;n<e.length;n++)!function(e){t.fn[e]=function(){return t(t.map(this,(function(n){return t[e](n)})))}}(e[n])}("gammaln gammafn factorial factorialln".split(" ")),function(e){for(var n=0;n<e.length;n++)!function(e){t.fn[e]=function(){return t(t[e].apply(null,arguments))}}(e[n])}("randn".split(" "))}(e,Math),function(t,e){function n(t,n,i,r){for(var o,s=0,a=1,l=1,c=1,h=0,u=0;e.abs((l-u)/l)>r;)u=l,a=c+(o=-(n+h)*(n+i+h)*t/(n+2*h)/(n+2*h+1))*a,l=(s=l+o*s)+(o=(h+=1)*(i-h)*t/(n+2*h-1)/(n+2*h))*l,s/=c=a+o*c,a/=c,l/=c,c=1;return l/n}function i(n,i,r){var o=[.9815606342467192,.9041172563704749,.7699026741943047,.5873179542866175,.3678314989981802,.1252334085114689],s=[.04717533638651183,.10693932599531843,.16007832854334622,.20316742672306592,.2334925365383548,.24914704581340277],a=.5*n;if(a>=8)return 1;var l,c=2*t.normal.cdf(a,0,1,1,0)-1;c=c>=e.exp(-50/r)?e.pow(c,r):0;for(var h=a,u=(8-a)/(l=n>3?2:3),d=h+u,f=0,g=r-1,p=1;p<=l;p++){for(var m=0,A=.5*(d+h),y=.5*(d-h),b=1;b<=12;b++){var x,v=A+y*(6<b?o[(x=12-b+1)-1]:-o[(x=b)-1]),_=v*v;if(_>60)break;var w=2*t.normal.cdf(v,0,1,1,0)*.5-2*t.normal.cdf(v,n,1,1,0)*.5;w>=e.exp(-30/g)&&(m+=w=s[x-1]*e.exp(-.5*_)*e.pow(w,g))}f+=m*=2*y*r/e.sqrt(2*e.PI),h=d,d+=u}return(c+=f)<=e.exp(-30/i)?0:(c=e.pow(c,i))>=1?1:c}!function(e){for(var n=0;n<e.length;n++)!function(e){t[e]=function t(e,n,i){return this instanceof t?(this._a=e,this._b=n,this._c=i,this):new t(e,n,i)},t.fn[e]=function(n,i,r){var o=t[e](n,i,r);return o.data=this,o},t[e].prototype.sample=function(n){var i=this._a,r=this._b,o=this._c;return n?t.alter(n,(function(){return t[e].sample(i,r,o)})):t[e].sample(i,r,o)},function(n){for(var i=0;i<n.length;i++)!function(n){t[e].prototype[n]=function(i){var r=this._a,o=this._b,s=this._c;return i||0===i||(i=this.data),"number"!=typeof i?t.fn.map.call(i,(function(i){return t[e][n](i,r,o,s)})):t[e][n](i,r,o,s)}}(n[i])}("pdf cdf inv".split(" ")),function(n){for(var i=0;i<n.length;i++)!function(n){t[e].prototype[n]=function(){return t[e][n](this._a,this._b,this._c)}}(n[i])}("mean median mode variance".split(" "))}(e[n])}("beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy laplace lognormal noncentralt normal pareto studentt weibull uniform binomial negbin hypgeom poisson triangular tukey arcsine".split(" ")),t.extend(t.beta,{pdf:function(n,i,r){return n>1||n<0?0:1==i&&1==r?1:i<512&&r<512?e.pow(n,i-1)*e.pow(1-n,r-1)/t.betafn(i,r):e.exp((i-1)*e.log(n)+(r-1)*e.log(1-n)-t.betaln(i,r))},cdf:function(e,n,i){return e>1||e<0?1*(e>1):t.ibeta(e,n,i)},inv:function(e,n,i){return t.ibetainv(e,n,i)},mean:function(t,e){return t/(t+e)},median:function(e,n){return t.ibetainv(.5,e,n)},mode:function(t,e){return(t-1)/(t+e-2)},sample:function(e,n){var i=t.randg(e);return i/(i+t.randg(n))},variance:function(t,n){return t*n/(e.pow(t+n,2)*(t+n+1))}}),t.extend(t.centralF,{pdf:function(n,i,r){var o;return n<0?0:i<=2?0===n&&i<2?1/0:0===n&&2===i?1:1/t.betafn(i/2,r/2)*e.pow(i/r,i/2)*e.pow(n,i/2-1)*e.pow(1+i/r*n,-(i+r)/2):(o=i*n/(r+n*i),i*(r/(r+n*i))/2*t.binomial.pdf((i-2)/2,(i+r-2)/2,o))},cdf:function(e,n,i){return e<0?0:t.ibeta(n*e/(n*e+i),n/2,i/2)},inv:function(e,n,i){return i/(n*(1/t.ibetainv(e,n/2,i/2)-1))},mean:function(t,e){return e>2?e/(e-2):void 0},mode:function(t,e){return t>2?e*(t-2)/(t*(e+2)):void 0},sample:function(e,n){return 2*t.randg(e/2)/e/(2*t.randg(n/2)/n)},variance:function(t,e){if(!(e<=4))return 2*e*e*(t+e-2)/(t*(e-2)*(e-2)*(e-4))}}),t.extend(t.cauchy,{pdf:function(t,n,i){return i<0?0:i/(e.pow(t-n,2)+e.pow(i,2))/e.PI},cdf:function(t,n,i){return e.atan((t-n)/i)/e.PI+.5},inv:function(t,n,i){return n+i*e.tan(e.PI*(t-.5))},median:function(t){return t},mode:function(t){return t},sample:function(n,i){return t.randn()*e.sqrt(1/(2*t.randg(.5)))*i+n}}),t.extend(t.chisquare,{pdf:function(n,i){return n<0?0:0===n&&2===i?.5:e.exp((i/2-1)*e.log(n)-n/2-i/2*e.log(2)-t.gammaln(i/2))},cdf:function(e,n){return e<0?0:t.lowRegGamma(n/2,e/2)},inv:function(e,n){return 2*t.gammapinv(e,.5*n)},mean:function(t){return t},median:function(t){return t*e.pow(1-2/(9*t),3)},mode:function(t){return t-2>0?t-2:0},sample:function(e){return 2*t.randg(e/2)},variance:function(t){return 2*t}}),t.extend(t.exponential,{pdf:function(t,n){return t<0?0:n*e.exp(-n*t)},cdf:function(t,n){return t<0?0:1-e.exp(-n*t)},inv:function(t,n){return-e.log(1-t)/n},mean:function(t){return 1/t},median:function(t){return 1/t*e.log(2)},mode:function(){return 0},sample:function(n){return-1/n*e.log(t._random_fn())},variance:function(t){return e.pow(t,-2)}}),t.extend(t.gamma,{pdf:function(n,i,r){return n<0?0:0===n&&1===i?1/r:e.exp((i-1)*e.log(n)-n/r-t.gammaln(i)-i*e.log(r))},cdf:function(e,n,i){return e<0?0:t.lowRegGamma(n,e/i)},inv:function(e,n,i){return t.gammapinv(e,n)*i},mean:function(t,e){return t*e},mode:function(t,e){if(t>1)return(t-1)*e},sample:function(e,n){return t.randg(e)*n},variance:function(t,e){return t*e*e}}),t.extend(t.invgamma,{pdf:function(n,i,r){return n<=0?0:e.exp(-(i+1)*e.log(n)-r/n-t.gammaln(i)+i*e.log(r))},cdf:function(e,n,i){return e<=0?0:1-t.lowRegGamma(n,i/e)},inv:function(e,n,i){return i/t.gammapinv(1-e,n)},mean:function(t,e){return t>1?e/(t-1):void 0},mode:function(t,e){return e/(t+1)},sample:function(e,n){return n/t.randg(e)},variance:function(t,e){if(!(t<=2))return e*e/((t-1)*(t-1)*(t-2))}}),t.extend(t.kumaraswamy,{pdf:function(t,n,i){return 0===t&&1===n?i:1===t&&1===i?n:e.exp(e.log(n)+e.log(i)+(n-1)*e.log(t)+(i-1)*e.log(1-e.pow(t,n)))},cdf:function(t,n,i){return t<0?0:t>1?1:1-e.pow(1-e.pow(t,n),i)},inv:function(t,n,i){return e.pow(1-e.pow(1-t,1/i),1/n)},mean:function(e,n){return n*t.gammafn(1+1/e)*t.gammafn(n)/t.gammafn(1+1/e+n)},median:function(t,n){return e.pow(1-e.pow(2,-1/n),1/t)},mode:function(t,n){if(t>=1&&n>=1&&1!==t&&1!==n)return e.pow((t-1)/(t*n-1),1/t)},variance:function(){throw new Error("variance not yet implemented")}}),t.extend(t.lognormal,{pdf:function(t,n,i){return t<=0?0:e.exp(-e.log(t)-.5*e.log(2*e.PI)-e.log(i)-e.pow(e.log(t)-n,2)/(2*i*i))},cdf:function(n,i,r){return n<0?0:.5+.5*t.erf((e.log(n)-i)/e.sqrt(2*r*r))},inv:function(n,i,r){return e.exp(-1.4142135623730951*r*t.erfcinv(2*n)+i)},mean:function(t,n){return e.exp(t+n*n/2)},median:function(t){return e.exp(t)},mode:function(t,n){return e.exp(t-n*n)},sample:function(n,i){return e.exp(t.randn()*i+n)},variance:function(t,n){return(e.exp(n*n)-1)*e.exp(2*t+n*n)}}),t.extend(t.noncentralt,{pdf:function(n,i,r){return e.abs(r)<1e-14?t.studentt.pdf(n,i):e.abs(n)<1e-14?e.exp(t.gammaln((i+1)/2)-r*r/2-.5*e.log(e.PI*i)-t.gammaln(i/2)):i/n*(t.noncentralt.cdf(n*e.sqrt(1+2/i),i+2,r)-t.noncentralt.cdf(n,i,r))},cdf:function(n,i,r){var o=1e-14;if(e.abs(r)<o)return t.studentt.cdf(n,i);var s=!1;n<0&&(s=!0,r=-r);for(var a=t.normal.cdf(-r,0,1),l=o+1,c=l,h=n*n/(n*n+i),u=0,d=e.exp(-r*r/2),f=e.exp(-r*r/2-.5*e.log(2)-t.gammaln(1.5))*r;u<200||c>o||l>o;)c=l,u>0&&(d*=r*r/(2*u),f*=r*r/(2*(u+.5))),a+=.5*(l=d*t.beta.cdf(h,u+.5,i/2)+f*t.beta.cdf(h,u+1,i/2)),u++;return s?1-a:a}}),t.extend(t.normal,{pdf:function(t,n,i){return e.exp(-.5*e.log(2*e.PI)-e.log(i)-e.pow(t-n,2)/(2*i*i))},cdf:function(n,i,r){return.5*(1+t.erf((n-i)/e.sqrt(2*r*r)))},inv:function(e,n,i){return-1.4142135623730951*i*t.erfcinv(2*e)+n},mean:function(t){return t},median:function(t){return t},mode:function(t){return t},sample:function(e,n){return t.randn()*n+e},variance:function(t,e){return e*e}}),t.extend(t.pareto,{pdf:function(t,n,i){return t<n?0:i*e.pow(n,i)/e.pow(t,i+1)},cdf:function(t,n,i){return t<n?0:1-e.pow(n/t,i)},inv:function(t,n,i){return n/e.pow(1-t,1/i)},mean:function(t,n){if(!(n<=1))return n*e.pow(t,n)/(n-1)},median:function(t,n){return t*(n*e.SQRT2)},mode:function(t){return t},variance:function(t,n){if(!(n<=2))return t*t*n/(e.pow(n-1,2)*(n-2))}}),t.extend(t.studentt,{pdf:function(n,i){return i=i>1e100?1e100:i,1/(e.sqrt(i)*t.betafn(.5,i/2))*e.pow(1+n*n/i,-(i+1)/2)},cdf:function(n,i){var r=i/2;return t.ibeta((n+e.sqrt(n*n+i))/(2*e.sqrt(n*n+i)),r,r)},inv:function(n,i){var r=t.ibetainv(2*e.min(n,1-n),.5*i,.5);return r=e.sqrt(i*(1-r)/r),n>.5?r:-r},mean:function(t){return t>1?0:void 0},median:function(){return 0},mode:function(){return 0},sample:function(n){return t.randn()*e.sqrt(n/(2*t.randg(n/2)))},variance:function(t){return t>2?t/(t-2):t>1?1/0:void 0}}),t.extend(t.weibull,{pdf:function(t,n,i){return t<0||n<0||i<0?0:i/n*e.pow(t/n,i-1)*e.exp(-e.pow(t/n,i))},cdf:function(t,n,i){return t<0?0:1-e.exp(-e.pow(t/n,i))},inv:function(t,n,i){return n*e.pow(-e.log(1-t),1/i)},mean:function(e,n){return e*t.gammafn(1+1/n)},median:function(t,n){return t*e.pow(e.log(2),1/n)},mode:function(t,n){return n<=1?0:t*e.pow((n-1)/n,1/n)},sample:function(n,i){return n*e.pow(-e.log(t._random_fn()),1/i)},variance:function(n,i){return n*n*t.gammafn(1+2/i)-e.pow(t.weibull.mean(n,i),2)}}),t.extend(t.uniform,{pdf:function(t,e,n){return t<e||t>n?0:1/(n-e)},cdf:function(t,e,n){return t<e?0:t<n?(t-e)/(n-e):1},inv:function(t,e,n){return e+t*(n-e)},mean:function(t,e){return.5*(t+e)},median:function(e,n){return t.mean(e,n)},mode:function(){throw new Error("mode is not yet implemented")},sample:function(e,n){return e/2+n/2+(n/2-e/2)*(2*t._random_fn()-1)},variance:function(t,n){return e.pow(n-t,2)/12}}),t.extend(t.binomial,{pdf:function(n,i,r){return 0===r||1===r?i*r===n?1:0:t.combination(i,n)*e.pow(r,n)*e.pow(1-r,i-n)},cdf:function(i,r,o){var s,a=1e-10;if(i<0)return 0;if(i>=r)return 1;if(o<0||o>1||r<=0)return NaN;var l=o,c=(i=e.floor(i))+1,h=r-i,u=c+h,d=e.exp(t.gammaln(u)-t.gammaln(h)-t.gammaln(c)+c*e.log(l)+h*e.log(1-l));return s=l<(c+1)/(u+2)?d*n(l,c,h,a):1-d*n(1-l,h,c,a),e.round(1/a*(1-s))/(1/a)}}),t.extend(t.negbin,{pdf:function(n,i,r){return n===n>>>0&&(n<0?0:t.combination(n+i-1,i-1)*e.pow(1-r,n)*e.pow(r,i))},cdf:function(e,n,i){var r=0,o=0;if(e<0)return 0;for(;o<=e;o++)r+=t.negbin.pdf(o,n,i);return r}}),t.extend(t.hypgeom,{pdf:function(n,i,r,o){if(n!=n|0)return!1;if(n<0||n<r-(i-o))return 0;if(n>o||n>r)return 0;if(2*r>i)return 2*o>i?t.hypgeom.pdf(i-r-o+n,i,i-r,i-o):t.hypgeom.pdf(o-n,i,i-r,o);if(2*o>i)return t.hypgeom.pdf(r-n,i,r,i-o);if(r<o)return t.hypgeom.pdf(n,i,o,r);for(var s=1,a=0,l=0;l<n;l++){for(;s>1&&a<o;)s*=1-r/(i-a),a++;s*=(o-l)*(r-l)/((l+1)*(i-r-o+l+1))}for(;a<o;a++)s*=1-r/(i-a);return e.min(1,e.max(0,s))},cdf:function(n,i,r,o){if(n<0||n<r-(i-o))return 0;if(n>=o||n>=r)return 1;if(2*r>i)return 2*o>i?t.hypgeom.cdf(i-r-o+n,i,i-r,i-o):1-t.hypgeom.cdf(o-n-1,i,i-r,o);if(2*o>i)return 1-t.hypgeom.cdf(r-n-1,i,r,i-o);if(r<o)return t.hypgeom.cdf(n,i,o,r);for(var s=1,a=1,l=0,c=0;c<n;c++){for(;s>1&&l<o;){var h=1-r/(i-l);a*=h,s*=h,l++}s+=a*=(o-c)*(r-c)/((c+1)*(i-r-o+c+1))}for(;l<o;l++)s*=1-r/(i-l);return e.min(1,e.max(0,s))}}),t.extend(t.poisson,{pdf:function(n,i){return i<0||n%1!=0||n<0?0:e.pow(i,n)*e.exp(-i)/t.factorial(n)},cdf:function(e,n){var i=[],r=0;if(e<0)return 0;for(;r<=e;r++)i.push(t.poisson.pdf(r,n));return t.sum(i)},mean:function(t){return t},variance:function(t){return t},sampleSmall:function(n){var i=1,r=0,o=e.exp(-n);do{r++,i*=t._random_fn()}while(i>o);return r-1},sampleLarge:function(n){var i,r,o,s,a,l,c,h,u,d,f=n;for(s=e.sqrt(f),a=e.log(f),l=.02483*(c=.931+2.53*s)-.059,h=1.1239+1.1328/(c-3.4),u=.9277-3.6224/(c-2);;){if(r=e.random()-.5,o=e.random(),d=.5-e.abs(r),i=e.floor((2*l/d+c)*r+f+.43),d>=.07&&o<=u)return i;if(!(i<0||d<.013&&o>d)&&e.log(o)+e.log(h)-e.log(l/(d*d)+c)<=i*a-f-t.loggam(i+1))return i}},sample:function(t){return t<10?this.sampleSmall(t):this.sampleLarge(t)}}),t.extend(t.triangular,{pdf:function(t,e,n,i){return n<=e||i<e||i>n?NaN:t<e||t>n?0:t<i?2*(t-e)/((n-e)*(i-e)):t===i?2/(n-e):2*(n-t)/((n-e)*(n-i))},cdf:function(t,n,i,r){return i<=n||r<n||r>i?NaN:t<=n?0:t>=i?1:t<=r?e.pow(t-n,2)/((i-n)*(r-n)):1-e.pow(i-t,2)/((i-n)*(i-r))},inv:function(t,n,i,r){return i<=n||r<n||r>i?NaN:t<=(r-n)/(i-n)?n+(i-n)*e.sqrt(t*((r-n)/(i-n))):n+(i-n)*(1-e.sqrt((1-t)*(1-(r-n)/(i-n))))},mean:function(t,e,n){return(t+e+n)/3},median:function(t,n,i){return i<=(t+n)/2?n-e.sqrt((n-t)*(n-i))/e.sqrt(2):i>(t+n)/2?t+e.sqrt((n-t)*(i-t))/e.sqrt(2):void 0},mode:function(t,e,n){return n},sample:function(n,i,r){var o=t._random_fn();return o<(r-n)/(i-n)?n+e.sqrt(o*(i-n)*(r-n)):i-e.sqrt((1-o)*(i-n)*(i-r))},variance:function(t,e,n){return(t*t+e*e+n*n-t*e-t*n-e*n)/18}}),t.extend(t.arcsine,{pdf:function(t,n,i){return i<=n?NaN:t<=n||t>=i?0:2/e.PI*e.pow(e.pow(i-n,2)-e.pow(2*t-n-i,2),-.5)},cdf:function(t,n,i){return t<n?0:t<i?2/e.PI*e.asin(e.sqrt((t-n)/(i-n))):1},inv:function(t,n,i){return n+(.5-.5*e.cos(e.PI*t))*(i-n)},mean:function(t,e){return e<=t?NaN:(t+e)/2},median:function(t,e){return e<=t?NaN:(t+e)/2},mode:function(){throw new Error("mode is not yet implemented")},sample:function(n,i){return(n+i)/2+(i-n)/2*e.sin(2*e.PI*t.uniform.sample(0,1))},variance:function(t,n){return n<=t?NaN:e.pow(n-t,2)/8}}),t.extend(t.laplace,{pdf:function(t,n,i){return i<=0?0:e.exp(-e.abs(t-n)/i)/(2*i)},cdf:function(t,n,i){return i<=0?0:t<n?.5*e.exp((t-n)/i):1-.5*e.exp(-(t-n)/i)},mean:function(t){return t},median:function(t){return t},mode:function(t){return t},variance:function(t,e){return 2*e*e},sample:function(n,i){var r,o=t._random_fn()-.5;return n-i*((r=o)/e.abs(r))*e.log(1-2*e.abs(o))}}),t.extend(t.tukey,{cdf:function(n,r,o){var s=r,a=[.9894009349916499,.9445750230732326,.8656312023878318,.755404408355003,.6178762444026438,.45801677765722737,.2816035507792589,.09501250983763744],l=[.027152459411754096,.062253523938647894,.09515851168249279,.12462897125553388,.14959598881657674,.16915651939500254,.18260341504492358,.1894506104550685];if(n<=0)return 0;if(o<2||s<2)return NaN;if(!Number.isFinite(n))return 1;if(o>25e3)return i(n,1,s);var c,h=.5*o,u=h*e.log(o)-o*e.log(2)-t.gammaln(h),d=h-1,f=.25*o;c=o<=100?1:o<=800?.5:o<=5e3?.25:.125,u+=e.log(c);for(var g=0,p=1;p<=50;p++){for(var m=0,A=(2*p-1)*c,y=1;y<=16;y++){var b,x;8<y?(b=y-8-1,x=u+d*e.log(A+a[b]*c)-(a[b]*c+A)*f):(b=y-1,x=u+d*e.log(A-a[b]*c)+(a[b]*c-A)*f),x>=-30&&(m+=i(8<y?n*e.sqrt(.5*(a[b]*c+A)):n*e.sqrt(.5*(-a[b]*c+A)),1,s)*l[b]*e.exp(x))}if(p*c>=1&&m<=1e-14)break;g+=m}if(m>1e-14)throw new Error("tukey.cdf failed to converge");return g>1&&(g=1),g},inv:function(n,i,r){if(r<2||i<2)return NaN;if(n<0||n>1)return NaN;if(0===n)return 0;if(1===n)return 1/0;var o,s=function(t,n,i){var r=.5-.5*t,o=e.sqrt(e.log(1/(r*r))),s=o+((((-453642210148e-16*o-.204231210125)*o-.342242088547)*o-1)*o+.322232421088)/((((.0038560700634*o+.10353775285)*o+.531103462366)*o+.588581570495)*o+.099348462606);i<120&&(s+=(s*s*s+s)/i/4);var a=.8832-.2368*s;return i<120&&(a+=-1.214/i+1.208*s/i),s*(a*e.log(n-1)+1.4142)}(n,i,r),a=t.tukey.cdf(s,i,r)-n;o=a>0?e.max(0,s-1):s+1;for(var l,c=t.tukey.cdf(o,i,r)-n,h=1;h<50;h++)if(l=o-c*(o-s)/(c-a),a=c,s=o,l<0&&(l=0,c=-n),c=t.tukey.cdf(l,i,r)-n,o=l,e.abs(o-s)<1e-4)return l;throw new Error("tukey.inv failed to converge")}})}(e,Math),function(t,e){var n,i,r=Array.prototype.push,o=t.utils.isArray;function s(e){return o(e)||e instanceof t}t.extend({add:function(e,n){return s(n)?(s(n[0])||(n=[n]),t.map(e,(function(t,e,i){return t+n[e][i]}))):t.map(e,(function(t){return t+n}))},subtract:function(e,n){return s(n)?(s(n[0])||(n=[n]),t.map(e,(function(t,e,i){return t-n[e][i]||0}))):t.map(e,(function(t){return t-n}))},divide:function(e,n){return s(n)?(s(n[0])||(n=[n]),t.multiply(e,t.inv(n))):t.map(e,(function(t){return t/n}))},multiply:function(e,n){var i,r,o,a,l,c,h,u;if(void 0===e.length&&void 0===n.length)return e*n;if(l=e.length,c=e[0].length,h=t.zeros(l,o=s(n)?n[0].length:c),u=0,s(n)){for(;u<o;u++)for(i=0;i<l;i++){for(a=0,r=0;r<c;r++)a+=e[i][r]*n[r][u];h[i][u]=a}return 1===l&&1===u?h[0][0]:h}return t.map(e,(function(t){return t*n}))},outer:function(e,n){return t.multiply(e.map((function(t){return[t]})),[n])},dot:function(e,n){s(e[0])||(e=[e]),s(n[0])||(n=[n]);for(var i,r,o=1===e[0].length&&1!==e.length?t.transpose(e):e,a=1===n[0].length&&1!==n.length?t.transpose(n):n,l=[],c=0,h=o.length,u=o[0].length;c<h;c++){for(l[c]=[],i=0,r=0;r<u;r++)i+=o[c][r]*a[c][r];l[c]=i}return 1===l.length?l[0]:l},pow:function(n,i){return t.map(n,(function(t){return e.pow(t,i)}))},exp:function(n){return t.map(n,(function(t){return e.exp(t)}))},log:function(n){return t.map(n,(function(t){return e.log(t)}))},abs:function(n){return t.map(n,(function(t){return e.abs(t)}))},norm:function(t,n){var i=0,r=0;for(isNaN(n)&&(n=2),s(t[0])&&(t=t[0]);r<t.length;r++)i+=e.pow(e.abs(t[r]),n);return e.pow(i,1/n)},angle:function(n,i){return e.acos(t.dot(n,i)/(t.norm(n)*t.norm(i)))},aug:function(t,e){var n,i=[];for(n=0;n<t.length;n++)i.push(t[n].slice());for(n=0;n<i.length;n++)r.apply(i[n],e[n]);return i},inv:function(e){for(var n,i=e.length,r=e[0].length,o=t.identity(i,r),s=t.gauss_jordan(e,o),a=[],l=0;l<i;l++)for(a[l]=[],n=r;n<s[0].length;n++)a[l][n-r]=s[l][n];return a},det:function(t){var e,n=t.length,i=2*n,r=new Array(i),o=n-1,s=i-1,a=o-n+1,l=s,c=0,h=0;if(2===n)return t[0][0]*t[1][1]-t[0][1]*t[1][0];for(;c<i;c++)r[c]=1;for(c=0;c<n;c++){for(e=0;e<n;e++)r[a<0?a+n:a]*=t[c][e],r[l<n?l+n:l]*=t[c][e],a++,l--;a=--o-n+1,l=--s}for(c=0;c<n;c++)h+=r[c];for(;c<i;c++)h-=r[c];return h},gauss_elimination:function(n,i){var r,o,s,a,l=0,c=0,h=n.length,u=n[0].length,d=1,f=0,g=[];for(r=(n=t.aug(n,i))[0].length,l=0;l<h;l++){for(o=n[l][l],c=l,a=l+1;a<u;a++)o<e.abs(n[a][l])&&(o=n[a][l],c=a);if(c!=l)for(a=0;a<r;a++)s=n[l][a],n[l][a]=n[c][a],n[c][a]=s;for(c=l+1;c<h;c++)for(d=n[c][l]/n[l][l],a=l;a<r;a++)n[c][a]=n[c][a]-d*n[l][a]}for(l=h-1;l>=0;l--){for(f=0,c=l+1;c<=h-1;c++)f+=g[c]*n[l][c];g[l]=(n[l][r-1]-f)/n[l][l]}return g},gauss_jordan:function(n,i){var r,o,s,a=t.aug(n,i),l=a.length,c=a[0].length,h=0;for(o=0;o<l;o++){var u=o;for(s=o+1;s<l;s++)e.abs(a[s][o])>e.abs(a[u][o])&&(u=s);var d=a[o];for(a[o]=a[u],a[u]=d,s=o+1;s<l;s++)for(h=a[s][o]/a[o][o],r=o;r<c;r++)a[s][r]-=a[o][r]*h}for(o=l-1;o>=0;o--){for(h=a[o][o],s=0;s<o;s++)for(r=c-1;r>o-1;r--)a[s][r]-=a[o][r]*a[s][o]/h;for(a[o][o]/=h,r=l;r<c;r++)a[o][r]/=h}return a},triaUpSolve:function(e,n){var i,r=e[0].length,o=t.zeros(1,r)[0],s=!1;return null!=n[0].length&&(n=n.map((function(t){return t[0]})),s=!0),t.arange(r-1,-1,-1).forEach((function(s){i=t.arange(s+1,r).map((function(t){return o[t]*e[s][t]})),o[s]=(n[s]-t.sum(i))/e[s][s]})),s?o.map((function(t){return[t]})):o},triaLowSolve:function(e,n){var i,r=e[0].length,o=t.zeros(1,r)[0],s=!1;return null!=n[0].length&&(n=n.map((function(t){return t[0]})),s=!0),t.arange(r).forEach((function(r){i=t.arange(r).map((function(t){return e[r][t]*o[t]})),o[r]=(n[r]-t.sum(i))/e[r][r]})),s?o.map((function(t){return[t]})):o},lu:function(e){var n,i=e.length,r=t.identity(i),o=t.zeros(e.length,e[0].length);return t.arange(i).forEach((function(t){o[0][t]=e[0][t]})),t.arange(1,i).forEach((function(s){t.arange(s).forEach((function(i){n=t.arange(i).map((function(t){return r[s][t]*o[t][i]})),r[s][i]=(e[s][i]-t.sum(n))/o[i][i]})),t.arange(s,i).forEach((function(i){n=t.arange(s).map((function(t){return r[s][t]*o[t][i]})),o[s][i]=e[n.length][i]-t.sum(n)}))})),[r,o]},cholesky:function(n){var i,r=n.length,o=t.zeros(n.length,n[0].length);return t.arange(r).forEach((function(s){i=t.arange(s).map((function(t){return e.pow(o[s][t],2)})),o[s][s]=e.sqrt(n[s][s]-t.sum(i)),t.arange(s+1,r).forEach((function(e){i=t.arange(s).map((function(t){return o[s][t]*o[e][t]})),o[e][s]=(n[s][e]-t.sum(i))/o[s][s]}))})),o},gauss_jacobi:function(n,i,r,o){for(var s,a,l,c,h=0,u=0,d=n.length,f=[],g=[],p=[];h<d;h++)for(f[h]=[],g[h]=[],p[h]=[],u=0;u<d;u++)h>u?(f[h][u]=n[h][u],g[h][u]=p[h][u]=0):h<u?(g[h][u]=n[h][u],f[h][u]=p[h][u]=0):(p[h][u]=n[h][u],f[h][u]=g[h][u]=0);for(l=t.multiply(t.multiply(t.inv(p),t.add(f,g)),-1),a=t.multiply(t.inv(p),i),s=r,c=t.add(t.multiply(l,r),a),h=2;e.abs(t.norm(t.subtract(c,s)))>o;)s=c,c=t.add(t.multiply(l,s),a),h++;return c},gauss_seidel:function(n,i,r,o){for(var s,a,l,c,h,u=0,d=n.length,f=[],g=[],p=[];u<d;u++)for(f[u]=[],g[u]=[],p[u]=[],s=0;s<d;s++)u>s?(f[u][s]=n[u][s],g[u][s]=p[u][s]=0):u<s?(g[u][s]=n[u][s],f[u][s]=p[u][s]=0):(p[u][s]=n[u][s],f[u][s]=g[u][s]=0);for(c=t.multiply(t.multiply(t.inv(t.add(p,f)),g),-1),l=t.multiply(t.inv(t.add(p,f)),i),a=r,h=t.add(t.multiply(c,r),l),u=2;e.abs(t.norm(t.subtract(h,a)))>o;)a=h,h=t.add(t.multiply(c,a),l),u+=1;return h},SOR:function(n,i,r,o,s){for(var a,l,c,h,u,d=0,f=n.length,g=[],p=[],m=[];d<f;d++)for(g[d]=[],p[d]=[],m[d]=[],a=0;a<f;a++)d>a?(g[d][a]=n[d][a],p[d][a]=m[d][a]=0):d<a?(p[d][a]=n[d][a],g[d][a]=m[d][a]=0):(m[d][a]=n[d][a],g[d][a]=p[d][a]=0);for(h=t.multiply(t.inv(t.add(m,t.multiply(g,s))),t.subtract(t.multiply(m,1-s),t.multiply(p,s))),c=t.multiply(t.multiply(t.inv(t.add(m,t.multiply(g,s))),i),s),l=r,u=t.add(t.multiply(h,r),c),d=2;e.abs(t.norm(t.subtract(u,l)))>o;)l=u,u=t.add(t.multiply(h,l),c),d++;return u},householder:function(n){for(var i,r,o,s,a=n.length,l=n[0].length,c=0,h=[],u=[];c<a-1;c++){for(i=0,s=c+1;s<l;s++)i+=n[s][c]*n[s][c];for(i=(n[c+1][c]>0?-1:1)*e.sqrt(i),r=e.sqrt((i*i-n[c+1][c]*i)/2),(h=t.zeros(a,1))[c+1][0]=(n[c+1][c]-i)/(2*r),o=c+2;o<a;o++)h[o][0]=n[o][c]/(2*r);u=t.subtract(t.identity(a,l),t.multiply(t.multiply(h,t.transpose(h)),2)),n=t.multiply(u,t.multiply(n,u))}return n},QR:(n=t.sum,i=t.arange,function(r){var o,s,a,l=r.length,c=r[0].length,h=t.zeros(c,c);for(r=t.copy(r),s=0;s<c;s++){for(h[s][s]=e.sqrt(n(i(l).map((function(t){return r[t][s]*r[t][s]})))),o=0;o<l;o++)r[o][s]=r[o][s]/h[s][s];for(a=s+1;a<c;a++)for(h[s][a]=n(i(l).map((function(t){return r[t][s]*r[t][a]}))),o=0;o<l;o++)r[o][a]=r[o][a]-r[o][s]*h[s][a]}return[r,h]}),lstsq:function(e,n){var i=!1;void 0===n[0].length&&(n=n.map((function(t){return[t]})),i=!0);var r=t.QR(e),o=r[0],s=r[1],a=e[0].length,l=t.slice(o,{col:{end:a}}),c=function(e){var n=(e=t.copy(e)).length,i=t.identity(n);return t.arange(n-1,-1,-1).forEach((function(n){t.sliceAssign(i,{row:n},t.divide(t.slice(i,{row:n}),e[n][n])),t.sliceAssign(e,{row:n},t.divide(t.slice(e,{row:n}),e[n][n])),t.arange(n).forEach((function(r){var o=t.multiply(e[r][n],-1),s=t.slice(e,{row:r}),a=t.multiply(t.slice(e,{row:n}),o);t.sliceAssign(e,{row:r},t.add(s,a));var l=t.slice(i,{row:r}),c=t.multiply(t.slice(i,{row:n}),o);t.sliceAssign(i,{row:r},t.add(l,c))}))})),i}(t.slice(s,{row:{end:a}})),h=t.transpose(l);void 0===h[0].length&&(h=[h]);var u=t.multiply(t.multiply(c,h),n);return void 0===u.length&&(u=[[u]]),i?u.map((function(t){return t[0]})):u},jacobi:function(n){for(var i,r,o,s,a,l,c,h=1,u=n.length,d=t.identity(u,u),f=[];1===h;){for(a=n[0][1],o=0,s=1,i=0;i<u;i++)for(r=0;r<u;r++)i!=r&&a<e.abs(n[i][r])&&(a=e.abs(n[i][r]),o=i,s=r);for(l=n[o][o]===n[s][s]?n[o][s]>0?e.PI/4:-e.PI/4:e.atan(2*n[o][s]/(n[o][o]-n[s][s]))/2,(c=t.identity(u,u))[o][o]=e.cos(l),c[o][s]=-e.sin(l),c[s][o]=e.sin(l),c[s][s]=e.cos(l),d=t.multiply(d,c),n=t.multiply(t.multiply(t.inv(c),n),c),h=0,i=1;i<u;i++)for(r=1;r<u;r++)i!=r&&e.abs(n[i][r])>.001&&(h=1)}for(i=0;i<u;i++)f.push(n[i][i]);return[d,f]},rungekutta:function(t,e,n,i,r,o){var s,a,l;if(2===o)for(;i<=n;)r+=((s=e*t(i,r))+(a=e*t(i+e,r+s)))/2,i+=e;if(4===o)for(;i<=n;)r+=((s=e*t(i,r))+2*(a=e*t(i+e/2,r+s/2))+2*(l=e*t(i+e/2,r+a/2))+e*t(i+e,r+l))/6,i+=e;return r},romberg:function(t,n,i,r){for(var o,s,a,l,c,h=0,u=(i-n)/2,d=[],f=[],g=[];h<r/2;){for(c=t(n),a=n,l=0;a<=i;a+=u,l++)d[l]=a;for(o=d.length,a=1;a<o-1;a++)c+=(a%2!=0?4:2)*t(d[a]);c=u/3*(c+t(i)),g[h]=c,u/=2,h++}for(s=g.length,o=1;1!==s;){for(a=0;a<s-1;a++)f[a]=(e.pow(4,o)*g[a+1]-g[a])/(e.pow(4,o)-1);s=f.length,g=f,f=[],o++}return g},richardson:function(t,n,i,r){function o(t,e){for(var n,i=0,r=t.length;i<r;i++)t[i]===e&&(n=i);return n}for(var s,a,l,c,h,u=e.abs(i-t[o(t,i)+1]),d=0,f=[],g=[];r>=u;)s=o(t,i+r),a=o(t,i),f[d]=(n[s]-2*n[a]+n[2*a-s])/(r*r),r/=2,d++;for(c=f.length,l=1;1!=c;){for(h=0;h<c-1;h++)g[h]=(e.pow(4,l)*f[h+1]-f[h])/(e.pow(4,l)-1);c=g.length,f=g,g=[],l++}return f},simpson:function(t,e,n,i){for(var r,o=(n-e)/i,s=t(e),a=[],l=e,c=0,h=1;l<=n;l+=o,c++)a[c]=l;for(r=a.length;h<r-1;h++)s+=(h%2!=0?4:2)*t(a[h]);return o/3*(s+t(n))},hermite:function(t,e,n,i){for(var r,o=t.length,s=0,a=0,l=[],c=[],h=[],u=[];a<o;a++){for(l[a]=1,r=0;r<o;r++)a!=r&&(l[a]*=(i-t[r])/(t[a]-t[r]));for(c[a]=0,r=0;r<o;r++)a!=r&&(c[a]+=1/(t[a]-t[r]));h[a]=(1-2*(i-t[a])*c[a])*(l[a]*l[a]),u[a]=(i-t[a])*(l[a]*l[a]),s+=h[a]*e[a]+u[a]*n[a]}return s},lagrange:function(t,e,n){for(var i,r,o=0,s=0,a=t.length;s<a;s++){for(r=e[s],i=0;i<a;i++)s!=i&&(r*=(n-t[i])/(t[s]-t[i]));o+=r}return o},cubic_spline:function(e,n,i){for(var r,o,s=e.length,a=0,l=[],c=[],h=[],u=[],d=[],f=[];a<s-1;a++)u[a]=e[a+1]-e[a];for(h[0]=0,a=1;a<s-1;a++)h[a]=3/u[a]*(n[a+1]-n[a])-3/u[a-1]*(n[a]-n[a-1]);for(a=1;a<s-1;a++)l[a]=[],c[a]=[],l[a][a-1]=u[a-1],l[a][a]=2*(u[a-1]+u[a]),l[a][a+1]=u[a],c[a][0]=h[a];for(o=t.multiply(t.inv(l),c),r=0;r<s-1;r++)d[r]=(n[r+1]-n[r])/u[r]-u[r]*(o[r+1][0]+2*o[r][0])/3,f[r]=(o[r+1][0]-o[r][0])/(3*u[r]);for(r=0;r<s&&!(e[r]>i);r++);return n[r-=1]+(i-e[r])*d[r]+t.sq(i-e[r])*o[r]+(i-e[r])*t.sq(i-e[r])*f[r]},gauss_quadrature:function(){throw new Error("gauss_quadrature not yet implemented")},PCA:function(e){var n,i,r,o,s,a=e.length,l=e[0].length,c=0,h=[],u=[],d=[],f=[],g=[],p=[],m=[];for(c=0;c<a;c++)h[c]=t.sum(e[c])/l;for(c=0;c<l;c++)for(g[c]=[],n=0;n<a;n++)g[c][n]=e[n][c]-h[n];for(g=t.transpose(g),c=0;c<a;c++)for(p[c]=[],n=0;n<a;n++)p[c][n]=t.dot([g[c]],[g[n]])/(l-1);for(s=(r=t.jacobi(p))[0],u=r[1],m=t.transpose(s),c=0;c<u.length;c++)for(n=c;n<u.length;n++)u[c]<u[n]&&(i=u[c],u[c]=u[n],u[n]=i,d=m[c],m[c]=m[n],m[n]=d);for(o=t.transpose(g),c=0;c<a;c++)for(f[c]=[],n=0;n<o.length;n++)f[c][n]=t.dot([m[c]],[o[n]]);return[e,u,m,f]}}),function(e){for(var n=0;n<e.length;n++)!function(e){t.fn[e]=function(n,i){var r=this;return i?(setTimeout((function(){i.call(r,t.fn[e].call(r,n))}),15),this):"number"==typeof t[e](this,n)?t[e](this,n):t(t[e](this,n))}}(e[n])}("add divide multiply subtract dot pow exp log abs norm angle".split(" "))}(e,Math),function(t,e){var n=[].slice,i=t.utils.isNumber,r=t.utils.isArray;function o(t,n,i,r){if(t>1||i>1||t<=0||i<=0)throw new Error("Proportions should be greater than 0 and less than 1");var o=(t*n+i*r)/(n+r);return(t-i)/e.sqrt(o*(1-o)*(1/n+1/r))}t.extend({zscore:function(){var e=n.call(arguments);return i(e[1])?(e[0]-e[1])/e[2]:(e[0]-t.mean(e[1]))/t.stdev(e[1],e[2])},ztest:function(){var i,o=n.call(arguments);return r(o[1])?(i=t.zscore(o[0],o[1],o[3]),1===o[2]?t.normal.cdf(-e.abs(i),0,1):2*t.normal.cdf(-e.abs(i),0,1)):o.length>2?(i=t.zscore(o[0],o[1],o[2]),1===o[3]?t.normal.cdf(-e.abs(i),0,1):2*t.normal.cdf(-e.abs(i),0,1)):(i=o[0],1===o[1]?t.normal.cdf(-e.abs(i),0,1):2*t.normal.cdf(-e.abs(i),0,1))}}),t.extend(t.fn,{zscore:function(t,e){return(t-this.mean())/this.stdev(e)},ztest:function(n,i,r){var o=e.abs(this.zscore(n,r));return 1===i?t.normal.cdf(-o,0,1):2*t.normal.cdf(-o,0,1)}}),t.extend({tscore:function(){var i=n.call(arguments);return 4===i.length?(i[0]-i[1])/(i[2]/e.sqrt(i[3])):(i[0]-t.mean(i[1]))/(t.stdev(i[1],!0)/e.sqrt(i[1].length))},ttest:function(){var r,o=n.call(arguments);return 5===o.length?(r=e.abs(t.tscore(o[0],o[1],o[2],o[3])),1===o[4]?t.studentt.cdf(-r,o[3]-1):2*t.studentt.cdf(-r,o[3]-1)):i(o[1])?(r=e.abs(o[0]),1==o[2]?t.studentt.cdf(-r,o[1]-1):2*t.studentt.cdf(-r,o[1]-1)):(r=e.abs(t.tscore(o[0],o[1])),1==o[2]?t.studentt.cdf(-r,o[1].length-1):2*t.studentt.cdf(-r,o[1].length-1))}}),t.extend(t.fn,{tscore:function(t){return(t-this.mean())/(this.stdev(!0)/e.sqrt(this.cols()))},ttest:function(n,i){return 1===i?1-t.studentt.cdf(e.abs(this.tscore(n)),this.cols()-1):2*t.studentt.cdf(-e.abs(this.tscore(n)),this.cols()-1)}}),t.extend({anovafscore:function(){var i,r,o,s,a,l,c,h,u=n.call(arguments);if(1===u.length){for(a=new Array(u[0].length),c=0;c<u[0].length;c++)a[c]=u[0][c];u=a}for(r=new Array,c=0;c<u.length;c++)r=r.concat(u[c]);for(o=t.mean(r),i=0,c=0;c<u.length;c++)i+=u[c].length*e.pow(t.mean(u[c])-o,2);for(i/=u.length-1,l=0,c=0;c<u.length;c++)for(s=t.mean(u[c]),h=0;h<u[c].length;h++)l+=e.pow(u[c][h]-s,2);return i/(l/(r.length-u.length))},anovaftest:function(){var e,r,o,s,a=n.call(arguments);if(i(a[0]))return 1-t.centralF.cdf(a[0],a[1],a[2]);var l=t.anovafscore(a);for(e=a.length-1,o=0,s=0;s<a.length;s++)o+=a[s].length;return r=o-e-1,1-t.centralF.cdf(l,e,r)},ftest:function(e,n,i){return 1-t.centralF.cdf(e,n,i)}}),t.extend(t.fn,{anovafscore:function(){return t.anovafscore(this.toArray())},anovaftes:function(){var e,n=0;for(e=0;e<this.length;e++)n+=this[e].length;return t.ftest(this.anovafscore(),this.length-1,n-this.length)}}),t.extend({qscore:function(){var r,o,s,a,l,c=n.call(arguments);return i(c[0])?(r=c[0],o=c[1],s=c[2],a=c[3],l=c[4]):(r=t.mean(c[0]),o=t.mean(c[1]),s=c[0].length,a=c[1].length,l=c[2]),e.abs(r-o)/(l*e.sqrt((1/s+1/a)/2))},qtest:function(){var e,i=n.call(arguments);3===i.length?(e=i[0],i=i.slice(1)):7===i.length?(e=t.qscore(i[0],i[1],i[2],i[3],i[4]),i=i.slice(5)):(e=t.qscore(i[0],i[1],i[2]),i=i.slice(3));var r=i[0],o=i[1];return 1-t.tukey.cdf(e,o,r-o)},tukeyhsd:function(e){for(var n=t.pooledstdev(e),i=e.map((function(e){return t.mean(e)})),r=e.reduce((function(t,e){return t+e.length}),0),o=[],s=0;s<e.length;++s)for(var a=s+1;a<e.length;++a){var l=t.qtest(i[s],i[a],e[s].length,e[a].length,n,r,e.length);o.push([[s,a],l])}return o}}),t.extend({normalci:function(){var i,r=n.call(arguments),o=new Array(2);return i=4===r.length?e.abs(t.normal.inv(r[1]/2,0,1)*r[2]/e.sqrt(r[3])):e.abs(t.normal.inv(r[1]/2,0,1)*t.stdev(r[2])/e.sqrt(r[2].length)),o[0]=r[0]-i,o[1]=r[0]+i,o},tci:function(){var i,r=n.call(arguments),o=new Array(2);return i=4===r.length?e.abs(t.studentt.inv(r[1]/2,r[3]-1)*r[2]/e.sqrt(r[3])):e.abs(t.studentt.inv(r[1]/2,r[2].length-1)*t.stdev(r[2],!0)/e.sqrt(r[2].length)),o[0]=r[0]-i,o[1]=r[0]+i,o},significant:function(t,e){return t<e}}),t.extend(t.fn,{normalci:function(e,n){return t.normalci(e,n,this.toArray())},tci:function(e,n){return t.tci(e,n,this.toArray())}}),t.extend(t.fn,{oneSidedDifferenceOfProportions:function(e,n,i,r){var s=o(e,n,i,r);return t.ztest(s,1)},twoSidedDifferenceOfProportions:function(e,n,i,r){var s=o(e,n,i,r);return t.ztest(s,2)}})}(e,Math),e.models=function(){function t(t,n){var i=t.length,r=n[0].length-1,o=i-r-1,s=e.lstsq(n,t),a=e.multiply(n,s.map((function(t){return[t]}))).map((function(t){return t[0]})),l=e.subtract(t,a),c=e.mean(t),h=e.sum(a.map((function(t){return Math.pow(t-c,2)}))),u=e.sum(t.map((function(t,e){return Math.pow(t-a[e],2)}))),d=h+u;return{exog:n,endog:t,nobs:i,df_model:r,df_resid:o,coef:s,predict:a,resid:l,ybar:c,SST:d,SSE:h,SSR:u,R2:h/d}}function n(n){var i,r,o=(i=n.exog,r=i[0].length,e.arange(r).map((function(n){var o=e.arange(r).filter((function(t){return t!==n}));return t(e.col(i,n).map((function(t){return t[0]})),e.col(i,o))}))),s=Math.sqrt(n.SSR/n.df_resid),a=o.map((function(t){var e=t.SST,n=t.R2;return s/Math.sqrt(e*(1-n))})),l=n.coef.map((function(t,e){return(t-0)/a[e]})),c=l.map((function(t){var i=e.studentt.cdf(t,n.df_resid);return 2*(i>.5?1-i:i)})),h=e.studentt.inv(.975,n.df_resid),u=n.coef.map((function(t,e){var n=h*a[e];return[t-n,t+n]}));return{se:a,t:l,p:c,sigmaHat:s,interval95:u}}return{ols:function(i,r){var o=t(i,r),s=n(o),a=function(t){var n,i,r,o=t.R2/t.df_model/((1-t.R2)/t.df_resid);return{F_statistic:o,pvalue:1-(n=o,i=t.df_model,r=t.df_resid,e.beta.cdf(n/(r/i+n),i/2,r/2))}}(o),l=1-(1-o.R2)*((o.nobs-1)/o.df_resid);return o.t=s,o.f=a,o.adjust_R2=l,o}}}(),e.extend({buildxmatrix:function(){for(var t=new Array(arguments.length),n=0;n<arguments.length;n++){var i=[1];t[n]=i.concat(arguments[n])}return e(t)},builddxmatrix:function(){for(var t=new Array(arguments[0].length),n=0;n<arguments[0].length;n++){var i=[1];t[n]=i.concat(arguments[0][n])}return e(t)},buildjxmatrix:function(t){for(var n=new Array(t.length),i=0;i<t.length;i++)n[i]=t[i];return e.builddxmatrix(n)},buildymatrix:function(t){return e(t).transpose()},buildjymatrix:function(t){return t.transpose()},matrixmult:function(t,n){var i,r,o,s,a;if(t.cols()==n.rows()){if(n.rows()>1){for(s=[],i=0;i<t.rows();i++)for(s[i]=[],r=0;r<n.cols();r++){for(a=0,o=0;o<t.cols();o++)a+=t.toArray()[i][o]*n.toArray()[o][r];s[i][r]=a}return e(s)}for(s=[],i=0;i<t.rows();i++)for(s[i]=[],r=0;r<n.cols();r++){for(a=0,o=0;o<t.cols();o++)a+=t.toArray()[i][o]*n.toArray()[r];s[i][r]=a}return e(s)}},regress:function(t,n){var i=e.xtranspxinv(t),r=t.transpose(),o=e.matrixmult(e(i),r);return e.matrixmult(o,n)},regresst:function(t,n,i){var r=e.regress(t,n),o={anova:{}},s=e.jMatYBar(t,r);o.yBar=s;var a=n.mean();o.anova.residuals=e.residuals(n,s),o.anova.ssr=e.ssr(s,a),o.anova.msr=o.anova.ssr/(t[0].length-1),o.anova.sse=e.sse(n,s),o.anova.mse=o.anova.sse/(n.length-(t[0].length-1)-1),o.anova.sst=e.sst(n,a),o.anova.mst=o.anova.sst/(n.length-1),o.anova.r2=1-o.anova.sse/o.anova.sst,o.anova.r2<0&&(o.anova.r2=0),o.anova.fratio=o.anova.msr/o.anova.mse,o.anova.pvalue=e.anovaftest(o.anova.fratio,t[0].length-1,n.length-(t[0].length-1)-1),o.anova.rmse=Math.sqrt(o.anova.mse),o.anova.r2adj=1-o.anova.mse/o.anova.mst,o.anova.r2adj<0&&(o.anova.r2adj=0),o.stats=new Array(t[0].length);for(var l,c,h,u=e.xtranspxinv(t),d=0;d<r.length;d++)l=Math.sqrt(o.anova.mse*Math.abs(u[d][d])),c=Math.abs(r[d]/l),h=e.ttest(c,n.length-t[0].length-1,i),o.stats[d]=[r[d],l,c,h];return o.regress=r,o},xtranspx:function(t){return e.matrixmult(t.transpose(),t)},xtranspxinv:function(t){var n=e.matrixmult(t.transpose(),t);return e.inv(n)},jMatYBar:function(t,n){var i=e.matrixmult(t,n);return new e(i)},residuals:function(t,n){return e.matrixsubtract(t,n)},ssr:function(t,e){for(var n=0,i=0;i<t.length;i++)n+=Math.pow(t[i]-e,2);return n},sse:function(t,e){for(var n=0,i=0;i<t.length;i++)n+=Math.pow(t[i]-e[i],2);return n},sst:function(t,e){for(var n=0,i=0;i<t.length;i++)n+=Math.pow(t[i]-e,2);return n},matrixsubtract:function(t,n){for(var i=new Array(t.length),r=0;r<t.length;r++){i[r]=new Array(t[r].length);for(var o=0;o<t[r].length;o++)i[r][o]=t[r][o]-n[r][o]}return e(i)}}),e.jStat=e,e)},254:function(t,e){var n,i;n=function(t){"use strict";var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function n(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}var i={order:2,precision:2,period:null};function r(t,e){var n=[],i=[];t.forEach((function(t,r){null!==t[1]&&(i.push(t),n.push(e[r]))}));var r=i.reduce((function(t,e){return t+e[1]}),0)/i.length,o=i.reduce((function(t,e){var n=e[1]-r;return t+n*n}),0);return 1-i.reduce((function(t,e,i){var r=n[i],o=e[1]-r[1];return t+o*o}),0)/o}function o(t,e){var n=Math.pow(10,e);return Math.round(t*n)/n}var s={linear:function(t,e){for(var n=[0,0,0,0,0],i=0,s=0;s<t.length;s++)null!==t[s][1]&&(i++,n[0]+=t[s][0],n[1]+=t[s][1],n[2]+=t[s][0]*t[s][0],n[3]+=t[s][0]*t[s][1],n[4]+=t[s][1]*t[s][1]);var a=i*n[2]-n[0]*n[0],l=i*n[3]-n[0]*n[1],c=0===a?0:o(l/a,e.precision),h=o(n[1]/i-c*n[0]/i,e.precision),u=function(t){return[o(t,e.precision),o(c*t+h,e.precision)]},d=t.map((function(t){return u(t[0])}));return{points:d,predict:u,equation:[c,h],r2:o(r(t,d),e.precision),string:0===h?"y = "+c+"x":"y = "+c+"x + "+h}},exponential:function(t,e){for(var n=[0,0,0,0,0,0],i=0;i<t.length;i++)null!==t[i][1]&&(n[0]+=t[i][0],n[1]+=t[i][1],n[2]+=t[i][0]*t[i][0]*t[i][1],n[3]+=t[i][1]*Math.log(t[i][1]),n[4]+=t[i][0]*t[i][1]*Math.log(t[i][1]),n[5]+=t[i][0]*t[i][1]);var s=n[1]*n[2]-n[5]*n[5],a=Math.exp((n[2]*n[3]-n[5]*n[4])/s),l=(n[1]*n[4]-n[5]*n[3])/s,c=o(a,e.precision),h=o(l,e.precision),u=function(t){return[o(t,e.precision),o(c*Math.exp(h*t),e.precision)]},d=t.map((function(t){return u(t[0])}));return{points:d,predict:u,equation:[c,h],string:"y = "+c+"e^("+h+"x)",r2:o(r(t,d),e.precision)}},logarithmic:function(t,e){for(var n=[0,0,0,0],i=t.length,s=0;s<i;s++)null!==t[s][1]&&(n[0]+=Math.log(t[s][0]),n[1]+=t[s][1]*Math.log(t[s][0]),n[2]+=t[s][1],n[3]+=Math.pow(Math.log(t[s][0]),2));var a=o((i*n[1]-n[2]*n[0])/(i*n[3]-n[0]*n[0]),e.precision),l=o((n[2]-a*n[0])/i,e.precision),c=function(t){return[o(t,e.precision),o(o(l+a*Math.log(t),e.precision),e.precision)]},h=t.map((function(t){return c(t[0])}));return{points:h,predict:c,equation:[l,a],string:"y = "+l+" + "+a+" ln(x)",r2:o(r(t,h),e.precision)}},power:function(t,e){for(var n=[0,0,0,0,0],i=t.length,s=0;s<i;s++)null!==t[s][1]&&(n[0]+=Math.log(t[s][0]),n[1]+=Math.log(t[s][1])*Math.log(t[s][0]),n[2]+=Math.log(t[s][1]),n[3]+=Math.pow(Math.log(t[s][0]),2));var a=(i*n[1]-n[0]*n[2])/(i*n[3]-Math.pow(n[0],2)),l=(n[2]-a*n[0])/i,c=o(Math.exp(l),e.precision),h=o(a,e.precision),u=function(t){return[o(t,e.precision),o(o(c*Math.pow(t,h),e.precision),e.precision)]},d=t.map((function(t){return u(t[0])}));return{points:d,predict:u,equation:[c,h],string:"y = "+c+"x^"+h,r2:o(r(t,d),e.precision)}},polynomial:function(t,e){for(var i=[],s=[],a=0,l=0,c=t.length,h=e.order+1,u=0;u<h;u++){for(var d=0;d<c;d++)null!==t[d][1]&&(a+=Math.pow(t[d][0],u)*t[d][1]);i.push(a),a=0;for(var f=[],g=0;g<h;g++){for(var p=0;p<c;p++)null!==t[p][1]&&(l+=Math.pow(t[p][0],u+g));f.push(l),l=0}s.push(f)}s.push(i);for(var m=function(t,e){for(var n=t,i=t.length-1,r=[e],o=0;o<i;o++){for(var s=o,a=o+1;a<i;a++)Math.abs(n[o][a])>Math.abs(n[o][s])&&(s=a);for(var l=o;l<i+1;l++){var c=n[l][o];n[l][o]=n[l][s],n[l][s]=c}for(var h=o+1;h<i;h++)for(var u=i;u>=o;u--)n[u][h]-=n[u][o]*n[o][h]/n[o][o]}for(var d=i-1;d>=0;d--){for(var f=0,g=d+1;g<i;g++)f+=n[g][d]*r[g];r[d]=(n[i][d]-f)/n[d][d]}return r}(s,h).map((function(t){return o(t,e.precision)})),A=function(t){return[o(t,e.precision),o(m.reduce((function(e,n,i){return e+n*Math.pow(t,i)}),0),e.precision)]},y=t.map((function(t){return A(t[0])})),b="y = ",x=m.length-1;x>=0;x--)b+=x>1?m[x]+"x^"+x+" + ":1===x?m[x]+"x + ":m[x];return{string:b,points:y,predict:A,equation:[].concat(n(m)).reverse(),r2:o(r(t,y),e.precision)}}};t.exports=Object.keys(s).reduce((function(t,n){return e({_round:o},t,(l=function(t,r){return s[n](t,e({},i,r))},(a=n)in(r={})?Object.defineProperty(r,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):r[a]=l,r));var r,a,l}),{})},void 0===(i=n.apply(e,[t]))||(t.exports=i)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var l=t[a],c=i.base?l[0]+i.base:l[0],h=o[c]||0,u="".concat(c," ").concat(h);o[c]=h+1;var d=n(u),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var g=r(f,i);i.byIndex=a,e.splice(a,0,{identifier:u,updater:g,references:1})}s.push(u)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var l=i(t,r),c=0;c<o.length;c++){var h=n(o[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=l}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},728:(t,e,n)=>{var i={"./ex1.csv":643,"./ex2.csv":382,"./ex3.csv":188,"./ex5.csv":799};function r(t){var e=o(t);return n(e)}function o(t){if(!n.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}r.keys=function(){return Object.keys(i)},r.resolve=o,t.exports=r,r.id=728}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),a=n(565),l=n.n(a),c=n(216),h=n.n(c),u=n(589),d=n.n(u),f=n(769),g={};g.styleTagTransform=d(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=h(),e()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;const p="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function m(t,e,n){const i=n||(t=>Array.prototype.slice.call(t));let r=!1,o=[];return function(...n){o=i(n),r||(r=!0,p.call(window,(()=>{r=!1,t.apply(e,o)})))}}const A=t=>"start"===t?"left":"end"===t?"right":"center",y=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function b(){}const x=function(){let t=0;return function(){return t++}}();function v(t){return null==t}function _(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function w(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const E=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function M(t,e){return E(t)?t:e}function k(t,e){return void 0===t?e:t}const C=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function S(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function B(t,e,n,i){let r,o,s;if(_(t))if(o=t.length,i)for(r=o-1;r>=0;r--)e.call(n,t[r],r);else for(r=0;r<o;r++)e.call(n,t[r],r);else if(w(t))for(s=Object.keys(t),o=s.length,r=0;r<o;r++)e.call(n,t[s[r]],s[r])}function P(t,e){let n,i,r,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],o=e[n],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function D(t){if(_(t))return t.map(D);if(w(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let r=0;for(;r<i;++r)e[n[r]]=D(t[n[r]]);return e}return t}function F(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function O(t,e,n,i){if(!F(t))return;const r=e[t],o=n[t];w(r)&&w(o)?R(r,o,i):e[t]=D(o)}function R(t,e,n){const i=_(e)?e:[e],r=i.length;if(!w(t))return t;const o=(n=n||{}).merger||O;for(let s=0;s<r;++s){if(!w(e=i[s]))continue;const r=Object.keys(e);for(let i=0,s=r.length;i<s;++i)o(r[i],t,e,n)}return t}function T(t,e){return R(t,e,{merger:L})}function L(t,e,n){if(!F(t))return;const i=e[t],r=n[t];w(i)&&w(r)?T(i,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=D(r))}function z(t,e){const n=t.indexOf(".",e);return-1===n?t.length:n}function I(t,e){if(""===e)return t;let n=0,i=z(e,n);for(;t&&i>n;)t=t[e.substr(n,i-n)],n=i+1,i=z(e,n);return t}function q(t){return t.charAt(0).toUpperCase()+t.slice(1)}const N=t=>void 0!==t,j=t=>"function"==typeof t,V=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},W=Math.PI,H=2*W,$=H+W,U=Number.POSITIVE_INFINITY,Y=W/180,X=W/2,G=W/4,K=2*W/3,Z=Math.log10,Q=Math.sign;function J(t){const e=Math.round(t);t=et(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(Z(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function tt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function et(t,e,n){return Math.abs(t-e)<n}function nt(t,e,n){let i,r,o;for(i=0,r=t.length;i<r;i++)o=t[i][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function it(t){return t*(W/180)}function rt(t){return t*(180/W)}function ot(t){if(!E(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function st(t,e){const n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i);let o=Math.atan2(i,n);return o<-.5*W&&(o+=H),{angle:o,distance:r}}function at(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function lt(t,e){return(t-e+$)%H-W}function ct(t){return(t%H+H)%H}function ht(t,e,n,i){const r=ct(t),o=ct(e),s=ct(n),a=ct(o-r),l=ct(s-r),c=ct(r-o),h=ct(r-s);return r===o||r===s||i&&o===s||a>l&&c<h}function ut(t,e,n){return Math.max(e,Math.min(n,t))}function dt(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}const ft=t=>0===t||1===t,gt=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*H/n),pt=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*H/n)+1,mt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*X),easeOutSine:t=>Math.sin(t*X),easeInOutSine:t=>-.5*(Math.cos(W*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ft(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ft(t)?t:gt(t,.075,.3),easeOutElastic:t=>ft(t)?t:pt(t,.075,.3),easeInOutElastic(t){const e=.1125;return ft(t)?t:t<.5?.5*gt(2*t,e,.45):.5+.5*pt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-mt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*mt.easeInBounce(2*t):.5*mt.easeOutBounce(2*t-1)+.5},At={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},yt="0123456789ABCDEF",bt=t=>yt[15&t],xt=t=>yt[(240&t)>>4]+yt[15&t],vt=t=>(240&t)>>4==(15&t);function _t(t){return t+.5|0}const wt=(t,e,n)=>Math.max(Math.min(t,n),e);function Et(t){return wt(_t(2.55*t),0,255)}function Mt(t){return wt(_t(255*t),0,255)}function kt(t){return wt(_t(t/2.55)/100,0,1)}function Ct(t){return wt(_t(100*t),0,100)}const St=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Bt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Pt(t,e,n){const i=e*Math.min(n,1-n),r=(e,r=(e+t/30)%12)=>n-i*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function Dt(t,e,n){const i=(i,r=(i+t/60)%6)=>n-n*e*Math.max(Math.min(r,4-r,1),0);return[i(5),i(3),i(1)]}function Ft(t,e,n){const i=Pt(t,1,.5);let r;for(e+n>1&&(r=1/(e+n),e*=r,n*=r),r=0;r<3;r++)i[r]*=1-e-n,i[r]+=e;return i}function Ot(t){const e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),o=Math.min(e,n,i),s=(r+o)/2;let a,l,c;return r!==o&&(c=r-o,l=s>.5?c/(2-r-o):c/(r+o),a=r===e?(n-i)/c+(n<i?6:0):r===n?(i-e)/c+2:(e-n)/c+4,a=60*a+.5),[0|a,l||0,s]}function Rt(t,e,n,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,i)).map(Mt)}function Tt(t,e,n){return Rt(Pt,t,e,n)}function Lt(t){return(t%360+360)%360}const zt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},It={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let qt;function Nt(t,e,n){if(t){let i=Ot(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=Tt(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function jt(t,e){return t?Object.assign(e||{},t):t}function Vt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Mt(t[3]))):(e=jt(t,{r:0,g:0,b:0,a:1})).a=Mt(e.a),e}function Wt(t){return"r"===t.charAt(0)?function(t){const e=St.exec(t);let n,i,r,o=255;if(e){if(e[7]!==n){const t=+e[7];o=255&(e[8]?Et(t):255*t)}return n=+e[1],i=+e[3],r=+e[5],n=255&(e[2]?Et(n):n),i=255&(e[4]?Et(i):i),r=255&(e[6]?Et(r):r),{r:n,g:i,b:r,a:o}}}(t):function(t){const e=Bt.exec(t);let n,i=255;if(!e)return;e[5]!==n&&(i=e[6]?Et(+e[5]):Mt(+e[5]));const r=Lt(+e[2]),o=+e[3]/100,s=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return Rt(Ft,t,e,n)}(r,o,s):"hsv"===e[1]?function(t,e,n){return Rt(Dt,t,e,n)}(r,o,s):Tt(r,o,s),{r:n[0],g:n[1],b:n[2],a:i}}(t)}class Ht{constructor(t){if(t instanceof Ht)return t;const e=typeof t;let n;var i,r,o;"object"===e?n=Vt(t):"string"===e&&(o=(i=t).length,"#"===i[0]&&(4===o||5===o?r={r:255&17*At[i[1]],g:255&17*At[i[2]],b:255&17*At[i[3]],a:5===o?17*At[i[4]]:255}:7!==o&&9!==o||(r={r:At[i[1]]<<4|At[i[2]],g:At[i[3]]<<4|At[i[4]],b:At[i[5]]<<4|At[i[6]],a:9===o?At[i[7]]<<4|At[i[8]]:255})),n=r||function(t){qt||(qt=function(){const t={},e=Object.keys(It),n=Object.keys(zt);let i,r,o,s,a;for(i=0;i<e.length;i++){for(s=a=e[i],r=0;r<n.length;r++)o=n[r],a=a.replace(o,zt[o]);o=parseInt(It[s],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),qt.transparent=[0,0,0,0]);const e=qt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Wt(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=jt(this._rgb);return t&&(t.a=kt(t.a)),t}set rgb(t){this._rgb=Vt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${kt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return vt(t.r)&&vt(t.g)&&vt(t.b)&&vt(t.a)}(t)?bt:xt,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Ot(t),n=e[0],i=Ct(e[1]),r=Ct(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${r}%, ${kt(t.a)})`:`hsl(${n}, ${i}%, ${r}%)`}(this._rgb):this._rgb}mix(t,e){const n=this;if(t){const i=n.rgb,r=t.rgb;let o;const s=e===o?.5:e,a=2*s-1,l=i.a-r.a,c=((a*l==-1?a:(a+l)/(1+a*l))+1)/2;o=1-c,i.r=255&c*i.r+o*r.r+.5,i.g=255&c*i.g+o*r.g+.5,i.b=255&c*i.b+o*r.b+.5,i.a=s*i.a+(1-s)*r.a,n.rgb=i}return n}clone(){return new Ht(this.rgb)}alpha(t){return this._rgb.a=Mt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=_t(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Nt(this._rgb,2,t),this}darken(t){return Nt(this._rgb,2,-t),this}saturate(t){return Nt(this._rgb,1,t),this}desaturate(t){return Nt(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=Ot(t);n[0]=Lt(n[0]+e),n=Tt(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function $t(t){return new Ht(t)}const Ut=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Yt(t){return Ut(t)?t:$t(t)}function Xt(t){return Ut(t)?t:$t(t).saturate(.5).darken(.1).hexString()}const Gt=Object.create(null),Kt=Object.create(null);function Zt(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function Qt(t,e,n){return"string"==typeof e?R(Zt(t,e),n):R(Zt(t,""),e)}var Jt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Xt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Xt(e.borderColor),this.hoverColor=(t,e)=>Xt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Qt(this,t,e)}get(t){return Zt(this,t)}describe(t,e){return Qt(Kt,t,e)}override(t,e){return Qt(Gt,t,e)}route(t,e,n,i){const r=Zt(this,t),o=Zt(this,n),s="_"+e;Object.defineProperties(r,{[s]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[s],e=o[i];return w(t)?Object.assign({},e,t):k(t,e)},set(t){this[s]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function te(t,e,n,i,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,n.push(r)),o>i&&(i=o),i}function ee(t,e,n,i){let r=(i=i||{}).data=i.data||{},o=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},o=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let s=0;const a=n.length;let l,c,h,u,d;for(l=0;l<a;l++)if(u=n[l],null!=u&&!0!==_(u))s=te(t,r,o,s,u);else if(_(u))for(c=0,h=u.length;c<h;c++)d=u[c],null==d||_(d)||(s=te(t,r,o,s,d));t.restore();const f=o.length/2;if(f>n.length){for(l=0;l<f;l++)delete r[o[l]];o.splice(0,f)}return s}function ne(t,e,n){const i=t.currentDevicePixelRatio,r=0!==n?Math.max(n/2,.5):0;return Math.round((e-r)*i)/i+r}function ie(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function re(t,e,n,i){let r,o,s,a,l;const c=e.pointStyle,h=e.rotation,u=e.radius;let d=(h||0)*Y;if(c&&"object"==typeof c&&(r=c.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return t.save(),t.translate(n,i),t.rotate(d),t.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void t.restore();if(!(isNaN(u)||u<=0)){switch(t.beginPath(),c){default:t.arc(n,i,u,0,H),t.closePath();break;case"triangle":t.moveTo(n+Math.sin(d)*u,i-Math.cos(d)*u),d+=K,t.lineTo(n+Math.sin(d)*u,i-Math.cos(d)*u),d+=K,t.lineTo(n+Math.sin(d)*u,i-Math.cos(d)*u),t.closePath();break;case"rectRounded":l=.516*u,a=u-l,o=Math.cos(d+G)*a,s=Math.sin(d+G)*a,t.arc(n-o,i-s,l,d-W,d-X),t.arc(n+s,i-o,l,d-X,d),t.arc(n+o,i+s,l,d,d+X),t.arc(n-s,i+o,l,d+X,d+W),t.closePath();break;case"rect":if(!h){a=Math.SQRT1_2*u,t.rect(n-a,i-a,2*a,2*a);break}d+=G;case"rectRot":o=Math.cos(d)*u,s=Math.sin(d)*u,t.moveTo(n-o,i-s),t.lineTo(n+s,i-o),t.lineTo(n+o,i+s),t.lineTo(n-s,i+o),t.closePath();break;case"crossRot":d+=G;case"cross":o=Math.cos(d)*u,s=Math.sin(d)*u,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s),t.moveTo(n+s,i-o),t.lineTo(n-s,i+o);break;case"star":o=Math.cos(d)*u,s=Math.sin(d)*u,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s),t.moveTo(n+s,i-o),t.lineTo(n-s,i+o),d+=G,o=Math.cos(d)*u,s=Math.sin(d)*u,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s),t.moveTo(n+s,i-o),t.lineTo(n-s,i+o);break;case"line":o=Math.cos(d)*u,s=Math.sin(d)*u,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(d)*u,i+Math.sin(d)*u)}t.fill(),e.borderWidth>0&&t.stroke()}}function oe(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function se(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ae(t){t.restore()}function le(t,e,n,i,r){if(!e)return t.lineTo(n.x,n.y);if("middle"===r){const i=(e.x+n.x)/2;t.lineTo(i,e.y),t.lineTo(i,n.y)}else"after"===r!=!!i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function ce(t,e,n,i){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function he(t,e,n,i,r,o={}){const s=_(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),v(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<s.length;++l)c=s[l],a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),v(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,i,o.maxWidth)),t.fillText(c,n,i,o.maxWidth),ue(t,n,i,c,o),i+=r.lineHeight;t.restore()}function ue(t,e,n,i,r){if(r.strikethrough||r.underline){const o=t.measureText(i),s=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,h=r.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(s,h),t.lineTo(a,h),t.stroke()}}function de(t,e){const{x:n,y:i,w:r,h:o,radius:s}=e;t.arc(n+s.topLeft,i+s.topLeft,s.topLeft,-X,W,!0),t.lineTo(n,i+o-s.bottomLeft),t.arc(n+s.bottomLeft,i+o-s.bottomLeft,s.bottomLeft,W,X,!0),t.lineTo(n+r-s.bottomRight,i+o),t.arc(n+r-s.bottomRight,i+o-s.bottomRight,s.bottomRight,X,0,!0),t.lineTo(n+r,i+s.topRight),t.arc(n+r-s.topRight,i+s.topRight,s.topRight,0,-X,!0),t.lineTo(n+s.topLeft,i)}const fe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),ge=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function pe(t,e){const n=(""+t).match(fe);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function me(t,e){const n={},i=w(e),r=i?Object.keys(e):e,o=w(t)?i?n=>k(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of r)n[t]=+o(t)||0;return n}function Ae(t){return me(t,{top:"y",right:"x",bottom:"y",left:"x"})}function ye(t){return me(t,["topLeft","topRight","bottomLeft","bottomRight"])}function be(t){const e=Ae(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function xe(t,e){t=t||{},e=e||Jt.font;let n=k(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=k(t.style,e.style);i&&!(""+i).match(ge)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const r={family:k(t.family,e.family),lineHeight:pe(k(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:k(t.weight,e.weight),string:""};return r.string=function(t){return!t||v(t.size)||v(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function ve(t,e,n,i){let r,o,s,a=!0;for(r=0,o=t.length;r<o;++r)if(s=t[r],void 0!==s&&(void 0!==e&&"function"==typeof s&&(s=s(e),a=!1),void 0!==n&&_(s)&&(s=s[n%s.length],a=!1),void 0!==s))return i&&!a&&(i.cacheable=!1),s}function _e(t,e){return Object.assign(Object.create(t),e)}function we(t,e,n){n=n||(n=>t[n]<e);let i,r=t.length-1,o=0;for(;r-o>1;)i=o+r>>1,n(i)?o=i:r=i;return{lo:o,hi:r}}const Ee=(t,e,n)=>we(t,n,(i=>t[i][e]<n)),Me=(t,e,n)=>we(t,n,(i=>t[i][e]>=n)),ke=["push","pop","shift","splice","unshift"];function Ce(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,r=i.indexOf(e);-1!==r&&i.splice(r,1),i.length>0||(ke.forEach((e=>{delete t[e]})),delete t._chartjs)}function Se(t){const e=new Set;let n,i;for(n=0,i=t.length;n<i;++n)e.add(t[n]);return e.size===i?t:Array.from(e)}function Be(t,e=[""],n=t,i,r=(()=>t[0])){N(i)||(i=Ne("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:i,_getTarget:r,override:r=>Be([r,...t],e,n,i)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>Re(n,i,(()=>function(t,e,n,i){let r;for(const o of e)if(r=Ne(Fe(o,t),n),N(r))return Oe(t,r)?Ie(n,i,t,r):r}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>je(t).includes(e),ownKeys:t=>je(t),set(t,e,n){const i=t._storage||(t._storage=r());return t[e]=i[e]=n,delete t._keys,!0}})}function Pe(t,e,n,i){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:De(t,i),setContext:e=>Pe(t,e,n,i),override:r=>Pe(t.override(r),e,n,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>Re(t,e,(()=>function(t,e,n){const{_proxy:i,_context:r,_subProxy:o,_descriptors:s}=t;let a=i[e];return j(a)&&s.isScriptable(e)&&(a=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:s,_stack:a}=n;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);return a.add(t),e=e(o,s||i),a.delete(t),Oe(t,e)&&(e=Ie(r._scopes,r,t,e)),e}(e,a,t,n)),_(a)&&a.length&&(a=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:s,_descriptors:a}=n;if(N(o.index)&&i(t))e=e[o.index%e.length];else if(w(e[0])){const n=e,i=r._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=Ie(i,r,t,l);e.push(Pe(n,o,s&&s[t],a))}}return e}(e,a,t,s.isIndexable)),Oe(e,a)&&(a=Pe(a,r,o&&o[e],s)),a}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,i)=>(t[n]=i,delete e[n],!0)})}function De(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:n,indexable:i,isScriptable:j(n)?n:()=>n,isIndexable:j(i)?i:()=>i}}const Fe=(t,e)=>t?t+q(e):e,Oe=(t,e)=>w(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Re(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const i=n();return t[e]=i,i}function Te(t,e,n){return j(t)?t(e,n):t}const Le=(t,e)=>!0===t?e:"string"==typeof t?I(e,t):void 0;function ze(t,e,n,i,r){for(const o of e){const e=Le(n,o);if(e){t.add(e);const o=Te(e._fallback,n,r);if(N(o)&&o!==n&&o!==i)return o}else if(!1===e&&N(i)&&n!==i)return null}return!1}function Ie(t,e,n,i){const r=e._rootScopes,o=Te(e._fallback,n,i),s=[...t,...r],a=new Set;a.add(i);let l=qe(a,s,n,o||n,i);return null!==l&&(!N(o)||o===n||(l=qe(a,s,o,l,i),null!==l))&&Be(Array.from(a),[""],r,o,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const r=i[e];return _(r)&&w(n)?n:r}(e,n,i)))}function qe(t,e,n,i,r){for(;n;)n=ze(t,e,n,i,r);return n}function Ne(t,e){for(const n of e){if(!n)continue;const e=n[t];if(N(e))return e}}function je(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Ve=Number.EPSILON||1e-14,We=(t,e)=>e<t.length&&!t[e].skip&&t[e],He=t=>"x"===t?"y":"x";function $e(t,e,n,i){const r=t.skip?e:t,o=e,s=n.skip?e:n,a=at(o,r),l=at(s,o);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const u=i*c,d=i*h;return{previous:{x:o.x-u*(s.x-r.x),y:o.y-u*(s.y-r.y)},next:{x:o.x+d*(s.x-r.x),y:o.y+d*(s.y-r.y)}}}function Ue(t,e,n){return Math.max(Math.min(t,n),e)}function Ye(t,e,n,i,r){let o,s,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=He(e),i=t.length,r=Array(i).fill(0),o=Array(i);let s,a,l,c=We(t,0);for(s=0;s<i;++s)if(a=l,l=c,c=We(t,s+1),l){if(c){const t=c[e]-l[e];r[s]=0!==t?(c[n]-l[n])/t:0}o[s]=a?c?Q(r[s-1])!==Q(r[s])?0:(r[s-1]+r[s])/2:r[s-1]:r[s]}!function(t,e,n){const i=t.length;let r,o,s,a,l,c=We(t,0);for(let h=0;h<i-1;++h)l=c,c=We(t,h+1),l&&c&&(et(e[h],0,Ve)?n[h]=n[h+1]=0:(r=n[h]/e[h],o=n[h+1]/e[h],a=Math.pow(r,2)+Math.pow(o,2),a<=9||(s=3/Math.sqrt(a),n[h]=r*s*e[h],n[h+1]=o*s*e[h])))}(t,r,o),function(t,e,n="x"){const i=He(n),r=t.length;let o,s,a,l=We(t,0);for(let c=0;c<r;++c){if(s=a,a=l,l=We(t,c+1),!a)continue;const r=a[n],h=a[i];s&&(o=(r-s[n])/3,a[`cp1${n}`]=r-o,a[`cp1${i}`]=h-o*e[c]),l&&(o=(l[n]-r)/3,a[`cp2${n}`]=r+o,a[`cp2${i}`]=h+o*e[c])}}(t,o,e)}(t,r);else{let n=i?t[t.length-1]:t[0];for(o=0,s=t.length;o<s;++o)a=t[o],l=$e(n,a,t[Math.min(o+1,s-(i?0:1))%s],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}e.capBezierPoints&&function(t,e){let n,i,r,o,s,a=oe(t[0],e);for(n=0,i=t.length;n<i;++n)s=o,o=a,a=n<i-1&&oe(t[n+1],e),o&&(r=t[n],s&&(r.cp1x=Ue(r.cp1x,e.left,e.right),r.cp1y=Ue(r.cp1y,e.top,e.bottom)),a&&(r.cp2x=Ue(r.cp2x,e.left,e.right),r.cp2y=Ue(r.cp2y,e.top,e.bottom)))}(t,n)}function Xe(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ge(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ke(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}const Ze=t=>window.getComputedStyle(t,null),Qe=["top","right","bottom","left"];function Je(t,e,n){const i={};n=n?"-"+n:"";for(let r=0;r<4;r++){const o=Qe[r];i[o]=parseFloat(t[e+"-"+o+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function tn(t,e){const{canvas:n,currentDevicePixelRatio:i}=e,r=Ze(n),o="border-box"===r.boxSizing,s=Je(r,"padding"),a=Je(r,"border","width"),{x:l,y:c,box:h}=function(t,e){const n=t.native||t,i=n.touches,r=i&&i.length?i[0]:n,{offsetX:o,offsetY:s}=r;let a,l,c=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(o,s,n.target))a=o,l=s;else{const t=e.getBoundingClientRect();a=r.clientX-t.left,l=r.clientY-t.top,c=!0}return{x:a,y:l,box:c}}(t,n),u=s.left+(h&&a.left),d=s.top+(h&&a.top);let{width:f,height:g}=e;return o&&(f-=s.width+a.width,g-=s.height+a.height),{x:Math.round((l-u)/f*n.width/i),y:Math.round((c-d)/g*n.height/i)}}const en=t=>Math.round(10*t)/10;function nn(t,e,n){const i=e||1,r=Math.floor(t.height*i),o=Math.floor(t.width*i);t.height=r/i,t.width=o/i;const s=t.canvas;return s.style&&(n||!s.style.height&&!s.style.width)&&(s.style.height=`${t.height}px`,s.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||s.height!==r||s.width!==o)&&(t.currentDevicePixelRatio=i,s.height=r,s.width=o,t.ctx.setTransform(i,0,0,i,0,0),!0)}const rn=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function on(t,e){const n=function(t,e){return Ze(t).getPropertyValue(e)}(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function sn(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function an(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:"middle"===i?n<.5?t.y:e.y:"after"===i?n<1?t.y:e.y:n>0?e.y:t.y}}function ln(t,e,n,i){const r={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},s=sn(t,r,n),a=sn(r,o,n),l=sn(o,e,n),c=sn(s,a,n),h=sn(a,l,n);return sn(c,h,n)}const cn=new Map;function hn(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=cn.get(n);return i||(i=new Intl.NumberFormat(t,e),cn.set(n,i)),i}(e,n).format(t)}function un(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function dn(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)}function fn(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function gn(t){return"angle"===t?{between:ht,compare:lt,normalize:ct}:{between:dt,compare:(t,e)=>t-e,normalize:t=>t}}function pn({start:t,end:e,count:n,loop:i,style:r}){return{start:t%n,end:e%n,loop:i&&(e-t+1)%n==0,style:r}}function mn(t,e,n){if(!n)return[t];const{property:i,start:r,end:o}=n,s=e.length,{compare:a,between:l,normalize:c}=gn(i),{start:h,end:u,loop:d,style:f}=function(t,e,n){const{property:i,start:r,end:o}=n,{between:s,normalize:a}=gn(i),l=e.length;let c,h,{start:u,end:d,loop:f}=t;if(f){for(u+=l,d+=l,c=0,h=l;c<h&&s(a(e[u%l][i]),r,o);++c)u--,d--;u%=l,d%=l}return d<u&&(d+=l),{start:u,end:d,loop:f,style:t.style}}(t,e,n),g=[];let p,m,A,y=!1,b=null;for(let t=h,n=h;t<=u;++t)m=e[t%s],m.skip||(p=c(m[i]),p!==A&&(y=l(p,r,o),null===b&&(y||l(r,A,p)&&0!==a(r,A))&&(b=0===a(p,r)?t:n),null!==b&&(!y||0===a(o,p)||l(o,A,p))&&(g.push(pn({start:b,end:t,loop:d,count:s,style:f})),b=null),n=t,A=p));return null!==b&&g.push(pn({start:b,end:u,loop:d,count:s,style:f})),g}function An(t,e){const n=[],i=t.segments;for(let r=0;r<i.length;r++){const o=mn(i[r],t.points,e);o.length&&n.push(...o)}return n}function yn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function bn(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var xn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const r=e.listeners[i],o=e.duration;r.forEach((i=>i({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=p.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const r=n.items;let o,s=r.length-1,a=!1;for(;s>=0;--s)o=r[s],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(t),a=!0):(r[s]=r[r.length-1],r.pop());a&&(i.draw(),this._notify(i,n,t,"progress")),r.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const vn="transparent",_n={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const i=Yt(t||vn),r=i.valid&&Yt(e||vn);return r&&r.valid?r.mix(i,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class wn{constructor(t,e,n,i){const r=e[n];i=ve([t.to,i,r,t.from]);const o=ve([t.from,r,i]);this._active=!0,this._fn=t.fn||_n[t.type||typeof o],this._easing=mt[t.easing]||mt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const i=this._target[this._prop],r=n-this._start,o=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=ve([t.to,e,i,t.from]),this._from=ve([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,r=this._from,o=this._loop,s=this._to;let a;if(this._active=r!==s&&(o||e<n),!this._active)return this._target[i]=s,void this._notify(!0);e<0?this._target[i]=r:(a=e/n%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[i]=this._fn(r,s,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}Jt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const En=Object.keys(Jt.animation);Jt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Jt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Jt.describe("animations",{_fallback:"animation"}),Jt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class Mn{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!w(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const i=t[n];if(!w(i))return;const r={};for(const t of En)r[t]=i[t];(_(i.properties)&&i.properties||[n]).forEach((t=>{t!==n&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const r=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const r=t[i[e]];r&&r.active()&&n.push(r.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),r}_createAnimations(t,e){const n=this._properties,i=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),s=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){i.push(...this._animateOptions(t,e));continue}const c=e[l];let h=r[l];const u=n.get(l);if(h){if(u&&h.active()){h.update(u,c,s);continue}h.cancel()}u&&u.duration?(r[l]=h=new wn(u,t,l,c),i.push(h)):t[l]=c}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(xn.add(this._chart,n),!0):void 0}}function kn(t,e){const n=t&&t.options||{},i=n.reverse,r=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:i?o:r,end:i?r:o}}function Cn(t,e){const n=[],i=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=i.length;r<o;++r)n.push(i[r].index);return n}function Sn(t,e,n,i={}){const r=t.keys,o="single"===i.mode;let s,a,l,c;if(null!==e){for(s=0,a=r.length;s<a;++s){if(l=+r[s],l===n){if(i.all)continue;break}c=t.values[l],E(c)&&(o||0===e||Q(e)===Q(c))&&(e+=c)}return e}}function Bn(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Pn(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function Dn(t,e,n,i){for(const r of e.getMatchingVisibleMetas(i).reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function Fn(t,e){const{chart:n,_cachedMeta:i}=t,r=n._stacks||(n._stacks={}),{iScale:o,vScale:s,index:a}=i,l=o.axis,c=s.axis,h=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,s,i),u=e.length;let d;for(let t=0;t<u;++t){const n=e[t],{[l]:o,[c]:u}=n;d=(n._stacks||(n._stacks={}))[c]=Pn(r,h,o),d[a]=u,d._top=Dn(d,s,!0,i.type),d._bottom=Dn(d,s,!1,i.type)}}function On(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function Rn(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n]}}}const Tn=t=>"reset"===t||"none"===t,Ln=(t,e)=>e?t:Object.assign({},t);class zn{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Bn(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Rn(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),i=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,r=e.xAxisID=k(n.xAxisID,On(t,"x")),o=e.yAxisID=k(n.yAxisID,On(t,"y")),s=e.rAxisID=k(n.rAxisID,On(t,"r")),a=e.indexAxis,l=e.iAxisID=i(a,r,o,s),c=e.vAxisID=i(a,o,r,s);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(s),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Ce(this._data,this),t._stacked&&Rn(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(w(e))this._data=function(t){const e=Object.keys(t),n=new Array(e.length);let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i],n[i]={x:o,y:t[o]};return n}(e);else if(n!==e){if(n){Ce(n,this);const t=this._cachedMeta;Rn(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),ke.forEach((t=>{const e="_onData"+q(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const r=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),r}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const r=e._stacked;e._stacked=Bn(e.vScale,e),e.stack!==n.stack&&(i=!0,Rn(e),e.stack=n.stack),this._resyncElements(t),(i||r!==e._stacked)&&Fn(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:i}=this,{iScale:r,_stacked:o}=n,s=r.axis;let a,l,c,h=0===t&&e===i.length||n._sorted,u=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,c=i;else{c=_(i[t])?this.parseArrayData(n,i,t,e):w(i[t])?this.parseObjectData(n,i,t,e):this.parsePrimitiveData(n,i,t,e);const r=()=>null===l[s]||u&&l[s]<u[s];for(a=0;a<e;++a)n._parsed[a+t]=l=c[a],h&&(r()&&(h=!1),u=l);n._sorted=h}o&&Fn(this,c)}parsePrimitiveData(t,e,n,i){const{iScale:r,vScale:o}=t,s=r.axis,a=o.axis,l=r.getLabels(),c=r===o,h=new Array(i);let u,d,f;for(u=0,d=i;u<d;++u)f=u+n,h[u]={[s]:c||r.parse(l[f],f),[a]:o.parse(e[f],f)};return h}parseArrayData(t,e,n,i){const{xScale:r,yScale:o}=t,s=new Array(i);let a,l,c,h;for(a=0,l=i;a<l;++a)c=a+n,h=e[c],s[a]={x:r.parse(h[0],c),y:o.parse(h[1],c)};return s}parseObjectData(t,e,n,i){const{xScale:r,yScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l=new Array(i);let c,h,u,d;for(c=0,h=i;c<h;++c)u=c+n,d=e[u],l[c]={x:r.parse(I(d,s),u),y:o.parse(I(d,a),u)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,r=this._cachedMeta,o=e[t.axis];return Sn({keys:Cn(i,!0),values:e._stacks[t.axis]},o,r.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const r=n[e.axis];let o=null===r?NaN:r;const s=i&&n._stacks[e.axis];i&&s&&(i.values=s,o=Sn(i,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this._cachedMeta,i=n._parsed,r=n._sorted&&t===n.iScale,o=i.length,s=this._getOtherScale(t),a=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:Cn(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:n,minDefined:i,maxDefined:r}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:r?n:Number.POSITIVE_INFINITY}}(s);let u,d;function f(){d=i[u];const e=d[s.axis];return!E(d[t.axis])||c>e||h<e}for(u=0;u<o&&(f()||(this.updateRangeFromParsed(l,t,d,a),!r));++u);if(r)for(u=o-1;u>=0;--u)if(!f()){this.updateRangeFromParsed(l,t,d,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i][t.axis],E(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,r=this.getParsed(t);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:i?""+i.getLabelForValue(r[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,i,r;return w(t)?(e=t.top,n=t.right,i=t.bottom,r=t.left):e=n=i=r=t,{top:e,right:n,bottom:i,left:r,disabled:!1===t}}(k(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=kn(t,n),r=kn(e,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],r=e.chartArea,o=[],s=this._drawStart||0,a=this._drawCount||i.length-s,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,r,s,a),c=s;c<s+a;++c){const e=i[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,r))}for(c=0;c<o.length;++c)o[c].draw(t,r)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const i=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,n){return _e(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=i.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return _e(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=i,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=n,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const i="active"===e,r=this._cachedDataOpts,o=t+"-"+e,s=r[o],a=this.enableOptionSharing&&N(n);if(s)return Ln(s,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),h=i?[`${t}Hover`,"hover",t,""]:[t,""],u=l.getOptionScopes(this.getDataset(),c),d=Object.keys(Jt.elements[t]),f=l.resolveNamedOptions(u,d,(()=>this.getContext(n,i)),h);return f.$shared&&(f.$shared=a,r[o]=Object.freeze(Ln(f,a))),f}_resolveAnimations(t,e,n){const i=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,s=r[o];if(s)return s;let a;if(!1!==i.options.animation){const i=this.chart.config,r=i.datasetAnimationScopeKeys(this._type,e),o=i.getOptionScopes(this.getDataset(),r);a=i.createResolver(o,this.getContext(t,n,e))}const l=new Mn(i,a&&a.animations);return a&&a._cacheable&&(r[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Tn(t)||this.chart._animationsDisabled}updateElement(t,e,n,i){Tn(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!Tn(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const r=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,r=e.length,o=Math.min(r,i);o&&this.parse(0,o),r>i?this._insertElements(i,r-i,t):r<i&&this._removeElements(r,i-r)}_insertElements(t,e,n=!0){const i=this._cachedMeta,r=i.data,o=t+e;let s;const a=t=>{for(t.length+=e,s=t.length-1;s>=o;s--)t[s]=t[s-e]};for(a(r),s=t;s<o;++s)r[s]=new this.dataElementType;this._parsing&&a(i._parsed),this.parse(t,e),n&&this.updateElements(r,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&Rn(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function In(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,r=n.length;e<r;e++)i=i.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=Se(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,r,o,s,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(N(s)&&(a=Math.min(a,Math.abs(o-s)||a)),s=o)};for(i=0,r=n.length;i<r;++i)o=e.getPixelForValue(n[i]),l();for(s=void 0,i=0,r=e.ticks.length;i<r;++i)o=e.getPixelForTick(i),l();return a}function qn(t,e,n,i){return _(t)?function(t,e,n,i){const r=n.parse(t[0],i),o=n.parse(t[1],i),s=Math.min(r,o),a=Math.max(r,o);let l=s,c=a;Math.abs(s)>Math.abs(a)&&(l=a,c=s),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:r,end:o,min:s,max:a}}(t,e,n,i):e[n.axis]=n.parse(t,i),e}function Nn(t,e,n,i){const r=t.iScale,o=t.vScale,s=r.getLabels(),a=r===o,l=[];let c,h,u,d;for(c=n,h=n+i;c<h;++c)d=e[c],u={},u[r.axis]=a||r.parse(s[c],c),l.push(qn(d,u,o,c));return l}function jn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Vn(t,e,n,i){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);const{start:s,end:a,reverse:l,top:c,bottom:h}=function(t){let e,n,i,r,o;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(r="end",o="start"):(r="start",o="end"),{start:n,end:i,reverse:e,top:r,bottom:o}}(t);"middle"===r&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?r=c:(n._bottom||0)===i?r=h:(o[Wn(h,s,a,l)]=!0,r=c)),o[Wn(r,s,a,l)]=!0,t.borderSkipped=o}function Wn(t,e,n,i){var r,o,s;return i?(s=n,t=Hn(t=(r=t)===(o=e)?s:r===s?o:r,n,e)):t=Hn(t,e,n),t}function Hn(t,e,n){return"start"===t?e:"end"===t?n:t}function $n(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}zn.defaults={},zn.prototype.datasetElementType=null,zn.prototype.dataElementType=null;class Un extends zn{parsePrimitiveData(t,e,n,i){return Nn(t,e,n,i)}parseArrayData(t,e,n,i){return Nn(t,e,n,i)}parseObjectData(t,e,n,i){const{iScale:r,vScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l="x"===r.axis?s:a,c="x"===o.axis?s:a,h=[];let u,d,f,g;for(u=n,d=n+i;u<d;++u)g=e[u],f={},f[r.axis]=r.parse(I(g,l),u),h.push(qn(I(g,c),f,o,u));return h}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const r=n._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,r=this.getParsed(t),o=r._custom,s=jn(o)?"["+o.start+", "+o.end+"]":""+i.getLabelForValue(r[i.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:s}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,i){const r="reset"===i,{index:o,_cachedMeta:{vScale:s}}=this,a=s.getBasePixel(),l=s.isHorizontal(),c=this._getRuler(),h=this.resolveDataElementOptions(e,i),u=this.getSharedOptions(h),d=this.includeOptions(i,u);this.updateSharedOptions(u,i,h);for(let h=e;h<e+n;h++){const e=this.getParsed(h),n=r||v(e[s.axis])?{base:a,head:a}:this._calculateBarValuePixels(h),f=this._calculateBarIndexPixels(h,c),g=(e._stacks||{})[s.axis],p={horizontal:l,base:n.base,enableBorderRadius:!g||jn(e._custom)||o===g._top||o===g._bottom,x:l?n.head:f.center,y:l?f.center:n.head,height:l?f.size:Math.abs(n.size),width:l?Math.abs(n.size):f.size};d&&(p.options=u||this.resolveDataElementOptions(h,t[h].active?"active":i));const m=p.options||t[h].options;Vn(p,m,g,o),$n(p,m,c.ratio),this.updateElement(t[h],h,p,i)}}_getStacks(t,e){const n=this._cachedMeta.iScale,i=n.getMatchingVisibleMetas(this._type),r=n.options.stacked,o=i.length,s=[];let a,l;for(a=0;a<o;++a)if(l=i[a],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(v(t)||isNaN(t))continue}if((!1===r||-1===s.indexOf(l.stack)||void 0===r&&void 0===l.stack)&&s.push(l.stack),l.index===t)break}return s.length||s.push(void 0),s}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),r=void 0!==e?i.indexOf(e):-1;return-1===r?i.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let r,o;for(r=0,o=e.data.length;r<o;++r)i.push(n.getPixelForValue(this.getParsed(r)[n.axis],r));const s=t.barThickness;return{min:s||In(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n},options:{base:i,minBarLength:r}}=this,o=i||0,s=this.getParsed(t),a=s._custom,l=jn(a);let c,h,u=s[e.axis],d=0,f=n?this.applyStack(e,s,n):u;f!==u&&(d=f-u,f=u),l&&(u=a.barStart,f=a.barEnd-a.barStart,0!==u&&Q(u)!==Q(a.barEnd)&&(d=0),d+=u);const g=v(i)||l?d:i;let p=e.getPixelForValue(g);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(d+f):p,h=c-p,Math.abs(h)<r&&(h=function(t,e,n){return 0!==t?Q(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(h,e,o)*r,u===o&&(p-=h/2),c=p+h),p===e.getPixelForValue(o)){const t=Q(h)*e.getLineWidthForValue(o)/2;p+=t,h-=t}return{size:h,base:p,head:c,center:c+h/2}}_calculateBarIndexPixels(t,e){const n=e.scale,i=this.options,r=i.skipNull,o=k(i.maxBarThickness,1/0);let s,a;if(e.grouped){const n=r?this._getStackCount(t):e.stackCount,l="flex"===i.barThickness?function(t,e,n,i){const r=e.pixels,o=r[t];let s=t>0?r[t-1]:null,a=t<r.length-1?r[t+1]:null;const l=n.categoryPercentage;null===s&&(s=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-s);const c=o-(o-Math.min(s,a))/2*l;return{chunk:Math.abs(a-s)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,i,n):function(t,e,n,i){const r=n.barThickness;let o,s;return v(r)?(o=e.min*n.categoryPercentage,s=n.barPercentage):(o=r*i,s=1),{chunk:o/i,ratio:s,start:e.pixels[t]-o/2}}(t,e,i,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);s=l.start+l.chunk*c+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else s=n.getPixelForValue(this.getParsed(t)[n.axis],t),a=Math.min(o,e.min*e.ratio);return{base:s-a/2,head:s+a/2,center:s,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let r=0;for(;r<i;++r)null!==this.getParsed(r)[e.axis]&&n[r].draw(this._ctx)}}Un.id="bar",Un.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Un.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Yn extends zn{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,i){const r=super.parsePrimitiveData(t,e,n,i);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+n).radius;return r}parseArrayData(t,e,n,i){const r=super.parseArrayData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=k(i[2],this.resolveDataElementOptions(t+n).radius)}return r}parseObjectData(t,e,n,i){const r=super.parseObjectData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=k(i&&i.r&&+i.r,this.resolveDataElementOptions(t+n).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:n,yScale:i}=e,r=this.getParsed(t),o=n.getLabelForValue(r.x),s=i.getLabelForValue(r.y),a=r._custom;return{label:e.label,value:"("+o+", "+s+(a?", "+a:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:s}=this._cachedMeta,a=this.resolveDataElementOptions(e,i),l=this.getSharedOptions(a),c=this.includeOptions(i,l),h=o.axis,u=s.axis;for(let a=e;a<e+n;a++){const e=t[a],n=!r&&this.getParsed(a),l={},d=l[h]=r?o.getPixelForDecimal(.5):o.getPixelForValue(n[h]),f=l[u]=r?s.getBasePixel():s.getPixelForValue(n[u]);l.skip=isNaN(d)||isNaN(f),c&&(l.options=this.resolveDataElementOptions(a,e.active?"active":i),r&&(l.options.radius=0)),this.updateElement(e,a,l,i)}this.updateSharedOptions(l,i,a)}resolveDataElementOptions(t,e){const n=this.getParsed(t);let i=super.resolveDataElementOptions(t,e);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const r=i.radius;return"active"!==e&&(i.radius=0),i.radius+=k(n&&n._custom,r),i}}Yn.id="bubble",Yn.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Yn.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Xn extends zn{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let r,o,s=t=>+n[t];if(w(n[t])){const{key:t="value"}=this._parsing;s=e=>+I(n[e],t)}for(r=t,o=t+e;r<o;++r)i._parsed[r]=s(r)}}_getRotation(){return it(this.options.rotation-90)}_getCircumference(){return it(this.options.circumference)}_getRotationExtents(){let t=H,e=-H;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const i=this.chart.getDatasetMeta(n).controller,r=i._getRotation(),o=i._getCircumference();t=Math.min(t,r),e=Math.max(e,r+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,i=this._cachedMeta,r=i.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,s=Math.max((Math.min(n.width,n.height)-o)/2,0),a=Math.min((c=s,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/c),1);var l,c;const h=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:g,offsetX:p,offsetY:m}=function(t,e,n){let i=1,r=1,o=0,s=0;if(e<H){const a=t,l=a+e,c=Math.cos(a),h=Math.sin(a),u=Math.cos(l),d=Math.sin(l),f=(t,e,i)=>ht(t,a,l,!0)?1:Math.max(e,e*n,i,i*n),g=(t,e,i)=>ht(t,a,l,!0)?-1:Math.min(e,e*n,i,i*n),p=f(0,c,u),m=f(X,h,d),A=g(W,c,u),y=g(W+X,h,d);i=(p-A)/2,r=(m-y)/2,o=-(p+A)/2,s=-(m+y)/2}return{ratioX:i,ratioY:r,offsetX:o,offsetY:s}}(d,u,a),A=(n.width-o)/f,y=(n.height-o)/g,b=Math.max(Math.min(A,y)/2,0),x=C(this.options.radius,b),v=(x-Math.max(x*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*x,this.offsetY=m*x,i.total=this.calculateTotal(),this.outerRadius=x-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*h,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const n=this.options,i=this._cachedMeta,r=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:this.calculateCircumference(i._parsed[t]*r/H)}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,s=o.chartArea,a=o.options.animation,l=(s.left+s.right)/2,c=(s.top+s.bottom)/2,h=r&&a.animateScale,u=h?0:this.innerRadius,d=h?0:this.outerRadius,f=this.resolveDataElementOptions(e,i),g=this.getSharedOptions(f),p=this.includeOptions(i,g);let m,A=this._getRotation();for(m=0;m<e;++m)A+=this._circumference(m,r);for(m=e;m<e+n;++m){const e=this._circumference(m,r),n=t[m],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:A,endAngle:A+e,circumference:e,outerRadius:d,innerRadius:u};p&&(o.options=g||this.resolveDataElementOptions(m,n.active?"active":i)),A+=e,this.updateElement(n,m,o,i)}this.updateSharedOptions(g,i,f)}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,i=0;for(n=0;n<e.length;n++){const r=t._parsed[n];null===r||isNaN(r)||!this.chart.getDataVisibility(n)||e[n].hidden||(i+=Math.abs(r))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?H*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=hn(e._parsed[t],n.options.locale);return{label:i[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const n=this.chart;let i,r,o,s,a;if(!t)for(i=0,r=n.data.datasets.length;i<r;++i)if(n.isDatasetVisible(i)){o=n.getDatasetMeta(i),t=o.data,s=o.controller;break}if(!t)return 0;for(i=0,r=t.length;i<r;++i)a=s.resolveDataElementOptions(i),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,i=t.length;n<i;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(k(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Xn.id="doughnut",Xn.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Xn.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Xn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const n=": "+t.formattedValue;return _(e)?(e=e.slice(),e[0]+=n):e+=n,e}}}}};class Gn extends zn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:i=[],_dataset:r}=e,o=this.chart._animationsDisabled;let{start:s,count:a}=function(t,e,n){const i=e.length;let r=0,o=i;if(t._sorted){const{iScale:s,_parsed:a}=t,l=s.axis,{min:c,max:h,minDefined:u,maxDefined:d}=s.getUserBounds();u&&(r=ut(Math.min(Ee(a,s.axis,c).lo,n?i:Ee(e,l,s.getPixelForValue(c)).lo),0,i-1)),o=d?ut(Math.max(Ee(a,s.axis,h).hi+1,n?0:Ee(e,l,s.getPixelForValue(h)).hi+1),r,i)-r:i-r}return{start:r,count:o}}(e,i,o);this._drawStart=s,this._drawCount=a,function(t){const{xScale:e,yScale:n,_scaleRanges:i}=t,r={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!i)return t._scaleRanges=r,!0;const o=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,r),o}(e)&&(s=0,a=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=i;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:l},t),this.updateElements(i,s,a,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:s,_stacked:a,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,i),h=this.getSharedOptions(c),u=this.includeOptions(i,h),d=o.axis,f=s.axis,{spanGaps:g,segment:p}=this.options,m=tt(g)?g:Number.POSITIVE_INFINITY,A=this.chart._animationsDisabled||r||"none"===i;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=this.getParsed(c),g=A?e:{},b=v(n[f]),x=g[d]=o.getPixelForValue(n[d],c),_=g[f]=r||b?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,n,a):n[f],c);g.skip=isNaN(x)||isNaN(_)||b,g.stop=c>0&&n[d]-y[d]>m,p&&(g.parsed=n,g.raw=l.data[c]),u&&(g.options=h||this.resolveDataElementOptions(c,e.active?"active":i)),A||this.updateElement(e,c,g,i),y=n}this.updateSharedOptions(h,i,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return n;const r=i[0].size(this.resolveDataElementOptions(0)),o=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,r,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Gn.id="line",Gn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Gn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Kn extends zn{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=hn(e._parsed[t].r,n.options.locale);return{label:i[t]||"",value:r}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(i/2,0),o=(r-Math.max(n.cutoutPercentage?r/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,s=this.getDataset(),a=o.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,h=l.yCenter,u=l.getIndexAngle(0)-.5*W;let d,f=u;const g=360/this.countVisibleElements();for(d=0;d<e;++d)f+=this._computeAngle(d,i,g);for(d=e;d<e+n;d++){const e=t[d];let n=f,p=f+this._computeAngle(d,i,g),m=o.getDataVisibility(d)?l.getDistanceFromCenterForValue(s.data[d]):0;f=p,r&&(a.animateScale&&(m=0),a.animateRotate&&(n=p=u));const A={x:c,y:h,innerRadius:0,outerRadius:m,startAngle:n,endAngle:p,options:this.resolveDataElementOptions(d,e.active?"active":i)};this.updateElement(e,d,A,i)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let n=0;return e.data.forEach(((e,i)=>{!isNaN(t.data[i])&&this.chart.getDataVisibility(i)&&n++})),n}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?it(this.resolveDataElementOptions(t,e).angle||n):0}}Kn.id="polarArea",Kn.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Kn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Zn extends Xn{}Zn.id="pie",Zn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Qn extends zn{getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}update(t){const e=this._cachedMeta,n=e.dataset,i=e.data||[],r=e.iScale.getLabels();if(n.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:r.length===i.length,options:e};this.updateElement(n,void 0,o,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,n,i){const r=this.getDataset(),o=this._cachedMeta.rScale,s="reset"===i;for(let a=e;a<e+n;a++){const e=t[a],n=this.resolveDataElementOptions(a,e.active?"active":i),l=o.getPointPositionForValue(a,r.data[a]),c=s?o.xCenter:l.x,h=s?o.yCenter:l.y,u={x:c,y:h,angle:l.angle,skip:isNaN(c)||isNaN(h),options:n};this.updateElement(e,a,u,i)}}}Qn.id="radar",Qn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Qn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Jn extends Gn{}Jn.id="scatter",Jn.defaults={showLine:!1,fill:!1},Jn.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var ti=Object.freeze({__proto__:null,BarController:Un,BubbleController:Yn,DoughnutController:Xn,LineController:Gn,PolarAreaController:Kn,PieController:Zn,RadarController:Qn,ScatterController:Jn});function ei(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class ni{constructor(t){this.options=t||{}}formats(){return ei()}parse(t,e){return ei()}format(t,e){return ei()}add(t,e,n){return ei()}diff(t,e,n){return ei()}startOf(t,e,n){return ei()}endOf(t,e){return ei()}}ni.override=function(t){Object.assign(ni.prototype,t)};var ii={_date:ni};function ri(t,e){return"native"in t?{x:t.x,y:t.y}:tn(t,e)}function oi(t,e,n,i){const{controller:r,data:o,_sorted:s}=t,a=r._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&s&&o.length){const t=a._reversePixels?Me:Ee;if(!i)return t(o,e,n);if(r._sharedOptions){const i=o[0],r="function"==typeof i.getRange&&i.getRange(e);if(r){const i=t(o,e,n-r),s=t(o,e,n+r);return{lo:i.lo,hi:s.hi}}}}return{lo:0,hi:o.length-1}}function si(t,e,n,i,r){const o=t.getSortedVisibleDatasetMetas(),s=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:a}=o[t],{lo:l,hi:c}=oi(o[t],e,s,r);for(let t=l;t<=c;++t){const e=a[t];e.skip||i(e,n,t)}}}function ai(t,e,n,i){const r=[];return oe(e,t.chartArea,t._minPadding)?(si(t,n,e,(function(t,n,o){t.inRange(e.x,e.y,i)&&r.push({element:t,datasetIndex:n,index:o})}),!0),r):r}function li(t,e,n,i,r){return oe(e,t.chartArea,t._minPadding)?"r"!==n||i?function(t,e,n,i,r){let o=[];const s=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const r=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(n);let a=Number.POSITIVE_INFINITY;return si(t,n,e,(function(n,l,c){const h=n.inRange(e.x,e.y,r);if(i&&!h)return;const u=n.getCenterPoint(r);if(!oe(u,t.chartArea,t._minPadding)&&!h)return;const d=s(e,u);d<a?(o=[{element:n,datasetIndex:l,index:c}],a=d):d===a&&o.push({element:n,datasetIndex:l,index:c})})),o}(t,e,n,i,r):function(t,e,n,i){let r=[];return si(t,n,e,(function(t,n,o){const{startAngle:s,endAngle:a}=t.getProps(["startAngle","endAngle"],i),{angle:l}=st(t,{x:e.x,y:e.y});ht(l,s,a)&&r.push({element:t,datasetIndex:n,index:o})})),r}(t,e,n,r):[]}function ci(t,e,n,i){const r=ri(e,t),o=[],s=n.axis,a="x"===s?"inXRange":"inYRange";let l=!1;return function(t,e){const n=t.getSortedVisibleDatasetMetas();let i,r,o;for(let t=0,s=n.length;t<s;++t){({index:i,data:r}=n[t]);for(let t=0,n=r.length;t<n;++t)o=r[t],o.skip||e(o,i,t)}}(t,((t,e,n)=>{t[a](r[s],i)&&o.push({element:t,datasetIndex:e,index:n}),t.inRange(r.x,r.y,i)&&(l=!0)})),n.intersect&&!l?[]:o}var hi={modes:{index(t,e,n,i){const r=ri(e,t),o=n.axis||"x",s=n.intersect?ai(t,r,o,i):li(t,r,o,!1,i),a=[];return s.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=s[0].index,n=t.data[e];n&&!n.skip&&a.push({element:n,datasetIndex:t.index,index:e})})),a):[]},dataset(t,e,n,i){const r=ri(e,t),o=n.axis||"xy";let s=n.intersect?ai(t,r,o,i):li(t,r,o,!1,i);if(s.length>0){const e=s[0].datasetIndex,n=t.getDatasetMeta(e).data;s=[];for(let t=0;t<n.length;++t)s.push({element:n[t],datasetIndex:e,index:t})}return s},point:(t,e,n,i)=>ai(t,ri(e,t),n.axis||"xy",i),nearest:(t,e,n,i)=>li(t,ri(e,t),n.axis||"xy",n.intersect,i),x:(t,e,n,i)=>ci(t,e,{axis:"x",intersect:n.intersect},i),y:(t,e,n,i)=>ci(t,e,{axis:"y",intersect:n.intersect},i)}};const ui=["left","top","right","bottom"];function di(t,e){return t.filter((t=>t.pos===e))}function fi(t,e){return t.filter((t=>-1===ui.indexOf(t.pos)&&t.box.axis===e))}function gi(t,e){return t.sort(((t,n)=>{const i=e?n:t,r=e?t:n;return i.weight===r.weight?i.index-r.index:i.weight-r.weight}))}function pi(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function mi(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Ai(t,e,n,i){const{pos:r,box:o}=n,s=t.maxPadding;if(!w(r)){n.size&&(t[r]-=n.size);const e=i[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[r]+=n.size}o.getPadding&&mi(s,o.getPadding());const a=Math.max(0,e.outerWidth-pi(s,t,"left","right")),l=Math.max(0,e.outerHeight-pi(s,t,"top","bottom")),c=a!==t.w,h=l!==t.h;return t.w=a,t.h=l,n.horizontal?{same:c,other:h}:{same:h,other:c}}function yi(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function bi(t,e,n,i){const r=[];let o,s,a,l,c,h;for(o=0,s=t.length,c=0;o<s;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,yi(a.horizontal,e));const{same:s,other:u}=Ai(e,n,a,i);c|=s&&r.length,h=h||u,l.fullSize||r.push(a)}return c&&bi(r,e,n,i)||h}function xi(t,e,n,i,r){t.top=n,t.left=e,t.right=e+i,t.bottom=n+r,t.width=i,t.height=r}function vi(t,e,n,i){const r=n.padding;let{x:o,y:s}=e;for(const a of t){const t=a.box,l=i[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const i=e.w*c,o=l.size||t.height;N(l.start)&&(s=l.start),t.fullSize?xi(t,r.left,s,n.outerWidth-r.right-r.left,o):xi(t,e.left+l.placed,s,i,o),l.start=s,l.placed+=i,s=t.bottom}else{const i=e.h*c,s=l.size||t.width;N(l.start)&&(o=l.start),t.fullSize?xi(t,o,r.top,s,n.outerHeight-r.bottom-r.top):xi(t,o,e.top+l.placed,s,i),l.start=o,l.placed+=i,o=t.right}}e.x=o,e.y=s}Jt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var _i={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,i){if(!t)return;const r=be(t.options.layout.padding),o=Math.max(e-r.width,0),s=Math.max(n-r.height,0),a=function(t){const e=function(t){const e=[];let n,i,r,o,s,a;for(n=0,i=(t||[]).length;n<i;++n)r=t[n],({position:o,options:{stack:s,stackWeight:a=1}}=r),e.push({index:n,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:s&&o+s,stackWeight:a});return e}(t),n=gi(e.filter((t=>t.box.fullSize)),!0),i=gi(di(e,"left"),!0),r=gi(di(e,"right")),o=gi(di(e,"top"),!0),s=gi(di(e,"bottom")),a=fi(e,"x"),l=fi(e,"y");return{fullSize:n,leftAndTop:i.concat(o),rightAndBottom:r.concat(l).concat(s).concat(a),chartArea:di(e,"chartArea"),vertical:i.concat(r).concat(l),horizontal:o.concat(s).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;B(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,u=Object.freeze({outerWidth:e,outerHeight:n,padding:r,availableWidth:o,availableHeight:s,vBoxMaxWidth:o/2/h,hBoxMaxHeight:s/2}),d=Object.assign({},r);mi(d,be(i));const f=Object.assign({maxPadding:d,w:o,h:s,x:r.left,y:r.top},r),g=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:r}=n;if(!t||!ui.includes(i))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:r}=e;let o,s,a;for(o=0,s=t.length;o<s;++o){a=t[o];const{fullSize:s}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*i:s&&e.availableWidth,a.height=r):(a.width=i,a.height=c?c*r:s&&e.availableHeight)}return n}(l.concat(c),u);bi(a.fullSize,f,u,g),bi(l,f,u,g),bi(c,f,u,g)&&bi(l,f,u,g),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(f),vi(a.leftAndTop,f,u,g),f.x+=f.w,f.y+=f.h,vi(a.rightAndBottom,f,u,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},B(a.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class wi{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class Ei extends wi{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Mi={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ki=t=>null===t||""===t,Ci=!!rn&&{passive:!0};function Si(t,e,n){t.canvas.removeEventListener(e,n,Ci)}function Bi(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function Pi(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Bi(n.addedNodes,i),e=e&&!Bi(n.removedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}function Di(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Bi(n.removedNodes,i),e=e&&!Bi(n.addedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}const Fi=new Map;let Oi=0;function Ri(){const t=window.devicePixelRatio;t!==Oi&&(Oi=t,Fi.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Ti(t,e,n){const i=t.canvas,r=i&&Ge(i);if(!r)return;const o=m(((t,e)=>{const i=r.clientWidth;n(t,e),i<r.clientWidth&&n()}),window),s=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||o(n,i)}));return s.observe(r),function(t,e){Fi.size||window.addEventListener("resize",Ri),Fi.set(t,e)}(t,o),s}function Li(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Fi.delete(t),Fi.size||window.removeEventListener("resize",Ri)}(t)}function zi(t,e,n){const i=t.canvas,r=m((e=>{null!==t.ctx&&n(function(t,e){const n=Mi[t.type]||t.type,{x:i,y:r}=tn(t,e);return{type:n,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,n){t.addEventListener(e,n,Ci)}(i,e,r),r}class Ii extends wi{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ki(r)){const e=on(t,"width");void 0!==e&&(t.width=e)}if(ki(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=on(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const i=n[t];v(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=n.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),r={attach:Pi,detach:Di,resize:Ti}[e]||zi;i[e]=r(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:Li,detach:Li,resize:Li}[e]||Si)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,i){return function(t,e,n,i){const r=Ze(t),o=Je(r,"margin"),s=Ke(r.maxWidth,t,"clientWidth")||U,a=Ke(r.maxHeight,t,"clientHeight")||U,l=function(t,e,n){let i,r;if(void 0===e||void 0===n){const o=Ge(t);if(o){const t=o.getBoundingClientRect(),s=Ze(o),a=Je(s,"border","width"),l=Je(s,"padding");e=t.width-l.width-a.width,n=t.height-l.height-a.height,i=Ke(s.maxWidth,o,"clientWidth"),r=Ke(s.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||U,maxHeight:r||U}}(t,e,n);let{width:c,height:h}=l;if("content-box"===r.boxSizing){const t=Je(r,"border","width"),e=Je(r,"padding");c-=e.width+t.width,h-=e.height+t.height}return c=Math.max(0,c-o.width),h=Math.max(0,i?Math.floor(c/i):h-o.height),c=en(Math.min(c,s,l.maxWidth)),h=en(Math.min(h,a,l.maxHeight)),c&&!h&&(h=en(c/2)),{width:c,height:h}}(t,e,n,i)}isAttached(t){const e=Ge(t);return!(!e||!e.isConnected)}}class qi{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return tt(this.x)&&tt(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}qi.defaults={},qi.defaultRoutes=void 0;const Ni={values:t=>_(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let r,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const s=Z(Math.abs(o)),a=Math.max(Math.min(-1*Math.floor(s),20),0),l={notation:r,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),hn(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=t/Math.pow(10,Math.floor(Z(t)));return 1===i||2===i||5===i?Ni.numeric.call(this,t,e,n):""}};var ji={formatters:Ni};function Vi(t,e,n,i,r){const o=k(i,0),s=Math.min(k(r,t.length),t.length);let a,l,c,h=0;for(n=Math.ceil(n),r&&(a=r-i,n=a/Math.floor(a/n)),c=o;c<0;)h++,c=Math.round(o+h*n);for(l=Math.max(o,0);l<s;l++)l===c&&(e.push(t[l]),h++,c=Math.round(o+h*n))}Jt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:ji.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Jt.route("scale.ticks","color","","color"),Jt.route("scale.grid","color","","borderColor"),Jt.route("scale.grid","borderColor","","borderColor"),Jt.route("scale.title","color","","color"),Jt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Jt.describe("scales",{_fallback:"scale"}),Jt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Wi=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function Hi(t,e){const n=[],i=t.length/e,r=t.length;let o=0;for(;o<r;o+=i)n.push(t[Math.floor(o)]);return n}function $i(t,e,n){const i=t.ticks.length,r=Math.min(e,i-1),o=t._startPixel,s=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(r);if(!(n&&(l=1===i?Math.max(c-o,s-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(r-1))/2,c+=r<e?l:-l,c<o-a||c>s+a)))return c}function Ui(t){return t.drawTicks?t.tickLength:0}function Yi(t,e){if(!t.display)return 0;const n=xe(t.font,e),i=be(t.padding);return(_(t.text)?t.text.length:1)*n.lineHeight+i.height}function Xi(t,e,n){let i=A(t);return(n&&"right"!==e||!n&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class Gi extends qi{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:i}=this;return t=M(t,Number.POSITIVE_INFINITY),e=M(e,Number.NEGATIVE_INFINITY),n=M(n,Number.POSITIVE_INFINITY),i=M(i,Number.NEGATIVE_INFINITY),{min:M(t,n),max:M(e,i),minDefined:E(t),maxDefined:E(e)}}getMinMax(t){let e,{min:n,max:i,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:n,max:i};const s=this.getMatchingVisibleMetas();for(let a=0,l=s.length;a<l;++a)e=s[a].controller.getMinMax(this,t),r||(n=Math.min(n,e.min)),o||(i=Math.max(i,e.max));return n=o&&n>i?i:n,i=r&&n>i?n:i,{min:M(n,M(i,n)),max:M(i,M(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){S(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:i,grace:r,ticks:o}=this.options,s=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:i,max:r}=t,o=C(e,(r-i)/2),s=(t,e)=>n&&0===t?0:t+e;return{min:s(i,-Math.abs(o)),max:s(r,o)}}(this,r,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=s<this.ticks.length;this._convertTicksToLabels(a?Hi(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const n=t.options.ticks,i=n.maxTicksLimit||function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),r=t._maxLength/n;return Math.floor(Math.min(i,r))}(t),r=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],o=r.length,s=r[0],a=r[o-1],l=[];if(o>i)return function(t,e,n,i){let r,o=0,s=n[0];for(i=Math.ceil(i),r=0;r<t.length;r++)r===s&&(e.push(t[r]),o++,s=n[o*i])}(e,l,r,o/i),l;const c=function(t,e,n){const i=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),r=e.length/n;if(!i)return Math.max(r,1);const o=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(r,e,i);if(o>0){let t,n;const i=o>1?Math.round((a-s)/(o-1)):null;for(Vi(e,l,c,v(i)?0:s-i,s),t=0,n=o-1;t<n;t++)Vi(e,l,c,r[t],r[t+1]);return Vi(e,l,c,a,v(i)?e.length:a+i),l}return Vi(e,l,c),l}(this,this.ticks),this._labelSizes=null),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){S(this.options.afterUpdate,[this])}beforeSetDimensions(){S(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){S(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),S(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){S(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,i,r;for(n=0,i=t.length;n<i;n++)r=t[n],r.label=S(e.callback,[r.value,n,t],this)}afterTickToLabelConversion(){S(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){S(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=this.ticks.length,i=e.minRotation||0,r=e.maxRotation;let o,s,a,l=i;if(!this._isVisible()||!e.display||i>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const c=this._getLabelSizes(),h=c.widest.width,u=c.highest.height,d=ut(this.chart.width-h,0,this.maxWidth);o=t.offset?this.maxWidth/n:d/(n-1),h+6>o&&(o=d/(n-(t.offset?.5:1)),s=this.maxHeight-Ui(t.grid)-e.padding-Yi(t.title,this.chart.options.font),a=Math.sqrt(h*h+u*u),l=rt(Math.min(Math.asin(ut((c.highest.height+6)/o,-1,1)),Math.asin(ut(s/a,-1,1))-Math.asin(ut(u/a,-1,1)))),l=Math.max(i,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){S(this.options.afterCalculateLabelRotation,[this])}beforeFit(){S(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:i,grid:r}}=this,o=this._isVisible(),s=this.isHorizontal();if(o){const o=Yi(i,e.options.font);if(s?(t.width=this.maxWidth,t.height=Ui(r)+o):(t.height=this.maxHeight,t.width=Ui(r)+o),n.display&&this.ticks.length){const{first:e,last:i,widest:r,highest:o}=this._getLabelSizes(),a=2*n.padding,l=it(this.labelRotation),c=Math.cos(l),h=Math.sin(l);if(s){const e=n.mirror?0:h*r.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=n.mirror?0:c*r.width+h*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,i,h,c)}}this._handleMargins(),s?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:r,padding:o},position:s}=this.options,a=0!==this.labelRotation,l="top"!==s&&"x"===this.axis;if(this.isHorizontal()){const s=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,u=0;a?l?(h=i*t.width,u=n*e.height):(h=n*t.height,u=i*e.width):"start"===r?u=e.width:"end"===r?h=t.width:(h=t.width/2,u=e.width/2),this.paddingLeft=Math.max((h-s+o)*this.width/(this.width-s),0),this.paddingRight=Math.max((u-c+o)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===r?(n=0,i=t.height):"end"===r&&(n=e.height,i=0),this.paddingTop=n+o,this.paddingBottom=i+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){S(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)v(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=Hi(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length)}return t}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:i}=this,r=[],o=[];let s,a,l,c,h,u,d,f,g,p,m,A=0,y=0;for(s=0;s<e;++s){if(c=t[s].label,h=this._resolveTickFontOptions(s),n.font=u=h.string,d=i[u]=i[u]||{data:{},gc:[]},f=h.lineHeight,g=p=0,v(c)||_(c)){if(_(c))for(a=0,l=c.length;a<l;++a)m=c[a],v(m)||_(m)||(g=te(n,d.data,d.gc,g,m),p+=f)}else g=te(n,d.data,d.gc,g,c),p=f;r.push(g),o.push(p),A=Math.max(g,A),y=Math.max(p,y)}!function(t,e){B(t,(t=>{const n=t.gc,i=n.length/2;let r;if(i>e){for(r=0;r<i;++r)delete t.data[n[r]];n.splice(0,i)}}))}(i,e);const b=r.indexOf(A),x=o.indexOf(y),w=t=>({width:r[t]||0,height:o[t]||0});return{first:w(0),last:w(e-1),widest:w(b),highest:w(x),widths:r,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return ut(this._alignToPixels?ne(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return _e(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=_e(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=it(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,s=r?r.widest.width+o:0,a=r?r.highest.height+o:0;return this.isHorizontal()?a*n>s*i?s/n:a/i:a*i<s*n?a/n:s/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,i=this.options,{grid:r,position:o}=i,s=r.offset,a=this.isHorizontal(),l=this.ticks.length+(s?1:0),c=Ui(r),h=[],u=r.setContext(this.getContext()),d=u.drawBorder?u.borderWidth:0,f=d/2,g=function(t){return ne(n,t,d)};let p,m,A,y,b,x,v,_,E,M,C,S;if("top"===o)p=g(this.bottom),x=this.bottom-c,_=p-f,M=g(t.top)+f,S=t.bottom;else if("bottom"===o)p=g(this.top),M=t.top,S=g(t.bottom)-f,x=p+f,_=this.top+c;else if("left"===o)p=g(this.right),b=this.right-c,v=p-f,E=g(t.left)+f,C=t.right;else if("right"===o)p=g(this.left),E=t.left,C=g(t.right)-f,b=p+f,v=this.left+c;else if("x"===e){if("center"===o)p=g((t.top+t.bottom)/2+.5);else if(w(o)){const t=Object.keys(o)[0],e=o[t];p=g(this.chart.scales[t].getPixelForValue(e))}M=t.top,S=t.bottom,x=p+f,_=x+c}else if("y"===e){if("center"===o)p=g((t.left+t.right)/2);else if(w(o)){const t=Object.keys(o)[0],e=o[t];p=g(this.chart.scales[t].getPixelForValue(e))}b=p-f,v=b-c,E=t.left,C=t.right}const B=k(i.ticks.maxTicksLimit,l),P=Math.max(1,Math.ceil(l/B));for(m=0;m<l;m+=P){const t=r.setContext(this.getContext(m)),e=t.lineWidth,i=t.color,o=r.borderDash||[],l=t.borderDashOffset,c=t.tickWidth,u=t.tickColor,d=t.tickBorderDash||[],f=t.tickBorderDashOffset;A=$i(this,m,s),void 0!==A&&(y=ne(n,A,e),a?b=v=E=C=y:x=_=M=S=y,h.push({tx1:b,ty1:x,tx2:v,ty2:_,x1:E,y1:M,x2:C,y2:S,width:e,color:i,borderDash:o,borderDashOffset:l,tickWidth:c,tickColor:u,tickBorderDash:d,tickBorderDashOffset:f}))}return this._ticksLength=l,this._borderValue=p,h}_computeLabelItems(t){const e=this.axis,n=this.options,{position:i,ticks:r}=n,o=this.isHorizontal(),s=this.ticks,{align:a,crossAlign:l,padding:c,mirror:h}=r,u=Ui(n.grid),d=u+c,f=h?-c:d,g=-it(this.labelRotation),p=[];let m,A,y,b,x,v,E,M,k,C,S,B,P="middle";if("top"===i)v=this.bottom-f,E=this._getXAxisLabelAlignment();else if("bottom"===i)v=this.top+f,E=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(u);E=t.textAlign,x=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(u);E=t.textAlign,x=t.x}else if("x"===e){if("center"===i)v=(t.top+t.bottom)/2+d;else if(w(i)){const t=Object.keys(i)[0],e=i[t];v=this.chart.scales[t].getPixelForValue(e)+d}E=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)x=(t.left+t.right)/2-d;else if(w(i)){const t=Object.keys(i)[0],e=i[t];x=this.chart.scales[t].getPixelForValue(e)}E=this._getYAxisLabelAlignment(u).textAlign}"y"===e&&("start"===a?P="top":"end"===a&&(P="bottom"));const D=this._getLabelSizes();for(m=0,A=s.length;m<A;++m){y=s[m],b=y.label;const t=r.setContext(this.getContext(m));M=this.getPixelForTick(m)+r.labelOffset,k=this._resolveTickFontOptions(m),C=k.lineHeight,S=_(b)?b.length:1;const e=S/2,n=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let u;if(o?(x=M,B="top"===i?"near"===l||0!==g?-S*C+C/2:"center"===l?-D.highest.height/2-e*C+C:-D.highest.height+C/2:"near"===l||0!==g?C/2:"center"===l?D.highest.height/2-e*C:D.highest.height-S*C,h&&(B*=-1)):(v=M,B=(1-S)*C/2),t.showLabelBackdrop){const e=be(t.backdropPadding),n=D.heights[m],i=D.widths[m];let r=v+B-e.top,o=x-e.left;switch(P){case"middle":r-=n/2;break;case"bottom":r-=n}switch(E){case"center":o-=i/2;break;case"right":o-=i}u={left:o,top:r,width:i+e.width,height:n+e.height,color:t.backdropColor}}p.push({rotation:g,label:b,font:k,color:n,strokeColor:a,strokeWidth:c,textOffset:B,textAlign:E,textBaseline:P,translation:[x,v],backdrop:u})}return p}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-it(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align&&(n="right"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:r}}=this.options,o=t+r,s=this._getLabelSizes().widest.width;let a,l;return"left"===e?i?(l=this.right+r,"near"===n?a="left":"center"===n?(a="center",l+=s/2):(a="right",l+=s)):(l=this.right-o,"near"===n?a="right":"center"===n?(a="center",l-=s/2):(a="left",l=this.left)):"right"===e?i?(l=this.left+r,"near"===n?a="right":"center"===n?(a="center",l-=s/2):(a="left",l-=s)):(l=this.left+o,"near"===n?a="left":"center"===n?(a="center",l+=s/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const s=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(r=0,o=i.length;r<o;++r){const t=i[r];e.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:n}}=this,i=n.setContext(this.getContext()),r=n.drawBorder?i.borderWidth:0;if(!r)return;const o=n.setContext(this.getContext(0)).lineWidth,s=this._borderValue;let a,l,c,h;this.isHorizontal()?(a=ne(t,this.left,r)-r/2,l=ne(t,this.right,o)+o/2,c=h=s):(c=ne(t,this.top,r)-r/2,h=ne(t,this.bottom,o)+o/2,a=l=s),e.save(),e.lineWidth=i.borderWidth,e.strokeStyle=i.borderColor,e.beginPath(),e.moveTo(a,c),e.lineTo(l,h),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&se(e,n);const i=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,o;for(r=0,o=i.length;r<o;++r){const t=i[r],n=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),he(e,o,0,t.textOffset,n,t)}n&&ae(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:i}}=this;if(!n.display)return;const r=xe(n.font),o=be(n.padding),s=n.align;let a=r.lineHeight/2;"bottom"===e||"center"===e||w(e)?(a+=o.bottom,_(n.text)&&(a+=r.lineHeight*(n.text.length-1))):a+=o.top;const{titleX:l,titleY:c,maxWidth:h,rotation:u}=function(t,e,n,i){const{top:r,left:o,bottom:s,right:a,chart:l}=t,{chartArea:c,scales:h}=l;let u,d,f,g=0;const p=s-r,m=a-o;if(t.isHorizontal()){if(d=y(i,o,a),w(n)){const t=Object.keys(n)[0],i=n[t];f=h[t].getPixelForValue(i)+p-e}else f="center"===n?(c.bottom+c.top)/2+p-e:Wi(t,n,e);u=a-o}else{if(w(n)){const t=Object.keys(n)[0],i=n[t];d=h[t].getPixelForValue(i)-m+e}else d="center"===n?(c.left+c.right)/2-m+e:Wi(t,n,e);f=y(i,s,r),g="left"===n?-X:X}return{titleX:d,titleY:f,maxWidth:u,rotation:g}}(this,a,e,s);he(t,n.text,0,0,r,{color:n.color,maxWidth:h,rotation:u,textAlign:Xi(s,e,i),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=k(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===Gi.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[n]!==this.id||t&&o.type!==t||i.push(o)}return i}_resolveTickFontOptions(t){return xe(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ki{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const i=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in i||(i[r]=t,function(t,e,n){const i=R(Object.create(null),[n?Jt.get(n):{},Jt.get(e),t.defaults]);Jt.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const i=n.split("."),r=i.pop(),o=[t].concat(i).join("."),s=e[n].split("."),a=s.pop(),l=s.join(".");Jt.route(o,r,l,a)}))}(e,t.defaultRoutes),t.descriptors&&Jt.describe(e,t.descriptors)}(t,o,n),this.override&&Jt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,i=this.scope;n in e&&delete e[n],i&&n in Jt[i]&&(delete Jt[i][n],this.override&&delete Gt[n])}}var Zi=new class{constructor(){this.controllers=new Ki(zn,"datasets",!0),this.elements=new Ki(qi,"elements"),this.plugins=new Ki(Object,"plugins"),this.scales=new Ki(Gi,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const i=n||this._getRegistryForType(e);n||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):B(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const i=q(t);S(n["before"+i],[],n),e[t](n),S(n["after"+i],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}};class Qi{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=i?this._descriptors(t).filter(i):this._descriptors(t),o=this._notify(r,t,e,n);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,n,i){i=i||{};for(const r of t){const t=r.plugin;if(!1===S(t[n],[e,i,r.options],t)&&i.cancelable)return!1}return!0}invalidate(){v(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,i=k(n.options&&n.options.plugins,{}),r=function(t){const e=[],n=Object.keys(Zi.plugins.items);for(let t=0;t<n.length;t++)e.push(Zi.getPlugin(n[t]));const i=t.plugins||[];for(let t=0;t<i.length;t++){const n=i[t];-1===e.indexOf(n)&&e.push(n)}return e}(n);return!1!==i||e?function(t,e,n,i){const r=[],o=t.getContext();for(let s=0;s<e.length;s++){const a=e[s],l=Ji(n[a.id],i);null!==l&&r.push({plugin:a,options:tr(t.config,a,l,o)})}return r}(t,r,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function Ji(t,e){return e||!1!==t?!0===t?{}:t:null}function tr(t,e,n,i){const r=t.pluginScopeKeys(e),o=t.getOptionScopes(n,r);return t.createResolver(o,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function er(t,e){const n=Jt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function nr(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.charAt(0).toLowerCase();var n}function ir(t){const e=t.options||(t.options={});e.plugins=k(e.plugins,{}),e.scales=function(t,e){const n=Gt[t.type]||{scales:{}},i=e.scales||{},r=er(t.type,e),o=Object.create(null),s=Object.create(null);return Object.keys(i).forEach((t=>{const e=i[t];if(!w(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=nr(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(a,r),c=n.scales||{};o[a]=o[a]||t,s[t]=T(Object.create(null),[{axis:a},e,c[a],c[l]])})),t.data.datasets.forEach((n=>{const r=n.type||t.type,a=n.indexAxis||er(r,e),l=(Gt[r]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,a),r=n[e+"AxisID"]||o[e]||e;s[r]=s[r]||Object.create(null),T(s[r],[{axis:e},i[r],l[t]])}))})),Object.keys(s).forEach((t=>{const e=s[t];T(e,[Jt.scales[e.type],Jt.scale])})),s}(t,e)}function rr(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const or=new Map,sr=new Set;function ar(t,e){let n=or.get(t);return n||(n=e(),or.set(t,n),sr.add(n)),n}const lr=(t,e,n)=>{const i=I(e,n);void 0!==i&&t.add(i)};class cr{constructor(t){this._config=function(t){return(t=t||{}).data=rr(t.data),ir(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=rr(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),ir(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return ar(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return ar(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return ar(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return ar(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:i,type:r}=this,o=this._cachedScopes(t,n),s=o.get(e);if(s)return s;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>lr(a,t,e)))),e.forEach((t=>lr(a,i,t))),e.forEach((t=>lr(a,Gt[r]||{},t))),e.forEach((t=>lr(a,Jt,t))),e.forEach((t=>lr(a,Kt,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),sr.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Gt[e]||{},Jt.datasets[e]||{},{type:e},Jt,Kt]}resolveNamedOptions(t,e,n,i=[""]){const r={$shared:!0},{resolver:o,subPrefixes:s}=hr(this._resolverCache,t,i);let a=o;(function(t,e){const{isScriptable:n,isIndexable:i}=De(t);for(const r of e){const e=n(r),o=i(r),s=(o||e)&&t[r];if(e&&(j(s)||ur(s))||o&&_(s))return!0}return!1})(o,e)&&(r.$shared=!1,a=Pe(o,n=j(n)?n():n,this.createResolver(t,n,s)));for(const t of e)r[t]=a[t];return r}createResolver(t,e,n=[""],i){const{resolver:r}=hr(this._resolverCache,t,n);return w(e)?Pe(r,e,void 0,i):r}}function hr(t,e,n){let i=t.get(e);i||(i=new Map,t.set(e,i));const r=n.join();let o=i.get(r);return o||(o={resolver:Be(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},i.set(r,o)),o}const ur=t=>w(t)&&Object.getOwnPropertyNames(t).reduce(((e,n)=>e||j(t[n])),!1),dr=["top","bottom","left","right","chartArea"];function fr(t,e){return"top"===t||"bottom"===t||-1===dr.indexOf(t)&&"x"===e}function gr(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function pr(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),S(n&&n.onComplete,[t],e)}function mr(t){const e=t.chart,n=e.options.animation;S(n&&n.onProgress,[t],e)}function Ar(t){return Xe()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const yr={},br=t=>{const e=Ar(t);return Object.values(yr).filter((t=>t.canvas===e)).pop()};function xr(t,e,n){const i=Object.keys(t);for(const r of i){const i=+r;if(i>=e){const o=t[r];delete t[r],(n>0||i>e)&&(t[i+n]=o)}}}class vr{constructor(t,e){const n=this.config=new cr(e),i=Ar(t),r=br(i);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas can be reused.");const o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!Xe()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Ei:Ii}(i)),this.platform.updateConfig(n);const s=this.platform.acquireContext(i,o.aspectRatio),a=s&&s.canvas,l=a&&a.height,c=a&&a.width;this.id=x(),this.ctx=s,this.canvas=a,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Qi,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],yr[this.id]=this,s&&a?(xn.listen(this,"complete",pr),xn.listen(this,"progress",mr),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:i,_aspectRatio:r}=this;return v(t)?e&&r?r:i?n/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():nn(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return ie(this.canvas,this.ctx),this}stop(){return xn.stop(this),this}resize(t,e){xn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,i=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(i,t,e,r),s=n.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,nn(this,s,!0)&&(this.notifyPlugins("resize",{size:o}),S(n.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){B(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,i=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const n=e[t],i=nr(t,n),r="r"===i,o="x"===i;return{options:n,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),B(r,(e=>{const r=e.options,o=r.id,s=nr(o,r),a=k(r.type,e.dtype);void 0!==r.position&&fr(r.position,s)===fr(e.dposition)||(r.position=e.dposition),i[o]=!0;let l=null;o in n&&n[o].type===a?l=n[o]:(l=new(Zi.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(r,t)})),B(i,((t,e)=>{t||delete n[e]})),B(n,(t=>{_i.configure(this,t,t.options),_i.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(gr("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=e.length;n<i;n++){const i=e[n];let r=this.getDatasetMeta(n);const o=i.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=o,r.indexAxis=i.indexAxis||er(o,this.options),r.order=i.order||0,r.index=n,r.label=""+i.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const e=Zi.getController(o),{datasetElementType:i,dataElementType:s}=Jt.datasets[o];Object.assign(e.prototype,{dataElementType:Zi.getElement(s),datasetElementType:i&&Zi.getElement(i)}),r.controller=new e(this,n),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){B(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!i&&-1===r.indexOf(e);e.buildOrUpdateElements(n),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),i||B(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(gr("z","_idx"));const{_active:s,_lastEvent:a}=this;a?this._eventHandler(a,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){B(this.scales,(t=>{_i.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);V(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:r}of e)xr(t,i,"_removeElements"===n?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=n(0);for(let t=1;t<e;t++)if(!V(i,n(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;_i.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],B(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,j(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(xn.has(this)?this.attached&&!xn.running(this)&&xn.start(this):(this.draw(),pr({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,r;for(i=0,r=e.length;i<r;++i){const r=e[i];t&&!r.visible||n.push(r)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,i=!n.disabled,r=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(i&&se(e,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),t.controller.draw(),i&&ae(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,n,i){const r=hi.modes[e];return"function"==typeof r?r(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=_e(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const i=n?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,i);N(e)?(r.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(r,{visible:n}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),xn.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),ie(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete yr[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};B(this.options.events,(t=>n(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const s=()=>{i("attach",s),this.attached=!0,this.resize(),n("resize",r),n("detach",o)};o=()=>{this.attached=!1,i("resize",r),this._stop(),this._resize(0,0),n("attach",s)},e.isAttached(this.canvas)?s():o()}unbindEvents(){B(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},B(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let r,o,s,a;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+i+"DatasetHoverStyle"]()),s=0,a=t.length;s<a;++s){o=t[s];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[i+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!P(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}_updateHoverStyles(t,e,n){const i=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),s=n?t:r(t,e);o.length&&this.updateHoverStyle(o,i.mode,!1),s.length&&i.mode&&this.updateHoverStyle(s,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:oe(t,this.chartArea,this._minPadding)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const r=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(r||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:i=[],options:r}=this,o=e,s=this._getActiveElements(t,i,n,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,a);n&&(this._lastEvent=null,S(r.onHover,[t,s,this],this),a&&S(r.onClick,[t,s,this],this));const c=!P(s,i);return(c||e)&&(this._active=s,this._updateHoverStyles(s,i,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,i)}}const _r=()=>B(vr.instances,(t=>t._plugins.invalidate())),wr=!0;function Er(t,e,n){const{startAngle:i,pixelMargin:r,x:o,y:s,outerRadius:a,innerRadius:l}=e;let c=r/a;t.beginPath(),t.arc(o,s,a,i-c,n+c),l>r?(c=r/l,t.arc(o,s,l,n+c,i-c,!0)):t.arc(o,s,r,n+X,i-X),t.closePath(),t.clip()}function Mr(t,e,n,i){return{x:n+t*Math.cos(e),y:i+t*Math.sin(e)}}function kr(t,e,n,i,r){const{x:o,y:s,startAngle:a,pixelMargin:l,innerRadius:c}=e,h=Math.max(e.outerRadius+i+n-l,0),u=c>0?c+i+n+l:0;let d=0;const f=r-a;if(i){const t=((c>0?c-i:0)+(h>0?h-i:0))/2;d=(f-(0!==t?f*t/(t+i):f))/2}const g=(f-Math.max(.001,f*h-n/W)/h)/2,p=a+g+d,m=r-g-d,{outerStart:A,outerEnd:y,innerStart:b,innerEnd:x}=function(t,e,n,i){const r=me(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,s=Math.min(o,i*e/2),a=t=>{const e=(n-Math.min(o,t))*i/2;return ut(t,0,Math.min(o,e))};return{outerStart:a(r.outerStart),outerEnd:a(r.outerEnd),innerStart:ut(r.innerStart,0,s),innerEnd:ut(r.innerEnd,0,s)}}(e,u,h,m-p),v=h-A,_=h-y,w=p+A/v,E=m-y/_,M=u+b,k=u+x,C=p+b/M,S=m-x/k;if(t.beginPath(),t.arc(o,s,h,w,E),y>0){const e=Mr(_,E,o,s);t.arc(e.x,e.y,y,E,m+X)}const B=Mr(k,m,o,s);if(t.lineTo(B.x,B.y),x>0){const e=Mr(k,S,o,s);t.arc(e.x,e.y,x,m+X,S+Math.PI)}if(t.arc(o,s,u,m-x/u,p+b/u,!0),b>0){const e=Mr(M,C,o,s);t.arc(e.x,e.y,b,C+Math.PI,p-X)}const P=Mr(v,p,o,s);if(t.lineTo(P.x,P.y),A>0){const e=Mr(v,w,o,s);t.arc(e.x,e.y,A,p-X,w)}t.closePath()}Object.defineProperties(vr,{defaults:{enumerable:wr,value:Jt},instances:{enumerable:wr,value:yr},overrides:{enumerable:wr,value:Gt},registry:{enumerable:wr,value:Zi},version:{enumerable:wr,value:"3.7.1"},getChart:{enumerable:wr,value:br},register:{enumerable:wr,value:(...t)=>{Zi.add(...t),_r()}},unregister:{enumerable:wr,value:(...t)=>{Zi.remove(...t),_r()}}});class Cr extends qi{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.getProps(["x","y"],n),{angle:r,distance:o}=st(i,{x:t,y:e}),{startAngle:s,endAngle:a,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),u=this.options.spacing/2,d=k(h,a-s)>=H||ht(r,s,a),f=dt(o,l+u,c+u);return d&&f}getCenterPoint(t){const{x:e,y:n,startAngle:i,endAngle:r,innerRadius:o,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:a,spacing:l}=this.options,c=(i+r)/2,h=(o+s+l+a)/2;return{x:e+Math.cos(c)*h,y:n+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,i=(e.offset||0)/2,r=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>H?Math.floor(n/H):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(i){o=i/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=W&&(o=i)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const s=function(t,e,n,i){const{fullCircles:r,startAngle:o,circumference:s}=e;let a=e.endAngle;if(r){kr(t,e,n,i,o+H);for(let e=0;e<r;++e)t.fill();isNaN(s)||(a=o+s%H,s%H==0&&(a+=H))}return kr(t,e,n,i,a),t.fill(),a}(t,this,o,r);(function(t,e,n,i,r){const{options:o}=e,{borderWidth:s,borderJoinStyle:a}=o,l="inner"===o.borderAlign;s&&(l?(t.lineWidth=2*s,t.lineJoin=a||"round"):(t.lineWidth=s,t.lineJoin=a||"bevel"),e.fullCircles&&function(t,e,n){const{x:i,y:r,startAngle:o,pixelMargin:s,fullCircles:a}=e,l=Math.max(e.outerRadius-s,0),c=e.innerRadius+s;let h;for(n&&Er(t,e,o+H),t.beginPath(),t.arc(i,r,c,o+H,o,!0),h=0;h<a;++h)t.stroke();for(t.beginPath(),t.arc(i,r,l,o,o+H),h=0;h<a;++h)t.stroke()}(t,e,l),l&&Er(t,e,r),kr(t,e,n,i,r),t.stroke())})(t,this,o,r,s),t.restore()}}function Sr(t,e,n=e){t.lineCap=k(n.borderCapStyle,e.borderCapStyle),t.setLineDash(k(n.borderDash,e.borderDash)),t.lineDashOffset=k(n.borderDashOffset,e.borderDashOffset),t.lineJoin=k(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=k(n.borderWidth,e.borderWidth),t.strokeStyle=k(n.borderColor,e.borderColor)}function Br(t,e,n){t.lineTo(n.x,n.y)}function Pr(t,e,n={}){const i=t.length,{start:r=0,end:o=i-1}=n,{start:s,end:a}=e,l=Math.max(r,s),c=Math.min(o,a),h=r<s&&o<s||r>a&&o>a;return{count:i,start:l,loop:e.loop,ilen:c<l&&!h?i+c-l:c-l}}function Dr(t,e,n,i){const{points:r,options:o}=e,{count:s,start:a,loop:l,ilen:c}=Pr(r,n,i),h=function(t){return t.stepped?le:t.tension||"monotone"===t.cubicInterpolationMode?ce:Br}(o);let u,d,f,{move:g=!0,reverse:p}=i||{};for(u=0;u<=c;++u)d=r[(a+(p?c-u:u))%s],d.skip||(g?(t.moveTo(d.x,d.y),g=!1):h(t,f,d,p,o.stepped),f=d);return l&&(d=r[(a+(p?c:0))%s],h(t,f,d,p,o.stepped)),!!l}function Fr(t,e,n,i){const r=e.points,{count:o,start:s,ilen:a}=Pr(r,n,i),{move:l=!0,reverse:c}=i||{};let h,u,d,f,g,p,m=0,A=0;const y=t=>(s+(c?a-t:t))%o,b=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(u=r[y(0)],t.moveTo(u.x,u.y)),h=0;h<=a;++h){if(u=r[y(h)],u.skip)continue;const e=u.x,n=u.y,i=0|e;i===d?(n<f?f=n:n>g&&(g=n),m=(A*m+e)/++A):(b(),t.lineTo(e,n),d=i,A=0,f=g=n),p=n}b()}function Or(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Dr:Fr}Cr.id="arc",Cr.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},Cr.defaultRoutes={backgroundColor:"backgroundColor"};const Rr="function"==typeof Path2D;class Tr extends qi{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;Ye(this._points,n,t,i,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,i=t.options.spanGaps,r=n.length;if(!r)return[];const o=!!t._loop,{start:s,end:a}=function(t,e,n,i){let r=0,o=e-1;if(n&&!i)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,n&&(o+=r);o>r&&t[o%e].skip;)o--;return o%=e,{start:r,end:o}}(n,r,o,i);return function(t,e,n,i){return i&&i.setContext&&n?function(t,e,n,i){const r=t._chart.getContext(),o=yn(t.options),{_datasetIndex:s,options:{spanGaps:a}}=t,l=n.length,c=[];let h=o,u=e[0].start,d=u;function f(t,e,i,r){const o=a?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=o;for(;n[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:i,style:r}),h=r,u=e%l)}}for(const t of e){u=a?u:t.start;let e,o=n[u%l];for(d=u+1;d<=t.end;d++){const a=n[d%l];e=yn(i.setContext(_e(r,{type:"segment",p0:o,p1:a,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:s}))),bn(e,h)&&f(u,d-1,t.loop,h),o=a,h=e}u<d-1&&f(u,d-1,t.loop,h)}return c}(t,e,n,i):e}(t,!0===i?[{start:s,end:a,loop:o}]:function(t,e,n,i){const r=t.length,o=[];let s,a=e,l=t[e];for(s=e+1;s<=n;++s){const n=t[s%r];n.skip||n.stop?l.skip||(i=!1,o.push({start:e%r,end:(s-1)%r,loop:i}),e=a=n.stop?s:null):(a=s,l.skip&&(e=s)),l=n}return null!==a&&o.push({start:e%r,end:a%r,loop:i}),o}(n,s,a<s?a+r:a,!!t._fullLoop&&0===s&&a===r-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,i=t[e],r=this.points,o=An(this,{property:e,start:i,end:i});if(!o.length)return;const s=[],a=function(t){return t.stepped?an:t.tension||"monotone"===t.cubicInterpolationMode?ln:sn}(n);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:h}=o[l],u=r[c],d=r[h];if(u===d){s.push(u);continue}const f=a(u,d,Math.abs((i-u[e])/(d[e]-u[e])),n.stepped);f[e]=t[e],s.push(f)}return 1===s.length?s[0]:s}pathSegment(t,e,n){return Or(this)(t,this,e,n)}path(t,e,n){const i=this.segments,r=Or(this);let o=this._loop;e=e||0,n=n||this.points.length-e;for(const s of i)o&=r(t,this,s,{start:e,end:e+n-1});return!!o}draw(t,e,n,i){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,n,i){Rr&&!e.options.segment?function(t,e,n,i){let r=e._path;r||(r=e._path=new Path2D,e.path(r,n,i)&&r.closePath()),Sr(t,e.options),t.stroke(r)}(t,e,n,i):function(t,e,n,i){const{segments:r,options:o}=e,s=Or(e);for(const a of r)Sr(t,o,a.style),t.beginPath(),s(t,e,a,{start:n,end:n+i-1})&&t.closePath(),t.stroke()}(t,e,n,i)}(t,this,n,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Lr(t,e,n,i){const r=t.options,{[n]:o}=t.getProps([n],i);return Math.abs(e-o)<r.radius+r.hitRadius}Tr.id="line",Tr.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Tr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Tr.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class zr extends qi{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.options,{x:r,y:o}=this.getProps(["x","y"],n);return Math.pow(t-r,2)+Math.pow(e-o,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return Lr(this,t,"x",e)}inYRange(t,e){return Lr(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!oe(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,re(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ir(t,e){const{x:n,y:i,base:r,width:o,height:s}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,u;return t.horizontal?(u=s/2,a=Math.min(n,r),l=Math.max(n,r),c=i-u,h=i+u):(u=o/2,a=n-u,l=n+u,c=Math.min(i,r),h=Math.max(i,r)),{left:a,top:c,right:l,bottom:h}}function qr(t,e,n,i){return t?0:ut(e,n,i)}function Nr(t,e,n,i){const r=null===e,o=null===n,s=t&&!(r&&o)&&Ir(t,i);return s&&(r||dt(e,s.left,s.right))&&(o||dt(n,s.top,s.bottom))}function jr(t,e){t.rect(e.x,e.y,e.w,e.h)}function Vr(t,e,n={}){const i=t.x!==n.x?-e:0,r=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-i,s=(t.y+t.h!==n.y+n.h?e:0)-r;return{x:t.x+i,y:t.y+r,w:t.w+o,h:t.h+s,radius:t.radius}}zr.id="point",zr.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},zr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Wr extends qi{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:i}}=this,{inner:r,outer:o}=function(t){const e=Ir(t),n=e.right-e.left,i=e.bottom-e.top,r=function(t,e,n){const i=t.options.borderWidth,r=t.borderSkipped,o=Ae(i);return{t:qr(r.top,o.top,0,n),r:qr(r.right,o.right,0,e),b:qr(r.bottom,o.bottom,0,n),l:qr(r.left,o.left,0,e)}}(t,n/2,i/2),o=function(t,e,n){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=ye(r),s=Math.min(e,n),a=t.borderSkipped,l=i||w(r);return{topLeft:qr(!l||a.top||a.left,o.topLeft,0,s),topRight:qr(!l||a.top||a.right,o.topRight,0,s),bottomLeft:qr(!l||a.bottom||a.left,o.bottomLeft,0,s),bottomRight:qr(!l||a.bottom||a.right,o.bottomRight,0,s)}}(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}(this),s=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?de:jr;var a;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),s(t,Vr(o,e,r)),t.clip(),s(t,Vr(r,-e,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),s(t,Vr(r,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,n){return Nr(this,t,e,n)}inXRange(t,e){return Nr(this,t,null,e)}inYRange(t,e){return Nr(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+i)/2:e,y:r?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Wr.id="bar",Wr.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Wr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Hr=Object.freeze({__proto__:null,ArcElement:Cr,LineElement:Tr,PointElement:zr,BarElement:Wr});function $r(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Ur(t){t.data.datasets.forEach((t=>{$r(t)}))}var Yr={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void Ur(t);const i=t.width;t.data.datasets.forEach(((e,r)=>{const{_data:o,indexAxis:s}=e,a=t.getDatasetMeta(r),l=o||e.data;if("y"===ve([s,t.options.indexAxis]))return;if("line"!==a.type)return;const c=t.scales[a.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let h,{start:u,count:d}=function(t,e){const n=e.length;let i,r=0;const{iScale:o}=t,{min:s,max:a,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(r=ut(Ee(e,o.axis,s).lo,0,n-1)),i=c?ut(Ee(e,o.axis,a).hi+1,r,n)-r:n-r,{start:r,count:i}}(a,l);if(d<=(n.threshold||4*i))$r(e);else{switch(v(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":h=function(t,e,n,i,r){const o=r.samples||i;if(o>=n)return t.slice(e,e+n);const s=[],a=(n-2)/(o-2);let l=0;const c=e+n-1;let h,u,d,f,g,p=e;for(s[l++]=t[p],h=0;h<o-2;h++){let i,r=0,o=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,n)+e,A=m-c;for(i=c;i<m;i++)r+=t[i].x,o+=t[i].y;r/=A,o/=A;const y=Math.floor(h*a)+1+e,b=Math.min(Math.floor((h+1)*a)+1,n)+e,{x,y:v}=t[p];for(d=f=-1,i=y;i<b;i++)f=.5*Math.abs((x-r)*(t[i].y-v)-(x-t[i].x)*(o-v)),f>d&&(d=f,u=t[i],g=i);s[l++]=u,p=g}return s[l++]=t[c],s}(l,u,d,i,n);break;case"min-max":h=function(t,e,n,i){let r,o,s,a,l,c,h,u,d,f,g=0,p=0;const m=[],A=e+n-1,y=t[e].x,b=t[A].x-y;for(r=e;r<e+n;++r){o=t[r],s=(o.x-y)/b*i,a=o.y;const e=0|s;if(e===l)a<d?(d=a,c=r):a>f&&(f=a,h=r),g=(p*g+o.x)/++p;else{const n=r-1;if(!v(c)&&!v(h)){const e=Math.min(c,h),i=Math.max(c,h);e!==u&&e!==n&&m.push({...t[e],x:g}),i!==u&&i!==n&&m.push({...t[i],x:g})}r>0&&n!==u&&m.push(t[n]),m.push(o),l=e,p=0,d=f=a,c=h=u=r}}return m}(l,u,d,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=h}}))},destroy(t){Ur(t)}};function Xr(t,e,n){const i=function(t){const e=t.options,n=e.fill;let i=k(n&&n.target,n);return void 0===i&&(i=!!e.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(t);if(w(i))return!isNaN(i.value)&&i;let r=parseFloat(i);return E(r)&&Math.floor(r)===r?("-"!==i[0]&&"+"!==i[0]||(r=e+r),!(r===e||r<0||r>=n)&&r):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}class Gr{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:i,y:r,radius:o}=this;return e=e||{start:0,end:H},t.arc(i,r,o,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:i}=this,r=t.angle;return{x:e+Math.cos(r)*i,y:n+Math.sin(r)*i,angle:r}}}function Kr(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Zr(t,e,n){const i=[];for(let r=0;r<n.length;r++){const o=n[r],{first:s,last:a,point:l}=Qr(o,e,"x");if(!(!l||s&&a))if(s)i.unshift(l);else if(t.push(l),!a)break}t.push(...i)}function Qr(t,e,n){const i=t.interpolate(e,n);if(!i)return{};const r=i[n],o=t.segments,s=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],i=s[e.start][n],c=s[e.end][n];if(dt(r,i,c)){a=r===i,l=r===c;break}}return{first:a,last:l,point:i}}function Jr(t){const{chart:e,fill:n,line:i}=t;if(E(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{scale:e,index:n,line:i}=t,r=[],o=i.segments,s=i.points,a=function(t,e){const n=[],i=t.getMatchingVisibleMetas("line");for(let t=0;t<i.length;t++){const r=i[t];if(r.index===e)break;r.hidden||n.unshift(r.dataset)}return n}(e,n);a.push(to({x:null,y:e.bottom},i));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Zr(r,s[t],a)}return new Tr({points:r,options:{}})}(t);if("shape"===n)return!0;const r=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,i=e.options,r=e.getLabels().length,o=[],s=i.reverse?e.max:e.min,a=i.reverse?e.min:e.max;let l,c,h;if(h="start"===n?s:"end"===n?a:w(n)?n.value:e.getBaseValue(),i.grid.circular)return c=e.getPointPositionForValue(0,s),new Gr({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(h)});for(l=0;l<r;++l)o.push(e.getPointPositionForValue(l,h));return o}(t):function(t){const{scale:e={},fill:n}=t;let i,r=null;return"start"===n?r=e.bottom:"end"===n?r=e.top:w(n)?r=e.getPixelForValue(n.value):e.getBasePixel&&(r=e.getBasePixel()),E(r)?(i=e.isHorizontal(),{x:i?r:null,y:i?null:r}):null}(t)}(t);return r instanceof Gr?r:to(r,i)}function to(t,e){let n=[],i=!1;return _(t)?(i=!0,n=t):n=function(t,e){const{x:n=null,y:i=null}=t||{},r=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Kr(t,e,r);const s=r[t],a=r[e];null!==i?(o.push({x:s.x,y:i}),o.push({x:a.x,y:i})):null!==n&&(o.push({x:n,y:s.y}),o.push({x:n,y:a.y}))})),o}(t,e),n.length?new Tr({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function eo(t,e,n){let i=t[e].fill;const r=[e];let o;if(!n)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!E(i))return i;if(o=t[i],!o)return!1;if(o.visible)return i;r.push(i),i=o.fill}return!1}function no(t,e,n){const{segments:i,points:r}=e;let o=!0,s=!1;t.beginPath();for(const a of i){const{start:i,end:l}=a,c=r[i],h=r[Kr(i,l,r)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,n),t.lineTo(c.x,c.y)),s=!!e.pathSegment(t,a,{move:s}),s?t.closePath():t.lineTo(h.x,n)}t.lineTo(e.first().x,n),t.closePath(),t.clip()}function io(t,e,n,i){if(i)return;let r=e[t],o=n[t];return"angle"===t&&(r=ct(r),o=ct(o)),{property:t,start:r,end:o}}function ro(t,e,n,i){return t&&e?i(t[n],e[n]):t?t[n]:e?e[n]:0}function oo(t,e,n){const{top:i,bottom:r}=e.chart.chartArea,{property:o,start:s,end:a}=n||{};"x"===o&&(t.beginPath(),t.rect(s,i,a-s,r-i),t.clip())}function so(t,e,n,i){const r=e.interpolate(n,i);r&&t.lineTo(r.x,r.y)}function ao(t,e){const{line:n,target:i,property:r,color:o,scale:s}=e,a=function(t,e,n){const i=t.segments,r=t.points,o=e.points,s=[];for(const t of i){let{start:i,end:a}=t;a=Kr(i,a,r);const l=io(n,r[i],r[a],t.loop);if(!e.segments){s.push({source:t,target:l,start:r[i],end:r[a]});continue}const c=An(e,l);for(const e of c){const i=io(n,o[e.start],o[e.end],e.loop),a=mn(t,r,i);for(const t of a)s.push({source:t,target:e,start:{[n]:ro(l,i,"start",Math.max)},end:{[n]:ro(l,i,"end",Math.min)}})}}return s}(n,i,r);for(const{source:e,target:l,start:c,end:h}of a){const{style:{backgroundColor:a=o}={}}=e,u=!0!==i;t.save(),t.fillStyle=a,oo(t,s,u&&io(r,c,h)),t.beginPath();const d=!!n.pathSegment(t,e);let f;if(u){d?t.closePath():so(t,i,h,r);const e=!!i.pathSegment(t,l,{move:d,reverse:!0});f=d&&e,f||so(t,i,c,r)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function lo(t,e,n){const i=Jr(e),{line:r,scale:o,axis:s}=e,a=r.options,l=a.fill,c=a.backgroundColor,{above:h=c,below:u=c}=l||{};i&&r.points.length&&(se(t,n),function(t,e){const{line:n,target:i,above:r,below:o,area:s,scale:a}=e,l=n._loop?"angle":e.axis;t.save(),"x"===l&&o!==r&&(no(t,i,s.top),ao(t,{line:n,target:i,color:r,scale:a,property:l}),t.restore(),t.save(),no(t,i,s.bottom)),ao(t,{line:n,target:i,color:o,scale:a,property:l}),t.restore()}(t,{line:r,target:i,above:h,below:u,area:n,scale:o,axis:s}),ae(t))}var co={id:"filler",afterDatasetsUpdate(t,e,n){const i=(t.data.datasets||[]).length,r=[];let o,s,a,l;for(s=0;s<i;++s)o=t.getDatasetMeta(s),a=o.dataset,l=null,a&&a.options&&a instanceof Tr&&(l={visible:t.isDatasetVisible(s),index:s,fill:Xr(a,s,i),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,r.push(l);for(s=0;s<i;++s)l=r[s],l&&!1!==l.fill&&(l.fill=eo(r,s,n.propagate))},beforeDraw(t,e,n){const i="beforeDraw"===n.drawTime,r=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=r.length-1;e>=0;--e){const n=r[e].$filler;n&&(n.line.updateControlPoints(o,n.axis),i&&lo(t.ctx,n,o))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const i=t.getSortedVisibleDatasetMetas();for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;n&&lo(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const i=e.meta.$filler;i&&!1!==i.fill&&"beforeDatasetDraw"===n.drawTime&&lo(t.ctx,i,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const ho=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class uo extends qi{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=S(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,i=xe(n.font),r=i.size,o=this._computeTitleHeight(),{boxWidth:s,itemHeight:a}=ho(n,r);let l,c;e.font=i.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,r,s,a)+10):(c=this.maxHeight,l=this._fitCols(o,r,s,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:r,maxWidth:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+s;let h=t;r.textAlign="left",r.textBaseline="middle";let u=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const g=n+e/2+r.measureText(t.text).width;(0===f||l[l.length-1]+g+2*s>o)&&(h+=c,l[l.length-(f>0?0:1)]=0,d+=c,u++),a[f]={left:0,top:d,row:u,width:g,height:i},l[l.length-1]+=g+s})),h}_fitCols(t,e,n,i){const{ctx:r,maxHeight:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let h=s,u=0,d=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const p=n+e/2+r.measureText(t.text).width;o>0&&d+i+2*s>c&&(h+=u+s,l.push({width:u,height:d}),f+=u+s,g++,u=d=0),a[o]={left:f,top:d,col:g,width:p,height:i},u=Math.max(u,p),d+=i+s})),h+=u,l.push({width:u,height:d}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:i},rtl:r}}=this,o=un(r,this.left,this.width);if(this.isHorizontal()){let r=0,s=y(n,this.left+i,this.right-this.lineWidths[r]);for(const a of e)r!==a.row&&(r=a.row,s=y(n,this.left+i,this.right-this.lineWidths[r])),a.top+=this.top+t+i,a.left=o.leftForLtr(o.x(s),a.width),s+=a.width+i}else{let r=0,s=y(n,this.top+t+i,this.bottom-this.columnSizes[r].height);for(const a of e)a.col!==r&&(r=a.col,s=y(n,this.top+t+i,this.bottom-this.columnSizes[r].height)),a.top=s,a.left+=this.left+i,a.left=o.leftForLtr(o.x(a.left),a.width),s+=a.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;se(t,this),this._draw(),ae(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:i}=this,{align:r,labels:o}=t,s=Jt.color,a=un(t.rtl,this.left,this.width),l=xe(o.font),{color:c,padding:h}=o,u=l.size,d=u/2;let f;this.drawTitle(),i.textAlign=a.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:g,boxHeight:p,itemHeight:m}=ho(o,u),A=this.isHorizontal(),b=this._computeTitleHeight();f=A?{x:y(r,this.left+h,this.right-n[0]),y:this.top+h+b,line:0}:{x:this.left+h,y:y(r,this.top+b+h,this.bottom-e[0].height),line:0},dn(this.ctx,t.textDirection);const x=m+h;this.legendItems.forEach(((v,_)=>{i.strokeStyle=v.fontColor||c,i.fillStyle=v.fontColor||c;const w=i.measureText(v.text).width,E=a.textAlign(v.textAlign||(v.textAlign=o.textAlign)),M=g+d+w;let C=f.x,S=f.y;a.setWidth(this.width),A?_>0&&C+M+h>this.right&&(S=f.y+=x,f.line++,C=f.x=y(r,this.left+h,this.right-n[f.line])):_>0&&S+x>this.bottom&&(C=f.x=C+e[f.line].width+h,f.line++,S=f.y=y(r,this.top+b+h,this.bottom-e[f.line].height)),function(t,e,n){if(isNaN(g)||g<=0||isNaN(p)||p<0)return;i.save();const r=k(n.lineWidth,1);if(i.fillStyle=k(n.fillStyle,s),i.lineCap=k(n.lineCap,"butt"),i.lineDashOffset=k(n.lineDashOffset,0),i.lineJoin=k(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=k(n.strokeStyle,s),i.setLineDash(k(n.lineDash,[])),o.usePointStyle){const o={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},s=a.xPlus(t,g/2);re(i,o,s,e+d)}else{const o=e+Math.max((u-p)/2,0),s=a.leftForLtr(t,g),l=ye(n.borderRadius);i.beginPath(),Object.values(l).some((t=>0!==t))?de(i,{x:s,y:o,w:g,h:p,radius:l}):i.rect(s,o,g,p),i.fill(),0!==r&&i.stroke()}i.restore()}(a.x(C),S,v),C=((t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e)(E,C+g+d,A?C+M:this.right,t.rtl),function(t,e,n){he(i,n.text,t,e+m/2,l,{strikethrough:n.hidden,textAlign:a.textAlign(n.textAlign)})}(a.x(C),S,v),A?f.x+=M+h:f.y+=x})),fn(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=xe(e.font),i=be(e.padding);if(!e.display)return;const r=un(t.rtl,this.left,this.width),o=this.ctx,s=e.position,a=n.size/2,l=i.top+a;let c,h=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),c=this.top+l,h=y(t.align,h,this.right-u);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+y(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=y(s,h,h+u);o.textAlign=r.textAlign(A(s)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=n.string,he(o,e.text,d,c,n)}_computeTitleHeight(){const t=this.options.title,e=xe(t.font),n=be(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,i,r;if(dt(t,this.left,this.right)&&dt(e,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(i=r[n],dt(t,i.left,i.left+i.width)&&dt(e,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const o=this._hoveredItem,s=(r=n,null!==(i=o)&&null!==r&&i.datasetIndex===r.datasetIndex&&i.index===r.index);o&&!s&&S(e.onLeave,[t,o,this],this),this._hoveredItem=n,n&&!s&&S(e.onHover,[t,n,this],this)}else n&&S(e.onClick,[t,n,this],this);var i,r}}var fo={id:"legend",_element:uo,start(t,e,n){const i=t.legend=new uo({ctx:t.ctx,options:n,chart:t});_i.configure(t,i,n),_i.addBox(t,i)},stop(t){_i.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;_i.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,r=n.chart;r.isDatasetVisible(i)?(r.hide(i),e.hidden=!0):(r.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:r,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const s=t.controller.getStyle(n?0:void 0),a=be(s.borderWidth);return{text:e[t.index].label,fillStyle:s.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:s.borderCapStyle,lineDash:s.borderDash,lineDashOffset:s.borderDashOffset,lineJoin:s.borderJoinStyle,lineWidth:(a.width+a.height)/4,strokeStyle:s.borderColor,pointStyle:i||s.pointStyle,rotation:s.rotation,textAlign:r||s.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class go extends qi{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=_(n.text)?n.text.length:1;this._padding=be(n.padding);const r=i*xe(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:i,right:r,options:o}=this,s=o.align;let a,l,c,h=0;return this.isHorizontal()?(l=y(s,n,r),c=e+t,a=r-n):("left"===o.position?(l=n+t,c=y(s,i,e),h=-.5*W):(l=r-t,c=y(s,e,i),h=.5*W),a=i-e),{titleX:l,titleY:c,maxWidth:a,rotation:h}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=xe(e.font),i=n.lineHeight/2+this._padding.top,{titleX:r,titleY:o,maxWidth:s,rotation:a}=this._drawArgs(i);he(t,e.text,0,0,n,{color:e.color,maxWidth:s,rotation:a,textAlign:A(e.align),textBaseline:"middle",translation:[r,o]})}}var po={id:"title",_element:go,start(t,e,n){!function(t,e){const n=new go({ctx:t.ctx,options:e,chart:t});_i.configure(t,n,e),_i.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;_i.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;_i.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const mo=new WeakMap;var Ao={id:"subtitle",start(t,e,n){const i=new go({ctx:t.ctx,options:n,chart:t});_i.configure(t,i,n),_i.addBox(t,i),mo.set(t,i)},stop(t){_i.removeBox(t,mo.get(t)),mo.delete(t)},beforeUpdate(t,e,n){const i=mo.get(t);_i.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const yo={average(t){if(!t.length)return!1;let e,n,i=0,r=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i+=t.x,r+=t.y,++o}}return{x:i/o,y:r/o}},nearest(t,e){if(!t.length)return!1;let n,i,r,o=e.x,s=e.y,a=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){const i=t[n].element;if(i&&i.hasValue()){const t=at(e,i.getCenterPoint());t<a&&(a=t,r=i)}}if(r){const t=r.tooltipPosition();o=t.x,s=t.y}return{x:o,y:s}}};function bo(t,e){return e&&(_(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function xo(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function vo(t,e){const{element:n,datasetIndex:i,index:r}=e,o=t.getDatasetMeta(i).controller,{label:s,value:a}=o.getLabelAndValue(r);return{chart:t,label:s,parsed:o.getParsed(r),raw:t.data.datasets[i].data[r],formattedValue:a,dataset:o.getDataset(),dataIndex:r,datasetIndex:i,element:n}}function _o(t,e){const n=t.chart.ctx,{body:i,footer:r,title:o}=t,{boxWidth:s,boxHeight:a}=e,l=xe(e.bodyFont),c=xe(e.titleFont),h=xe(e.footerFont),u=o.length,d=r.length,f=i.length,g=be(e.padding);let p=g.height,m=0,A=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);A+=t.beforeBody.length+t.afterBody.length,u&&(p+=u*c.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),A&&(p+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(A-f)*l.lineHeight+(A-1)*e.bodySpacing),d&&(p+=e.footerMarginTop+d*h.lineHeight+(d-1)*e.footerSpacing);let y=0;const b=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=c.string,B(t.title,b),n.font=l.string,B(t.beforeBody.concat(t.afterBody),b),y=e.displayColors?s+2+e.boxPadding:0,B(i,(t=>{B(t.before,b),B(t.lines,b),B(t.after,b)})),y=0,n.font=h.string,B(t.footer,b),n.restore(),m+=g.width,{width:m,height:p}}function wo(t,e,n,i){const{x:r,width:o}=n,{width:s,chartArea:{left:a,right:l}}=t;let c="center";return"center"===i?c=r<=(a+l)/2?"left":"right":r<=o/2?c="left":r>=s-o/2&&(c="right"),function(t,e,n,i){const{x:r,width:o}=i,s=n.caretSize+n.caretPadding;return"left"===t&&r+o+s>e.width||"right"===t&&r-o-s<0||void 0}(c,t,e,n)&&(c="center"),c}function Eo(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||wo(t,e,n,i),yAlign:i}}function Mo(t,e,n,i){const{caretSize:r,caretPadding:o,cornerRadius:s}=t,{xAlign:a,yAlign:l}=n,c=r+o,{topLeft:h,topRight:u,bottomLeft:d,bottomRight:f}=ye(s);let g=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,a);const p=function(t,e,n){let{y:i,height:r}=t;return"top"===e?i+=n:i-="bottom"===e?r+n:r/2,i}(e,l,c);return"center"===l?"left"===a?g+=c:"right"===a&&(g-=c):"left"===a?g-=Math.max(h,d)+r:"right"===a&&(g+=Math.max(u,f)+r),{x:ut(g,0,i.width-e.width),y:ut(p,0,i.height-e.height)}}function ko(t,e,n){const i=be(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function Co(t){return bo([],xo(t))}function So(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}class Bo extends qi{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,r=new Mn(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,_e(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:n}=e,i=n.beforeTitle.apply(this,[t]),r=n.title.apply(this,[t]),o=n.afterTitle.apply(this,[t]);let s=[];return s=bo(s,xo(i)),s=bo(s,xo(r)),s=bo(s,xo(o)),s}getBeforeBody(t,e){return Co(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:n}=e,i=[];return B(t,(t=>{const e={before:[],lines:[],after:[]},r=So(n,t);bo(e.before,xo(r.beforeLabel.call(this,t))),bo(e.lines,r.label.call(this,t)),bo(e.after,xo(r.afterLabel.call(this,t))),i.push(e)})),i}getAfterBody(t,e){return Co(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:n}=e,i=n.beforeFooter.apply(this,[t]),r=n.footer.apply(this,[t]),o=n.afterFooter.apply(this,[t]);let s=[];return s=bo(s,xo(i)),s=bo(s,xo(r)),s=bo(s,xo(o)),s}_createItems(t){const e=this._active,n=this.chart.data,i=[],r=[],o=[];let s,a,l=[];for(s=0,a=e.length;s<a;++s)l.push(vo(this.chart,e[s]));return t.filter&&(l=l.filter(((e,i,r)=>t.filter(e,i,r,n)))),t.itemSort&&(l=l.sort(((e,i)=>t.itemSort(e,i,n)))),B(l,(e=>{const n=So(t.callbacks,e);i.push(n.labelColor.call(this,e)),r.push(n.labelPointStyle.call(this,e)),o.push(n.labelTextColor.call(this,e))})),this.labelColors=i,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let r,o=[];if(i.length){const t=yo[n.position].call(this,i,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const e=this._size=_o(this,n),s=Object.assign({},t,e),a=Eo(this.chart,n,s),l=Mo(n,s,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const r=this.getCaretPosition(t,n,i);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,n){const{xAlign:i,yAlign:r}=this,{caretSize:o,cornerRadius:s}=n,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:h}=ye(s),{x:u,y:d}=t,{width:f,height:g}=e;let p,m,A,y,b,x;return"center"===r?(b=d+g/2,"left"===i?(p=u,m=p-o,y=b+o,x=b-o):(p=u+f,m=p+o,y=b-o,x=b+o),A=p):(m="left"===i?u+Math.max(a,c)+o:"right"===i?u+f-Math.max(l,h)-o:this.caretX,"top"===r?(y=d,b=y-o,p=m-o,A=m+o):(y=d+g,b=y+o,p=m+o,A=m-o),x=y),{x1:p,x2:m,x3:A,y1:y,y2:b,y3:x}}drawTitle(t,e,n){const i=this.title,r=i.length;let o,s,a;if(r){const l=un(n.rtl,this.x,this.width);for(t.x=ko(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",o=xe(n.titleFont),s=n.titleSpacing,e.fillStyle=n.titleColor,e.font=o.string,a=0;a<r;++a)e.fillText(i[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+s,a+1===r&&(t.y+=n.titleMarginBottom-s)}}_drawColorBox(t,e,n,i,r){const o=this.labelColors[n],s=this.labelPointStyles[n],{boxHeight:a,boxWidth:l,boxPadding:c}=r,h=xe(r.bodyFont),u=ko(this,"left",r),d=i.x(u),f=a<h.lineHeight?(h.lineHeight-a)/2:0,g=e.y+f;if(r.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=i.leftForLtr(d,l)+l/2,c=g+a/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,re(t,e,n,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,re(t,e,n,c)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=i.leftForLtr(d,l-c),n=i.leftForLtr(i.xPlus(d,1),l-c-2),s=ye(o.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,de(t,{x:e,y:g,w:l,h:a,radius:s}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),de(t,{x:n,y:g+1,w:l-2,h:a-2,radius:s}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,g,l,a),t.strokeRect(e,g,l,a),t.fillStyle=o.backgroundColor,t.fillRect(n,g+1,l-2,a-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:i}=this,{bodySpacing:r,bodyAlign:o,displayColors:s,boxHeight:a,boxWidth:l,boxPadding:c}=n,h=xe(n.bodyFont);let u=h.lineHeight,d=0;const f=un(n.rtl,this.x,this.width),g=function(n){e.fillText(n,f.x(t.x+d),t.y+u/2),t.y+=u+r},p=f.textAlign(o);let m,A,y,b,x,v,_;for(e.textAlign=o,e.textBaseline="middle",e.font=h.string,t.x=ko(this,p,n),e.fillStyle=n.bodyColor,B(this.beforeBody,g),d=s&&"right"!==p?"center"===o?l/2+c:l+2+c:0,b=0,v=i.length;b<v;++b){for(m=i[b],A=this.labelTextColors[b],e.fillStyle=A,B(m.before,g),y=m.lines,s&&y.length&&(this._drawColorBox(e,t,b,f,n),u=Math.max(h.lineHeight,a)),x=0,_=y.length;x<_;++x)g(y[x]),u=h.lineHeight;B(m.after,g)}d=0,u=h.lineHeight,B(this.afterBody,g),t.y-=r}drawFooter(t,e,n){const i=this.footer,r=i.length;let o,s;if(r){const a=un(n.rtl,this.x,this.width);for(t.x=ko(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=a.textAlign(n.footerAlign),e.textBaseline="middle",o=xe(n.footerFont),e.fillStyle=n.footerColor,e.font=o.string,s=0;s<r;++s)e.fillText(i[s],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,e,n,i){const{xAlign:r,yAlign:o}=this,{x:s,y:a}=t,{width:l,height:c}=n,{topLeft:h,topRight:u,bottomLeft:d,bottomRight:f}=ye(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(s+h,a),"top"===o&&this.drawCaret(t,e,n,i),e.lineTo(s+l-u,a),e.quadraticCurveTo(s+l,a,s+l,a+u),"center"===o&&"right"===r&&this.drawCaret(t,e,n,i),e.lineTo(s+l,a+c-f),e.quadraticCurveTo(s+l,a+c,s+l-f,a+c),"bottom"===o&&this.drawCaret(t,e,n,i),e.lineTo(s+d,a+c),e.quadraticCurveTo(s,a+c,s,a+c-d),"center"===o&&"left"===r&&this.drawCaret(t,e,n,i),e.lineTo(s,a+h),e.quadraticCurveTo(s,a,s+h,a),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,r=n&&n.y;if(i||r){const n=yo[t.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=_o(this,t),s=Object.assign({},n,this._size),a=Eo(e,t,s),l=Mo(t,s,a,e);i._to===l.x&&r._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=be(e.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&s&&(t.save(),t.globalAlpha=n,this.drawBackground(r,t,i,e),dn(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),fn(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,i=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),r=!P(n,i),o=this._positionChanged(i,e);(r||o)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,n),s=this._positionChanged(o,t),a=e||!P(o,r)||s;return a&&(this._active=o,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,n,i){const r=this.options;if("mouseout"===t.type)return[];if(!i)return e;const o=this.chart.getElementsAtEventForMode(t,r.mode,r,n);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:n,caretY:i,options:r}=this,o=yo[r.position].call(this,t,e);return!1!==o&&(n!==o.x||i!==o.y)}}Bo.positioners=yo;var Po={id:"tooltip",_element:Bo,positioners:yo,afterInit(t,e,n){n&&(t.tooltip=new Bo({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip,n={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",n)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n))},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:b,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:b,beforeBody:b,beforeLabel:b,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return v(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:b,afterBody:b,beforeFooter:b,footer:b,afterFooter:b}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Do=Object.freeze({__proto__:null,Decimation:Yr,Filler:co,Legend:fo,SubTitle:Ao,Title:po,Tooltip:Po});class Fo extends Gi{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(v(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:ut(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const r=t.indexOf(e);return-1===r?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):r!==t.lastIndexOf(e)?n:r}(n,t,k(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Oo(t,e,{horizontal:n,minRotation:i}){const r=it(i),o=(n?Math.sin(r):Math.cos(r))||.001,s=.75*e*(""+t).length;return Math.min(e/o,s)}Fo.id="category",Fo.defaults={ticks:{callback:Fo.prototype.getLabelForValue}};class Ro extends Gi{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return v(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:i,max:r}=this;const o=t=>i=e?i:t,s=t=>r=n?r:t;if(t){const t=Q(i),e=Q(r);t<0&&e<0?s(0):t>0&&e>0&&o(0)}if(i===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),s(r+e),t||o(i-e)}this.min=i,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(t,e){const n=[],{bounds:i,step:r,min:o,max:s,precision:a,count:l,maxTicks:c,maxDigits:h,includeBounds:u}=t,d=r||1,f=c-1,{min:g,max:p}=e,m=!v(o),A=!v(s),y=!v(l),b=(p-g)/(h+1);let x,_,w,E,M=J((p-g)/f/d)*d;if(M<1e-14&&!m&&!A)return[{value:g},{value:p}];E=Math.ceil(p/M)-Math.floor(g/M),E>f&&(M=J(E*M/f/d)*d),v(a)||(x=Math.pow(10,a),M=Math.ceil(M*x)/x),"ticks"===i?(_=Math.floor(g/M)*M,w=Math.ceil(p/M)*M):(_=g,w=p),m&&A&&r&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((s-o)/r,M/1e3)?(E=Math.round(Math.min((s-o)/M,c)),M=(s-o)/E,_=o,w=s):y?(_=m?o:_,w=A?s:w,E=l-1,M=(w-_)/E):(E=(w-_)/M,E=et(E,Math.round(E),M/1e3)?Math.round(E):Math.ceil(E));const k=Math.max(ot(M),ot(_));x=Math.pow(10,v(a)?k:a),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let C=0;for(m&&(u&&_!==o?(n.push({value:o}),_<o&&C++,et(Math.round((_+C*M)*x)/x,o,Oo(o,b,t))&&C++):_<o&&C++);C<E;++C)n.push({value:Math.round((_+C*M)*x)/x});return A&&u&&w!==s?n.length&&et(n[n.length-1].value,s,Oo(s,b,t))?n[n.length-1].value=s:n.push({value:s}):A&&w!==s||n.push({value:w}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&nt(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return hn(t,this.chart.options.locale,this.options.ticks.format)}}class To extends Ro{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=E(t)?t:0,this.max=E(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=it(this.options.ticks.minRotation),i=(t?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Lo(t){return 1==t/Math.pow(10,Math.floor(Z(t)))}To.id="linear",To.defaults={ticks:{callback:ji.formatters.numeric}};class zo extends Gi{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=Ro.prototype.parse.apply(this,[t,e]);if(0!==n)return E(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=E(t)?Math.max(0,t):null,this.max=E(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,i=this.max;const r=e=>n=t?n:e,o=t=>i=e?i:t,s=(t,e)=>Math.pow(10,Math.floor(Z(t))+e);n===i&&(n<=0?(r(1),o(10)):(r(s(n,-1)),o(s(i,1)))),n<=0&&r(s(i,-1)),i<=0&&o(s(n,1)),this._zero&&this.min!==this._suggestedMin&&n===s(this.min,0)&&r(s(n,-1)),this.min=n,this.max=i}buildTicks(){const t=this.options,e=function(t,e){const n=Math.floor(Z(e.max)),i=Math.ceil(e.max/Math.pow(10,n)),r=[];let o=M(t.min,Math.pow(10,Math.floor(Z(e.min)))),s=Math.floor(Z(o)),a=Math.floor(o/Math.pow(10,s)),l=s<0?Math.pow(10,Math.abs(s)):1;do{r.push({value:o,major:Lo(o)}),++a,10===a&&(a=1,++s,l=s>=0?1:l),o=Math.round(a*Math.pow(10,s)*l)/l}while(s<n||s===n&&a<i);const c=M(t.max,o);return r.push({value:c,major:Lo(o)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&nt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":hn(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Z(t),this._valueRange=Z(this.max)-Z(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Z(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Io(t){const e=t.ticks;if(e.display&&t.display){const t=be(e.backdropPadding);return k(e.font&&e.font.size,Jt.font.size)+t.height}return 0}function qo(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||t>r?{start:e-n,end:e}:{start:e,end:e+n}}function No(t,e,n,i,r){const o=Math.abs(Math.sin(n)),s=Math.abs(Math.cos(n));let a=0,l=0;i.start<e.l?(a=(e.l-i.start)/o,t.l=Math.min(t.l,e.l-a)):i.end>e.r&&(a=(i.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),r.start<e.t?(l=(e.t-r.start)/s,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/s,t.b=Math.max(t.b,e.b+l))}function jo(t){return 0===t||180===t?"center":t<180?"left":"right"}function Vo(t,e,n){return"right"===n?t-=e:"center"===n&&(t-=e/2),t}function Wo(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function Ho(t,e,n,i){const{ctx:r}=t;if(n)r.arc(t.xCenter,t.yCenter,e,0,H);else{let n=t.getPointPosition(0,e);r.moveTo(n.x,n.y);for(let o=1;o<i;o++)n=t.getPointPosition(o,e),r.lineTo(n.x,n.y)}}zo.id="logarithmic",zo.defaults={ticks:{callback:ji.formatters.logarithmic,major:{enabled:!0}}};class $o extends Ro{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=be(Io(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=E(t)&&!isNaN(t)?t:0,this.max=E(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Io(this.options))}generateTickLabels(t){Ro.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=S(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),i=[],r=[],o=t._pointLabels.length,s=t.options.pointLabels,a=s.centerPointLabels?W/o:0;for(let u=0;u<o;u++){const o=s.setContext(t.getPointLabelContext(u));r[u]=o.padding;const d=t.getPointPosition(u,t.drawingArea+r[u],a),f=xe(o.font),g=(l=t.ctx,c=f,h=_(h=t._pointLabels[u])?h:[h],{w:ee(l,c.string,h),h:h.length*c.lineHeight});i[u]=g;const p=ct(t.getIndexAngle(u)+a),m=Math.round(rt(p));No(n,e,p,qo(m,d.x,g.w,0,180),qo(m,d.y,g.h,90,270))}var l,c,h;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const i=[],r=t._pointLabels.length,o=t.options,s=Io(o)/2,a=t.drawingArea,l=o.pointLabels.centerPointLabels?W/r:0;for(let o=0;o<r;o++){const r=t.getPointPosition(o,a+s+n[o],l),c=Math.round(rt(ct(r.angle+X))),h=e[o],u=Wo(r.y,h.h,c),d=jo(c),f=Vo(r.x,h.w,d);i.push({x:r.x,y:u,textAlign:d,left:f,top:u,right:f+h.w,bottom:u+h.h})}return i}(t,i,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,i))}getIndexAngle(t){return ct(t*(H/(this._pointLabels.length||1))+it(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(v(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(v(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return _e(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const i=this.getIndexAngle(t)-X+n;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:i,bottom:r}=this._pointLabelItems[t];return{left:e,top:n,right:i,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),Ho(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:i}=e,r=this._pointLabels.length;let o,s,a;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:i}}=t;for(let r=e-1;r>=0;r--){const e=i.setContext(t.getPointLabelContext(r)),o=xe(e.font),{x:s,y:a,textAlign:l,left:c,top:h,right:u,bottom:d}=t._pointLabelItems[r],{backdropColor:f}=e;if(!v(f)){const t=be(e.backdropPadding);n.fillStyle=f,n.fillRect(c-t.left,h-t.top,u-c+t.width,d-h+t.height)}he(n,t._pointLabels[r],s,a+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,r),i.display&&this.ticks.forEach(((t,e)=>{0!==e&&(s=this.getDistanceFromCenterForValue(t.value),function(t,e,n,i){const r=t.ctx,o=e.circular,{color:s,lineWidth:a}=e;!o&&!i||!s||!a||n<0||(r.save(),r.strokeStyle=s,r.lineWidth=a,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),Ho(t,n,o,i),r.closePath(),r.stroke(),r.restore())}(this,i.setContext(this.getContext(e-1)),s,r))})),n.display){for(t.save(),o=r-1;o>=0;o--){const i=n.setContext(this.getPointLabelContext(o)),{color:r,lineWidth:l}=i;l&&r&&(t.lineWidth=l,t.strokeStyle=r,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,s=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),a=this.getPointPosition(o,s),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(a.x,a.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((i,s)=>{if(0===s&&!e.reverse)return;const a=n.setContext(this.getContext(s)),l=xe(a.font);if(r=this.getDistanceFromCenterForValue(this.ticks[s].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(i.label).width,t.fillStyle=a.backdropColor;const e=be(a.backdropPadding);t.fillRect(-o/2-e.left,-r-l.size/2-e.top,o+e.width,l.size+e.height)}he(t,i.label,0,-r,l,{color:a.color})})),t.restore()}drawTitle(){}}$o.id="radialLinear",$o.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:ji.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},$o.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},$o.descriptors={angleLines:{_fallback:"grid"}};const Uo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Yo=Object.keys(Uo);function Xo(t,e){return t-e}function Go(t,e){if(v(e))return null;const n=t._adapter,{parser:i,round:r,isoWeekday:o}=t._parseOpts;let s=e;return"function"==typeof i&&(s=i(s)),E(s)||(s="string"==typeof i?n.parse(s,i):n.parse(s)),null===s?null:(r&&(s="week"!==r||!tt(o)&&!0!==o?n.startOf(s,r):n.startOf(s,"isoWeek",o)),+s)}function Ko(t,e,n,i){const r=Yo.length;for(let o=Yo.indexOf(t);o<r-1;++o){const t=Uo[Yo[o]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(r*t.size))<=i)return Yo[o]}return Yo[r-1]}function Zo(t,e,n){if(n){if(n.length){const{lo:i,hi:r}=we(n,e);t[n[i]>=e?n[i]:n[r]]=!0}}else t[e]=!0}function Qo(t,e,n){const i=[],r={},o=e.length;let s,a;for(s=0;s<o;++s)a=e[s],r[a]=s,i.push({value:a,major:!1});return 0!==o&&n?function(t,e,n,i){const r=t._adapter,o=+r.startOf(e[0].value,i),s=e[e.length-1].value;let a,l;for(a=o;a<=s;a=+r.add(a,1,i))l=n[a],l>=0&&(e[l].major=!0);return e}(t,i,r,n):i}class Jo extends Gi{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const n=t.time||(t.time={}),i=this._adapter=new ii._date(t.adapters.date);T(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Go(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:i,max:r,minDefined:o,maxDefined:s}=this.getUserBounds();function a(t){o||isNaN(t.min)||(i=Math.min(i,t.min)),s||isNaN(t.max)||(r=Math.max(r,t.max))}o&&s||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),i=E(i)&&!isNaN(i)?i:+e.startOf(Date.now(),n),r=E(r)&&!isNaN(r)?r:+e.endOf(Date.now(),n)+1,this.min=Math.min(i,r-1),this.max=Math.max(i+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const r=this.min,o=function(t,e,n){let i=0,r=t.length;for(;i<r&&t[i]<e;)i++;for(;r>i&&t[r-1]>n;)r--;return i>0||r<t.length?t.slice(i,r):t}(i,r,this.max);return this._unit=e.unit||(n.autoSkip?Ko(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,n,i,r){for(let o=Yo.length-1;o>=Yo.indexOf(n);o--){const n=Yo[o];if(Uo[n].common&&t._adapter.diff(r,i,n)>=e-1)return n}return Yo[n?Yo.indexOf(n):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=Yo.indexOf(t)+1,n=Yo.length;e<n;++e)if(Uo[Yo[e]].common)return Yo[e]}(this._unit):void 0,this.initOffsets(i),t.reverse&&o.reverse(),Qo(this,o,this._majorUnit)}initOffsets(t){let e,n,i=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),i=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),r=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;i=ut(i,0,o),r=ut(r,0,o),this._offsets={start:i,end:r,factor:1/(i+1+r)}}_generate(){const t=this._adapter,e=this.min,n=this.max,i=this.options,r=i.time,o=r.unit||Ko(r.minUnit,e,n,this._getLabelCapacity(e)),s=k(r.stepSize,1),a="week"===o&&r.isoWeekday,l=tt(a)||!0===a,c={};let h,u,d=e;if(l&&(d=+t.startOf(d,"isoWeek",a)),d=+t.startOf(d,l?"day":o),t.diff(n,e,o)>1e5*s)throw new Error(e+" and "+n+" are too far apart with stepSize of "+s+" "+o);const f="data"===i.ticks.source&&this.getDataTimestamps();for(h=d,u=0;h<n;h=+t.add(h,s,o),u++)Zo(c,h,f);return h!==n&&"ticks"!==i.bounds&&1!==u||Zo(c,h,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,i){const r=this.options,o=r.time.displayFormats,s=this._unit,a=this._majorUnit,l=s&&o[s],c=a&&o[a],h=n[e],u=a&&c&&h&&h.major,d=this._adapter.format(t,i||(u?c:l)),f=r.ticks.callback;return f?S(f,[d,e,n],this):d}generateTickLabels(t){let e,n,i;for(e=0,n=t.length;e<n;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,i=it(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),o=Math.sin(i),s=this._resolveTickFontOptions(0).size;return{w:n*r+s*o,h:n*o+s*r}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this._tickFormatFunction(t,0,Qo(this,[t],this._majorUnit),i),o=this._getLabelSize(r),s=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return s>0?s:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)n=n.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const i=this.getLabels();for(e=0,n=i.length;e<n;++e)t.push(Go(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Se(t.sort(Xo))}}function ts(t,e,n){let i,r,o,s,a=0,l=t.length-1;n?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=Ee(t,"pos",e)),({pos:i,time:o}=t[a]),({pos:r,time:s}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=Ee(t,"time",e)),({time:i,pos:o}=t[a]),({time:r,pos:s}=t[l]));const c=r-i;return c?o+(s-o)*(e-i)/c:o}Jo.id="time",Jo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class es extends Jo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=ts(e,this.min),this._tableRange=ts(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,i=[],r=[];let o,s,a,l,c;for(o=0,s=t.length;o<s;++o)l=t[o],l>=e&&l<=n&&i.push(l);if(i.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,s=i.length;o<s;++o)c=i[o+1],a=i[o-1],l=i[o],Math.round((c+a)/2)!==l&&r.push({time:l,pos:o/(s-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(ts(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return ts(this._table,n*this._tableRange+this._minPos,!0)}}es.id="timeseries",es.defaults=Jo.defaults;const ns=[ti,Hr,Do,Object.freeze({__proto__:null,CategoryScale:Fo,LinearScale:To,LogarithmicScale:zo,RadialLinearScale:$o,TimeScale:Jo,TimeSeriesScale:es})];vr.register(...ns);let is={y:"rgb(255,0,0)",y1:"rgb(255,0,0)",y2:"rgb(0,70,239)",y3:"rgb(130,223,0)",y4:"rgb(205,0,179)",y5:"rgb(0,185,154)",y5:"rgb(243,132,0)",y5:"rgb(57,0,227)",y5:"rgb(9,209,0)",y5:"rgb(190,0,64)",y5:"rgb(0,155,247)"},rs="rgb(0,0,0)";function os(){cs.minX=1/0,cs.maxX=-1/0,cs.data.datasets=[],cs.update()}function ss(t,e,n,i){cs.minX=Math.min(cs.minX,...e.map((t=>t.x))),cs.maxX=Math.max(cs.maxX,...e.map((t=>t.x)));let r={label:t,data:e,borderColor:is[t]||rs,yAxisID:"y"};n&&(r.borderColor="transparent",r.backgroundColor=is[i].slice(0,-1)+",0.3)",r.fill=cs.data.datasets.length-("lower"===n?1:2),r.pointRadius=0),cs.data.datasets.push(r)}function as(t){cs.options.plugins.title.display=!1,cs.update()}const ls=document.getElementById("plot"),cs=new vr(ls,{type:"scatter",data:{datasets:[]},options:{responsive:!0,plugins:{legend:{position:"top"},title:{display:!0,text:"Chart.js Scatter Multi Axis Chart"}},scales:{y:{type:"linear",position:"left",reverse:!1,ticks:{color:"#00f"},grid:{drawOnChartArea:!1}}}}});ls.style.backgroundColor="white",os();var hs=n(254),us=n.n(hs);function ds(t){var e,n,i;return n=0==t?0:(e=.5*Math.abs(t))>3?1:e<1?((((((((.000124818987*(i=e*e)-.001075204047)*i+.005198775019)*i-.019198292004)*i+.059054035642)*i-.151968751364)*i+.319152932694)*i-.5319230073)*i+.797884560593)*e*2:(((((((((((((-45255659e-12*(e-=2)+.00015252929)*e-19538132e-12)*e-.000676904986)*e+.001390604284)*e-.00079462082)*e-.002034254874)*e+.006549791214)*e-.010557625006)*e+.011630447319)*e-.009279453341)*e+.005353579108)*e-.002141268741)*e+.000535310849)*e+.999936657524,t>0?.5*(n+1):.5*(1-n)}const fs=function(t){var e=-6,n=6,i=0;for(t<0&&(t=0),t>1&&(t=1);n-e>1e-6;)ds(i)>t?n=i:e=i,i=.5*(n+e);return i};var gs=n(162);function ps(t,e){let n;return e.startsWith("linear")?n=us().linear(t,{precision:3}):e.startsWith("quadratic")?n=us().polynomial(t,{order:2,precision:3}):e.startsWith("cubic")&&(n=us().polynomial(t,{order:3,precision:3})),n}function ms(t,e,n,i){let r=t.length,o=r-2,s=t.reduce(((t,e)=>t+e[0]),0)/t.length,a=(t.reduce(((t,e)=>t+e[1]),0),t.length,e(n)[1]),l=t.map(((t,n)=>{let i=t[1],r=e(t[0])[1];return Math.pow(i-r,2)})).reduce(((t,e)=>t+e),0),c=t.map((t=>Math.pow(t[0]-s,2))).reduce(((t,e)=>t+e),0),h=Math.sqrt(l/(r-2))*Math.sqrt(1+1/r+Math.pow(n-s,2)/(c-r*Math.pow(s,2))),u=function(t,e){return gs.jStat.studentt.inv(1-(1-e)/2,t)}(o,i),d=a-h*u,f=a+h*u;return console.log("t score",u),[d,f]}const As=t=>document.querySelector(t),ys=As("#choose-file"),bs=As("#preset"),xs=As("#axis"),vs=As("#model"),_s=As("#equation"),ws=As("#r-output"),Es=As("#x-value"),Ms=As("#confidence"),ks=As("#k"),Cs=As("#lower"),Ss=As("#middle"),Bs=As("#upper"),Ps=As("#ci-output"),Ds=As("#algebraic");let Fs="",Os=[],Rs=t=>t,Ts=[],Ls=[],zs="y1",Is="linear",qs=.95,Ns=0,js="tab-scatterplot",Vs=[],Ws={};function Hs(){Ts=Object.keys(Os[0]),Ls=Ts.filter((t=>t.startsWith("y")));let t=Ls.map((t=>`<option value="${t}">${t}</option>`)).join("");xs.innerHTML=t,zs=Ls[0]}function $s(t=null){let e=t||js;"tab-scatterplot"===e?(os(),Ls.forEach((t=>{let e=Os.map((e=>({x:e.x,y:Rs(e[t])})));ss(t,e)})),console.log(Ws.regression),function(t,e){let n=[];for(let t=0;t<100;t++){let i=cs.minX+(cs.maxX-cs.minX)*t/100,r=e(i)[1];n.push({x:i,y:r})}cs.data.datasets.push({label:t,data:n,borderColor:rs,yAxisID:"y",type:"line",pointRadius:0,borderWidth:1.5})}(Is+" least squares for "+zs,Ws.regression.predict),Ws.lowerBand&&(ss("Lower bound",Ws.lowerBand,"lower",zs),ss("Upper bound",Ws.upperBand,"upper",zs)),as()):"tab-residuals"===e?function(){os();let t=Ws.residuals.map((t=>({x:t[0],y:t[1]})));ss(`${zs} residuals`,t),as()}():"tab-qq"===e&&function(){os();let t=Ws.qq.map((t=>({x:t[0],y:t[1]})));ss(`Q–Q plot of ${zs} residuals`,t),as()}()}function Us(t){return`${Fs}-${Is}-${zs}-${t}.png`}function Ys(){Rs=Is.endsWith("ln")?t=>Math.log(t):Is.endsWith("sqrt")?t=>Math.sqrt(t):t=>t,Vs=Os.map((t=>[t.x,Rs(t[zs])])),Ws=function(t,e,n,i){let r={name:e,regression:ps(t,e)};r.residuals=function(t,e){return t.map((t=>{let n=e(t[0]);return[t[0],t[1]-n[1]]}))}(t,r.regression.predict),r.qq=function(t){let e=[],n=t.length,i=t.sort(((t,e)=>t[1]-e[1]));for(let t=0;t<n;t++){let r=fs((t+.5)/(n+1));e.push([r,i[t][1]])}return e}(r.residuals),r.qqBestFit=ps(r.qq,"linear"),r.qq4=function(t){let e=t.sort(((t,e)=>t[1]-e[1]));return[e[0][1],e[Math.floor(t.length/4)][1],e[Math.floor(t.length/2)][1],e[Math.floor(3*t.length/4)][1],e[t.length-1][1]]}(r.qq),r.n=t.length,r.df=r.n-2,r.x0=n,null!=n&&(r.y0=r.regression.predict(n)[1],r.predictionInterval=ms(t,r.regression.predict,n,i));let o=t.map((e=>ms(t,r.regression.predict,e[0],i)));return r.lowerBand=t.map(((t,e)=>({x:t[0],y:o[e][0]}))),r.upperBand=t.map(((t,e)=>({x:t[0],y:o[e][1]}))),r}(Vs,Is,Ns,qs),function(){console.log(Ws),_s.innerHTML=Ws.regression.string.replace(/\+ \-/g,"-");let t=["Intercept","x","x^2","x^3","x^4","x^5","x^6","x^7","x^8","x^9","x^10"],e=Ws.regression.equation.map(((e,n)=>[t[n],e.toPrecision(4),"?","?","?"])).map((t=>t.map((t=>t.toString().padStart(10))).join(" "))).join("\n"),n=`Residuals:\n${["Min","1Q","Median","3Q","Max"].map((t=>t.padStart(10))).join(" ")}\n${Ws.qq4.map((t=>t.toPrecision(4).padStart(10))).join(" ")}\n\nCoefficients:\n${["","Estimate","Std. Error","t value","Pr(>|t|)"].map((t=>t.padStart(10))).join(" ")}\n${e}\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nR-squared: ${Ws.regression.r2} on ${Ws.df} degrees of freedom\n`;ws.innerText=n}(),$s(),function(){let t=Ws.predictionInterval,e=qs;if(!t)return;let n=t[0],i=Ws.y0,r=t[1];ks.innerText=Ws.x0.toPrecision(4),Cs.innerText=n.toPrecision(4),Ss.innerText=i.toPrecision(4),Bs.innerText=r.toPrecision(4),Ds.innerText=`(${n.toPrecision(4)}, ${r.toPrecision(4)})`,Ps.innerText=100*e+"%"}()}ys.addEventListener("change",(function(t){let e=t.target.files[0];if(!e)return;let n=new FileReader;n.onload=t=>{console.log(t.target.result);let n=t.target.result.split("\n"),i=n[0].split(",").map((t=>t.trim()));Os=n.slice(1).map((t=>{let e=t.split(",").map((t=>t.trim())),n={};for(let t=0;t<i.length;t++){let r=parseFloat(e[t]);if(isNaN(r))return null;n[i[t]]=r}return n})).filter((t=>null!==t)),console.log(Os),Fs=e.name,Hs(),Ys()},n.readAsText(e)})),bs.addEventListener("change",(()=>{Fs=bs.value,Fs&&(Os=n(728)(`./${Fs}.csv`),console.log(Os),Hs(),Ys())})),xs.addEventListener("change",(()=>{zs=xs.value,Ys()})),vs.addEventListener("change",(()=>{let t=vs.value;t&&(Is=t,Ys())})),Es.addEventListener("change",(()=>{let t=Es.value;t&&(Ns=parseFloat(t),Ys())})),Ms.addEventListener("change",(()=>{let t=Ms.value;t&&(qs=parseFloat(t),Ys())}));let Xs=(".tab",document.querySelectorAll(".tab"));Xs.forEach((t=>t.addEventListener("click",(function(t){var e;e="#"+t.target.id,js=e,Xs.forEach((t=>{t.classList.remove("active")})),As(e).classList.add("active"),js=t.target.id,$s()}))));const Gs=t=>document.querySelector(t),Ks=Gs("#step1"),Zs=Gs("#step2"),Qs=Gs("#step3a"),Js=Gs("#step3b"),ta=Gs("#step4"),ea=Gs("#plot");function na(t){var e=document.createElement("textarea");e.textContent=t;var n=document.getElementsByTagName("body")[0];n.appendChild(e),e.select(),document.execCommand("copy"),n.removeChild(e)}Ks.addEventListener("click",(()=>{na(Gs("#equation").innerText)})),Zs.addEventListener("click",(()=>{na(Gs("#r-output").innerText)}));const ia=t=>new Promise((e=>setTimeout(e,t)));function ra(t,e="untitled.png"){var n=document.createElement("a");n.href=t,n.download=e,document.body.appendChild(n),n.click()}Qs.addEventListener("click",(function(){(async()=>{$s("tab-residuals"),await ia(650),ra(ea.toDataURL("image/png",1),Us("residuals")),$s()})()})),Js.addEventListener("click",(function(){(async()=>{$s("tab-qq"),await ia(650),ra(ea.toDataURL("image/png",1),Us("QQ")),$s()})()})),ta.addEventListener("click",(()=>{na(Gs("#algebraic").innerText)})),console.log("Hello world from index.js")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,